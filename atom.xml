<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>白茶清欢</title>
  
  <subtitle>像三月的风扑击明亮的草垛，春天在每个夜晚数她的花朵</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-20T13:52:53.994Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>陈剑</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>48第二次前端面试总结</title>
    <link href="http://yoursite.com/2020/03/20/48%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/03/20/48%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</id>
    <published>2020-03-20T13:44:19.000Z</published>
    <updated>2020-03-20T13:52:53.994Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：第一次前端面试的时候，是一个规模比较小的公司，我提前准备了很久，但是面试的时候由于是群面，很多技术性的问题都没有问，只是简单聊了聊项目。这次面试体会了一次大厂面试的感觉，虽然过程很虐。。</p></blockquote><a id="more"></a><h4 id="浏览器加载页面的方式"><a href="#浏览器加载页面的方式" class="headerlink" title="浏览器加载页面的方式"></a>浏览器加载页面的方式</h4><p><strong>基础版本</strong></p><ul><li>浏览器根据请求的<code>URL</code>交给<code>DNS</code>域名解析，找到真实<code>IP</code>，向服务器发起请求；</li><li>服务器交给后台处理完成后返回数据，浏览器接收文件（<code>HTML、JS、CSS</code>、图象等）；</li><li>浏览器对加载到的资源（<code>HTML、JS、CSS</code>等）进行语法解析，建立相应的内部数据结构（如<code>HTML</code>的<code>DOM</code>）；</li><li>载入解析到的资源文件，渲染页面，完成。</li></ul><p><strong>详细版</strong></p><ol><li><p>在浏览器地址栏输入URL</p></li><li><p>浏览器查看缓存，如果请求资源在缓存中并且新鲜，跳转到转码步骤</p><ol><li>如果资源未缓存，发起新请求</li><li>如果已缓存，检验是否足够新鲜，足够新鲜直接提供给客户端，否则与服务器进行验证。</li><li>检验新鲜通常有两个HTTP头进行控制<code>Expires</code>和<code>Cache-Control</code>：<ul><li>HTTP1.0提供Expires，值为一个绝对时间表示缓存新鲜日期</li><li>HTTP1.1增加了Cache-Control: max-age=,值为以秒为单位的最大新鲜时间</li></ul></li></ol></li><li><p>浏览器<strong>解析URL</strong>获取协议，主机，端口，path</p></li><li><p>浏览器<strong>组装一个HTTP（GET）请求报文</strong></p></li><li><p>浏览器获取主机ip地址，过程如下：</p><ul><li><p>浏览器缓存</p></li><li><p>本机缓存</p></li><li><p>hosts文件</p></li><li><p>路由器缓存</p></li><li><p>ISP DNS缓存</p></li><li><p>DNS递归查询（可能存在负载均衡导致每次IP不一样）</p></li></ul></li><li><p>打开一个socket与目标IP地址，端口建立TCP链接，三次握手如下：</p><ol><li>客户端发送一个TCP的<strong>SYN=1，Seq=X</strong>的包到服务器端口</li><li>服务器发回<strong>SYN=1， ACK=X+1， Seq=Y</strong>的响应包</li><li>客户端发送<strong>ACK=Y+1， Seq=Z</strong></li></ol></li><li><p>TCP链接建立后<strong>发送HTTP请求</strong></p></li><li><p>服务器接受请求并解析，将请求转发到服务程序，如虚拟主机使用HTTP Host头部判断请求的服务程序</p></li><li><p>服务器检查<strong>HTTP请求头是否包含缓存验证信息</strong>如果验证缓存新鲜，返回<strong>304</strong>等对应状态码</p></li><li><p>处理程序读取完整请求并准备HTTP响应，可能需要查询数据库等操作</p></li><li><p>服务器将<strong>响应报文通过TCP连接发送回浏览器</strong></p></li><li><p>浏览器接收HTTP响应，然后根据情况选择关闭TCP连接或者保留重用，关闭TCP连接的四次握手如下：</p><ul><li><p>主动方发送<strong>Fin=1， Ack=Z， Seq= X</strong>报文</p></li><li><p>被动方发送<strong>ACK=X+1， Seq=Z</strong>报文</p></li><li><p>被动方发送<strong>Fin=1， ACK=X， Seq=Y</strong>报文</p></li><li><p>主动方发送<strong>ACK=Y， Seq=X</strong>报文</p></li></ul></li><li><p>浏览器检查响应状态吗：是否为1XX，3XX， 4XX， 5XX，这些情况处理与2XX不同</p></li><li><p>如果资源可缓存，<strong>进行缓存</strong></p></li><li><p>对响应进行<strong>解码</strong>（例如gzip压缩）</p></li><li><p>根据资源类型决定如何处理（假设资源为HTML文档）</p></li><li><p><strong>解析HTML文档，构件DOM树，下载资源，构造CSSOM树，执行js脚本</strong>，这些操作没有严格的先后顺序，以下分别解释</p></li><li><p>构建DOM树：</p><ul><li><p><strong>Tokenizing</strong>：根据HTML规范将字符流解析为标记</p></li><li><p><strong>Lexing</strong>：词法分析将标记转换为对象并定义属性和规则</p></li><li><p><strong>DOM construction</strong>：根据HTML标记关系将对象组成DOM树</p></li></ul></li><li><p>解析过程中遇到图片、样式表、js文件，<strong>启动下载</strong></p></li><li><p>构建CSSOM树：</p><ol><li><strong>Tokenizing</strong>：字符流转换为标记流</li><li><strong>Node</strong>：根据标记创建节点</li><li><strong>CSSOM</strong>：节点创建CSSOM树</li></ol></li><li><p><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction" target="_blank" rel="noopener">根据DOM树和CSSOM树构建渲染树</a>:</p><ul><li><p>从DOM树的根节点遍历所有<strong>可见节点</strong>，不可见节点包括：1）<code>script</code>,<code>meta</code>这样本身不可见的标签。2)被css隐藏的节点，如<code>display: none</code></p></li><li><p>对每一个可见节点，找到恰当的CSSOM规则并应用</p></li><li><p>发布可视节点的内容和计算样式</p></li></ul></li><li><p>js解析如下：</p><ul><li><p>浏览器创建Document对象并解析HTML，将解析到的元素和文本节点添加到文档中，此时<strong>document.readystate为loading</strong></p></li><li><p>HTML解析器遇到<strong>没有async和defer的script时</strong>，将他们添加到文档中，然后执行行内或外部脚本。这些脚本会同步执行，并且在脚本下载和执行时解析器会暂停。这样就可以用document.write()把文本插入到输入流中。<strong>同步脚本经常简单定义函数和注册事件处理程序，他们可以遍历和操作script和他们之前的文档内容</strong></p></li><li><p>当解析器遇到设置了<strong>async</strong>属性的script时，开始下载脚本并继续解析文档。脚本会在它<strong>下载完成后尽快执行</strong>，但是<strong>解析器不会停下来等它下载</strong>。异步脚本<strong>禁止使用document.write()</strong>，它们可以访问自己script和之前的文档元素</p></li><li><p>当文档完成解析，document.readState变成interactive</p></li><li><p>所有<strong>defer</strong>脚本会<strong>按照在文档出现的顺序执行</strong>，延迟脚本<strong>能访问完整文档树</strong>，禁止使用document.write()</p></li><li><p>浏览器<strong>在Document对象上触发DOMContentLoaded事件</strong></p></li><li><p>此时文档完全解析完成，浏览器可能还在等待如图片等内容加载，等这些<strong>内容完成载入并且所有异步脚本完成载入和执行</strong>，document.readState变为complete，window触发load事件</p></li></ul></li><li><p><strong>显示页面</strong>（HTML解析过程中会逐步显示页面）</p></li></ol><h4 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h4><p>BFC，块状格式化上下文，就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然。计算BFC的高度时，浮动元素也参与计算。</p><ul><li>创建规则：<ul><li>根元素</li><li>浮动元素（<code>float</code>不取值为<code>none</code>）</li><li>绝对定位元素（<code>position</code>取值为<code>absolute</code>或<code>fixed</code>）</li><li><code>display</code>取值为<code>inline-block</code>、<code>table-cell</code>、<code>table-caption</code>、<code>flex</code>、<code>inline-flex</code>之一的元素</li><li><code>overflow</code>不取值为<code>visible</code>的元素</li></ul></li><li>作用：<ul><li>可以包含浮动元素</li><li>不被浮动元素覆盖</li><li>阻止父子元素的<code>margin</code>折叠</li></ul></li></ul><h4 id="如何去除浮动，有几种方式"><a href="#如何去除浮动，有几种方式" class="headerlink" title="如何去除浮动，有几种方式"></a>如何去除浮动，有几种方式</h4><ul><li>父级<code>div</code>定义<code>height</code></li><li>结尾处加空<code>div</code>标签<code>clear:both</code></li><li>父级<code>div</code>定义伪类<code>:after</code>和<code>zoom</code></li><li>父级<code>div</code>定义<code>overflow:hidden</code></li><li>父级<code>div</code>也浮动，需要定义宽度</li><li>结尾处加<code>br</code>标签<code>clear:both</code></li></ul><p>比较好的是第3种方式，好多网站都这么用</p><h4 id="javascript有几种数据类型"><a href="#javascript有几种数据类型" class="headerlink" title="javascript有几种数据类型"></a>javascript有几种数据类型</h4><p>null，undefined，string，number，Boolean，数组，对象</p><h4 id="谈一谈let与var的区别"><a href="#谈一谈let与var的区别" class="headerlink" title="谈一谈let与var的区别"></a>谈一谈let与var的区别</h4><ul><li><code>let</code>命令不存在变量提升，如果在<code>let</code>前使用，会导致报错</li><li>如果块区中存在<code>let</code>和<code>const</code>命令，就会形成封闭作用域</li><li>不允许重复声明，因此，不能在函数内部重新声明参数</li></ul><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><ul><li>闭包就是能够读取其他函数内部变量的函数</li><li>闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量,利用闭包可以突破作用链域</li><li>闭包的特性：<ul><li>函数内再嵌套函数</li><li>内部函数可以引用外层的参数和变量</li><li>参数和变量不会被垃圾回收机制回收</li></ul></li></ul><p><strong>说说你对闭包的理解</strong></p><ul><li>使用闭包主要是为了设计私有的方法和变量。闭包的优点是可以避免全局变量的污染，缺点是闭包会常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。在js中，函数即闭包，只有函数才会产生作用域的概念</li><li>闭包 的最大用处有两个，一个是可以读取函数内部的变量，另一个就是让这些变量始终保持在内存中</li><li>闭包的另一个用处，是封装对象的私有属性和私有方法</li><li><strong>好处</strong>：能够实现封装和缓存等；</li><li><strong>坏处</strong>：就是消耗内存、不正当使用会造成内存溢出的问题</li></ul><p><strong>使用闭包的注意点</strong></p><ul><li>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露</li><li>解决方法是，在退出函数之前，将不使用的局部变量全部删除</li></ul><h4 id="使用原生JavaScript实现ajax"><a href="#使用原生JavaScript实现ajax" class="headerlink" title="使用原生JavaScript实现ajax"></a>使用原生JavaScript实现ajax</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//第一步 创建ajax对象</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//第二步 打开要发送的地址</span><br><span class="line"></span><br><span class="line">xhr.open(&quot;get&quot;,&quot;http://10.9.188.25/qbank/php/select.php&quot;);</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"></span><br><span class="line">  参数1：method---&gt;get post</span><br><span class="line"></span><br><span class="line">  参数2：请求的地址</span><br><span class="line"></span><br><span class="line">  参数3：布尔值 默认是false 异步true同步</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">//第三部发送</span><br><span class="line"></span><br><span class="line">xhr.send();</span><br><span class="line"></span><br><span class="line">console.log(xhr.readyState)</span><br><span class="line"></span><br><span class="line">//第四步</span><br><span class="line"></span><br><span class="line">xhr.onreadystatechange = function()&#123;</span><br><span class="line"></span><br><span class="line">  if(xhr.readyState == 4 &amp;&amp; xhr.status == 200)&#123;</span><br><span class="line"></span><br><span class="line">     console.log(JSON.parse(xhr.responseText))</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要：第一次前端面试的时候，是一个规模比较小的公司，我提前准备了很久，但是面试的时候由于是群面，很多技术性的问题都没有问，只是简单聊了聊项目。这次面试体会了一次大厂面试的感觉，虽然过程很虐。。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="web前端面试" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
      <category term="总结" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>47VUEX的使用</title>
    <link href="http://yoursite.com/2020/03/19/47VUEX%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2020/03/19/47VUEX%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-03-19T13:54:55.000Z</published>
    <updated>2020-03-20T07:22:22.938Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>VUE全家桶真多啊。。</p></blockquote><a id="more"></a><h4 id="vuex创建"><a href="#vuex创建" class="headerlink" title="vuex创建"></a>vuex创建</h4><ol><li><p>src目录下新建一个vuex的文件夹</p></li><li><p>vuex文件夹里面新建一个store.js</p></li><li><p>安装vuex</p><ul><li>cnpm install vuex –save</li></ul></li><li><p>在store.js中引入vue  引入vuex并且use vuex</p><ul><li><p>import Vue from ‘vue’</p><p>import Vuex from ‘vuex’</p><p>Vue.use(Vuex)</p></li></ul></li><li><p>定义数据</p><ul><li><p>state在vuex中用于存储数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var state=&#123;</span><br><span class="line">count:1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>定义方法</p><ul><li><p>mutation里面放的是方法，主要用于改变state里面的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var mutation&#123;</span><br><span class="line">incCount()&#123;</span><br><span class="line">++state.count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>暴露</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">state,</span><br><span class="line">mutations</span><br><span class="line">&#125;)</span><br><span class="line">export default store;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="vuex数据使用"><a href="#vuex数据使用" class="headerlink" title="vuex数据使用"></a>vuex数据使用</h4><ol><li><p>在其他页面引入store</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import store from &apos;../vuex/store.js&apos;</span><br></pre></td></tr></table></figure></li><li><p>注册</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export default&#123;</span><br><span class="line">······</span><br><span class="line">store，</span><br><span class="line">······</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;this.$store.state.count&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&apos;addCount&apos;&gt;点击增加数据&lt;/button&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">···</span><br><span class="line">methods：&#123;</span><br><span class="line">addCount()&#123;</span><br><span class="line">//改变vuex store里面的数据</span><br><span class="line">this.$store.commit(&apos;incCount&apos;);  //触发state里面的数据</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="Getters操作数据"><a href="#Getters操作数据" class="headerlink" title="Getters操作数据"></a>Getters操作数据</h4><p>改变state里面的count数据的时候会触发getters里面的方法，获取新的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var getters=&#123;</span><br><span class="line">computedCount:(state)=&gt;&#123;</span><br><span class="line">return state.count*2; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; this.$store.getters.computedCount &#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><p>Action 类似于 mutation，不同在于：</p><ul><li>Action 提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作，突破了mutation只能同步执行的限制。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;VUE全家桶真多啊。。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="VUE" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/VUE/"/>
    
    
      <category term="VUE" scheme="http://yoursite.com/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>46VUE中index.html，App.vue，main.js之间的关系</title>
    <link href="http://yoursite.com/2020/03/18/46VUE%E4%B8%ADindex-html%EF%BC%8CVue-vue%EF%BC%8Cmain-js%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <id>http://yoursite.com/2020/03/18/46VUE%E4%B8%ADindex-html%EF%BC%8CVue-vue%EF%BC%8Cmain-js%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/</id>
    <published>2020-03-18T13:52:44.000Z</published>
    <updated>2020-03-18T14:15:07.701Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：index.html，App.vue，main.js相互依赖</p></blockquote><p>首先要明确这几个文件各有什么作用：</p><p><strong>index.html—主页，项目入口</strong></p><p><strong>App.vue—根组件</strong></p><p><strong>main.js—入口文件</strong></p><p><img src="/2020/03/18/46VUE中index-html，Vue-vue，main-js之间的关系/1.png" alt="image-20200318215949356"></p><p><img src="/2020/03/18/46VUE中index-html，Vue-vue，main-js之间的关系/2.png" alt="image-20200318220110871"></p><p><img src="/2020/03/18/46VUE中index-html，Vue-vue，main-js之间的关系/3.png" alt="image-20200318220132797"></p><p>项目启动之后：</p><p><img src="/2020/03/18/46VUE中index-html，Vue-vue，main-js之间的关系/4.png" alt="image-20200318220732215"></p><p>可以看到，在网页的Title部分，加载了index.html中定义的Title，而在正文部分，加载了App.vue中定义的部分。</p><p>所以浏览器访问项目，最先访问的是index.html文件，index.html文件中有一个名为app的挂载点，然后Vue根实例就会挂载到该挂载点上， main.js作为项目的入口文件，在main.js中，新建了一个Vue实例，在Vue实例中，通过：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  //components: &#123;App &#125;,</span><br><span class="line">  //template: &apos;&lt;App/&gt;&apos;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>告诉该实例要挂载的地方（即实例装载到index.html中的位置），template会替代原来的的挂载点处的内容</p><p><strong>总结：</strong>在项目运行中，main.js作为项目的入口文件，运行中，找到其实例需要挂载的位置，即index.html中，刚开始，index.html的挂载点处的内容会被显示，但是随后就被实例中的组件中的模板中的内容所取代，所以我们会看到有那么一瞬间会显示出index.html中正文的内容。</p><p>而index.html中的Title部分不会被取代，所以会一直保留。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;摘要：index.html，App.vue，main.js相互依赖&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先要明确这几个文件各有什么作用：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;index.html—主页，项目入口&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;
      
    
    </summary>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="VUE" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/VUE/"/>
    
    
      <category term="VUE" scheme="http://yoursite.com/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>46VUE的父子组件传值</title>
    <link href="http://yoursite.com/2020/03/17/46VUE%E7%9A%84%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/"/>
    <id>http://yoursite.com/2020/03/17/46VUE%E7%9A%84%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/</id>
    <published>2020-03-17T14:07:17.000Z</published>
    <updated>2020-03-17T14:25:01.566Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：专业做前端的工具，真香啊。。。</p></blockquote><a id="more"></a><h4 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h4><ol><li>父组件向子组件传值，首先需要给DOM节点绑定属性，使用<code>v-bind:title=&quot;title&quot;</code>的方式动态增加属性，然后需要注意的几点是：</li></ol><ul><li>组件实例的作用域是孤立的；</li><li>子组件要显式的用<code>props</code>选项声明它预期的数据，如：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 某个子组件中：</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    title: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &apos;hello world&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就可以在页面中使用了。以上就是<code>单向数据流</code>的一般表现了： 父级 prop 的更新会向下流动到子组件中，但是反过来则不行。</p><ol start="2"><li>子组件通过<code>事件</code>给父组件发送信息。</li></ol><p>每个Vue实例都实现了事件接口：使用<code>$on(evntName)</code>监听事件；使用<code>$emit(eventName,optionalPayload)</code>触发事件。另外，父组件可以在使用子组件的地方直接用<code>v-on</code>来监听子组件触发的事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;test&quot;&gt;</span><br><span class="line">      &lt;test-com @childFn=&quot;parentFn&quot;&gt;&lt;/test-com&gt;</span><br><span class="line">      &lt;br/&gt; </span><br><span class="line">      子组件传来的值 : &#123;&#123;message&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    // ...</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: &apos;&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">       parentFn(payload) &#123;</span><br><span class="line">        this.message = payload;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;VUE</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line">&lt;template&gt; </span><br><span class="line">&lt;div class=&quot;testCom&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;message&quot; /&gt;</span><br><span class="line">    &lt;button @click=&quot;click&quot;&gt;Send&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    // ...</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          // 默认</span><br><span class="line">          message: &apos;我是来自子组件的消息&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      click() &#123;</span><br><span class="line">            this.$emit(&apos;childFn&apos;, this.message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要：专业做前端的工具，真香啊。。。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="VUE" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/VUE/"/>
    
    
      <category term="VUE" scheme="http://yoursite.com/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>45VUE的入门笔记</title>
    <link href="http://yoursite.com/2020/03/16/45VUE%E7%9A%84%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/03/16/45VUE%E7%9A%84%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</id>
    <published>2020-03-16T14:15:06.000Z</published>
    <updated>2020-03-16T14:45:53.951Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：感觉VUE挺简单的。。</p></blockquote><a id="more"></a><h4 id="new-Vue-是创建了一个Vue实例"><a href="#new-Vue-是创建了一个Vue实例" class="headerlink" title="new Vue 是创建了一个Vue实例;*"></a>new Vue 是创建了一个Vue实例;*</h4><p> el: ‘#app’意思是让Vue实例去接管id为’app’的div里面的内容,即为Vue实例和这个div的Dom元素做了绑定,el绑定的div为挂载  点</p><p> data : 就是vue的一些数据</p><p>直接通过双花括号的形式显示在data里的的数据</p><h4 id="Vue的常用指令"><a href="#Vue的常用指令" class="headerlink" title="Vue的常用指令"></a>Vue的常用指令</h4><p>Vue指令以v-开头，作用在HTML元素上，将指令绑定在元素上时，会给绑定的元素添加一些特殊行为，可将指令视作特殊的HTML属性</p><p> <strong>v-model</strong> 在表单元素上实现双向绑定</p><p> <strong>v-if</strong>  条件判断指令，根据表达式值的真假来插入或删除元素，表达式返回一个布尔值</p><p> <strong>v-show</strong> 条件渲染指令，与v-if不同的是，无论v-show的值为true或false，元素都会存在于HTML代码中；而只有当v-if   的值为true，元素才会存在于HTML代码中。v-show指令只是设置了元素CSS的style值</p><p><strong>v-else</strong> 可配合v-if或v-show使用，v-else指令必须紧邻v-if或v-show，否则该命令无法正常工作。v-else绑定的元素能否  渲染在HTML中，取决于前面使用的是v-if还是v-show。若前面使用的是v-if，且v-if值为true，则v-else元素不会渲染；若前面使用的是v-show，且v-show值为true，则v-else元素仍会渲染到HTML。  </p><p><strong>v-for</strong>  循环指令，基于一个数组渲染一个列表，与JavaScript遍历类似，语法如下：</p><p>​    v-for = “item in items”</p><p><strong>v-bind</strong>  给DOM绑定元素属性，语法如下：</p><p>​    v-bind:argument=”expression”</p><p>其中，argument通常是HTML元素的特性，如：<code>v-bind:  class = &quot;expression&quot;</code>。</p><p>注：v-bind指令可以缩写为:冒号。如：<code>:class=&quot;expression&quot;</code>。</p><p><strong>v-on</strong>  用于监听DOM事件，语法与v-bind类似，如监听点击事件v-on:click=”doSth”</p><p>​    注：v-on指令可以缩写为@符号。如：@click=”doSth”。 </p><p>Vue的键盘事件</p><blockquote><!--@keydown.xx,点什么键,就是按下什么键触发事件--><p><input @keydown.enter="keyEnter()">  //按下回车键即触发事件</p><p><input @keydown.a="kerA()">  //按下键盘的A键</p></blockquote><h4 id="Vue的事件冒泡"><a href="#Vue的事件冒泡" class="headerlink" title="Vue的事件冒泡"></a>Vue的事件冒泡</h4><p>  什么是事件冒泡: 在div的层层嵌套中,触发最里面的事件,会相继触发一层层的事件,即为事件冒泡</p><p>  阻止冒泡: 给事件添加@click=”show($event)”</p><blockquote><p>show: function (e) {</p><p>   alert(“this is 3”);</p><p>   e.stopPropagation(); //阻止</p><p>​                    }</p></blockquote><p>或者直接@click.stop=”show($event)”,就不用写e.stopPropagation();</p><blockquote><!--阻止事件默认方法--><button @click.prevent.stop="show()">text</button></blockquote><h4 id="methods-Vue方法"><a href="#methods-Vue方法" class="headerlink" title="methods: Vue方法"></a>methods: Vue方法</h4><blockquote><p> methods: {</p><p>  //这个是要执行的函数</p><p>   hello: function() { }</p><p>}</p></blockquote><p> methods里面放vue的方法</p><h4 id="钩子函数-mounted"><a href="#钩子函数-mounted" class="headerlink" title="钩子函数 :mounted"></a>钩子函数 :mounted</h4><p>  对于前端来说，钩子函数就是指在所有函数执行前，我先执行了的函数，即 钩住 我感兴趣的函数，只要它执行，我就先执行。</p><blockquote><p>mounted: function() {</p><p>  //这个是钩子函数 ,如果hello函数要执行，必须先执行钩子函数 </p><p>}</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要：感觉VUE挺简单的。。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="VUE" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/VUE/"/>
    
    
      <category term="VUE" scheme="http://yoursite.com/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>44VUE的安装以及创建项目过程中遇到的问题</title>
    <link href="http://yoursite.com/2020/03/15/44VUE%E7%9A%84%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2020/03/15/44VUE%E7%9A%84%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-03-15T13:28:15.000Z</published>
    <updated>2020-03-15T14:15:34.486Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：今天简单学了学VUE的安装和基本语法，记录一下遇到的问题。</p></blockquote><a id="more"></a><h4 id="安装脚手架"><a href="#安装脚手架" class="headerlink" title="安装脚手架"></a>安装脚手架</h4><p>cnpm install -g vue-cli</p><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><p>vue init webpack huaxi</p><h4 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h4><h5 id="搭建vue项目（vue-init-webpack）时报错-vue-cli-•-Failed-to-download-repo-vuejs-templates-webpack-unable-to-verifythe-first-certificate"><a href="#搭建vue项目（vue-init-webpack）时报错-vue-cli-•-Failed-to-download-repo-vuejs-templates-webpack-unable-to-verifythe-first-certificate" class="headerlink" title="搭建vue项目（vue init webpack）时报错 vue-cli • Failed to download repo vuejs-templates/webpack: unable to verifythe first certificate"></a>搭建vue项目（vue init webpack）时报错 vue-cli • Failed to download repo vuejs-templates/webpack: unable to verifythe first certificate</h5><p>其实就是网络不好，下载webpack失败</p><h4 id="解决办法就是下载webpack到本地，线下创建"><a href="#解决办法就是下载webpack到本地，线下创建" class="headerlink" title="解决办法就是下载webpack到本地，线下创建"></a>解决办法就是下载webpack到本地，线下创建</h4><ol><li><a href="https://github.com/vuejs-templates/webpack" target="_blank" rel="noopener">https://github.com/vuejs-templates/webpack</a> 下载webpack文件</li><li>在C盘找.vue-templates文件夹，如果没有就在C:\User\Administrator下创建一个.vue-templates文件夹</li><li>把下载的webpack文件解压到.vue-templates文件夹里边，重命名为webpack</li><li>在想要创建VUE项目的文件夹里打开cmd，输入vue init webpack huaxi –offline</li></ol><p>offline就是使用线下webpack创建的意思</p><h4 id="创建过程："><a href="#创建过程：" class="headerlink" title="创建过程："></a>创建过程：</h4><p><img src="/2020/03/15/44VUE的安装以及创建项目过程中遇到的问题/1.png" alt="image-20200315151532307"></p><p>Project name(项目名称)</p><p>Project description(项目介绍)</p><p>Author(作者，这里不知道怎么回事自动获取到了我的github昵称和邮箱…)</p><p>Vue build(打包方式，回车即可)</p><p>Install vue-router(是否要安装 vue-router，项目中肯定要使用到，Y 回车)</p><p>Use ESLint to lint your code（是否需要 js 语法检测，不需要，所以 n 回车)</p><p>Set up unit tests(是否安装单元测试工具，不需要，n 回车)</p><p>Setup e2e tests with Nightwatch(是否需要端到端测试工具，不需要，n回车)</p><p>Should we run <code>npm install</code> for you after the project has been created(是否需要npm install，不需要，我们使用cnpm install，选第三项回车)</p><h4 id="进入项目文件夹"><a href="#进入项目文件夹" class="headerlink" title="进入项目文件夹"></a>进入项目文件夹</h4><p>cnpm install</p><p>npm run dev</p><p>浏览器打开<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></p><p><img src="/2020/03/15/44VUE的安装以及创建项目过程中遇到的问题/2.png" alt="image-20200315152345349"></p><h5 id="npm换到淘宝源cnpm方法："><a href="#npm换到淘宝源cnpm方法：" class="headerlink" title="npm换到淘宝源cnpm方法："></a>npm换到淘宝源cnpm方法：</h5><p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要：今天简单学了学VUE的安装和基本语法，记录一下遇到的问题。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="VUE" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/VUE/"/>
    
    
      <category term="VUE" scheme="http://yoursite.com/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>43又挖了个VUE的新坑</title>
    <link href="http://yoursite.com/2020/03/14/43%E5%8F%88%E6%8C%96%E4%BA%86%E4%B8%AAVUE%E7%9A%84%E6%96%B0%E5%9D%91/"/>
    <id>http://yoursite.com/2020/03/14/43%E5%8F%88%E6%8C%96%E4%BA%86%E4%B8%AAVUE%E7%9A%84%E6%96%B0%E5%9D%91/</id>
    <published>2020-03-14T14:02:18.000Z</published>
    <updated>2020-03-14T14:28:26.121Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：这个没学完，又要学习新的。。</p></blockquote><a id="more"></a><p>今天把毕设的前端页面和手机端页面改了改，项目碰到个错误总是无法解决，很苦恼，已经快2个星期了，总是找不到原因。</p><p>然后最近总感觉时间不够用了，前几天准备面试看了一些照招聘信息，发现自己差好多，然后网上找学习资料屯在收藏夹里，今天做毕设又发现还要用到VUE，虽然说不使用VUE的话也能实现效果，但是前后端不分离总是不方便，尤其涉及到移动端的时候，还是前后端分离实现起来比较容易。</p><p>于是，又给自己挖了个新坑，VUE还是要学的，毕竟对找工作也有好处，我对前端比较感兴趣，喜欢亲手做出那种绚丽的感觉。</p><p>明天继续加油！</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要：这个没学完，又要学习新的。。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="VUE" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/VUE/"/>
    
    
      <category term="VUE" scheme="http://yoursite.com/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>找出数组中的重复数字</title>
    <link href="http://yoursite.com/2020/03/12/%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E6%95%B0%E5%AD%97/"/>
    <id>http://yoursite.com/2020/03/12/%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E6%95%B0%E5%AD%97/</id>
    <published>2020-03-12T12:50:03.000Z</published>
    <updated>2020-03-12T13:40:40.169Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p></blockquote><a id="more"></a><p><strong>思路：</strong>选定一个数组中的值为初始值，然后进行循环比较，如果数组中有相等的值，然后返回这个值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i]==nums[j])&#123;</span><br><span class="line">                    flag = nums[i];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这么做是很费时的，LeetCode上显示用时3602ms</p><p>这道题的关键点是题目中的“<strong>数组 nums 里的所有数字都在 0～n-1 的范围内</strong>”，所以数组的元素值和下标是有一定关系的，可以通过这种关系进行求解，附上大神的解法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 如果没有重复数字，那么正常排序后，数字i应该在下标为i的位置，所以思路是重头扫描数组，遇到下标为i的数字如果不是i的话，（假设为m),那么我们就拿与下标m的数字交换。在交换过程中，如果有重复的数字发生，那么终止返回ture</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">while</span> (nums[i]!=i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]==nums[nums[i]])&#123;</span><br><span class="line">                    <span class="keyword">return</span> nums[i];</span><br><span class="line">                &#125;</span><br><span class="line">                temp=nums[i];</span><br><span class="line">                nums[i]=nums[temp];</span><br><span class="line">                nums[temp]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">作者：derrick_sun</span><br><span class="line">链接：https:<span class="comment">//leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/solution/yuan-di-zhi-huan-shi-jian-kong-jian-100-by-derrick/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>Git学习笔记</title>
    <link href="http://yoursite.com/2020/03/11/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/03/11/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-03-11T06:58:10.000Z</published>
    <updated>2020-03-20T07:22:04.857Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：git是我目前用过的最顺手，最合我心意的工具。</p></blockquote><a id="more"></a><h3 id="git学习笔记"><a href="#git学习笔记" class="headerlink" title="git学习笔记"></a>git学习笔记</h3><p>windows下：<br>直接安装git，完成后设置用户名和邮箱<br>$ git config –global user.name “Your Name”<br>$ git config –global user.email “<a href="mailto:email@example.com" target="_blank" rel="noopener">email@example.com</a>“</p><p><strong>pwd ：</strong>pwd 显示当前目录<br><strong>mkdir ：</strong>创建文件夹</p><h4 id="git基本操作"><a href="#git基本操作" class="headerlink" title="git基本操作"></a>git基本操作</h4><p><strong>git init :</strong>创建空的仓库<br><strong>git add：</strong>把文件添加到git仓库（git add.后面加”.”，意思是文件夹下的所有文件）<br><strong>git commit：</strong>把文件提交到仓库(git committ -m “我的注释内容”)</p><blockquote><p>如果没有写注释 直接提交的话 会进入一个页面</p><p>输入注释，然后esc，再输入:wq点击回车就可</p></blockquote><p><strong>git status:</strong> 查看仓库当前的状态<br><strong>git diff:</strong> 查看区别<br><strong>git log:</strong> 查看最近到最炫的提交日志 （可以加上–pretty=oneline参数）<br><strong>git reset –hard HEAD^:</strong>（回到上一个版本 上两个版本是HEAD^^，上一百个版本是HEAD~100）<br>reset也可以把暂存区的修改撤销掉，重新放回工作区</p><p><strong>git reflog:</strong>（显示每一个git的reset命令）</p><p><strong>git checkout – filename:</strong>（意思是把该file在工作区的修改全部撤销，如果没有添加到暂存区，就会撤销到和版本库一样；如果添加到了暂存区，就会回到添加到暂存区后的状态）</p><p><strong>rm filename:</strong> 删除文件（在文件目录里删除）<br><strong>git rm filename:</strong> 在版本库中删除文件</p><blockquote><p>git commit -m “删除某一个文件“<br>（在版本库删除文件的时候 要先git rm 再git commit）</p></blockquote><p>如果在文件目录里删除，想要通过git恢复，就是git checkout – filename</p><h4 id="git本地库与远程库交互"><a href="#git本地库与远程库交互" class="headerlink" title="git本地库与远程库交互"></a>git本地库与远程库交互</h4><p>本地git和github（就是远程git版本库托管），之间进行传输，是通过ssh加密，所以要生成ssh key:<br>ssh-keygen -t rsa -C “emailaddress“</p><p>使用git clone进行克隆<br>git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:githubUserName/projectName.git</p><p>如果已经在本地建立了版本库，可以在github上先建立一个同名的库，然后进行关联<br>关联：<br>git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:githubUserName/projectName.git</p><p>将本地仓库的文件上传到远程仓库<br>git push -u origin master<br>如果这个命令出错，可以用：<br>git pull –rebase origin master 把新建版本库的README.md下载下来<br>（【注：pull=fetch+merge]）</p><h4 id="git分支"><a href="#git分支" class="headerlink" title="git分支"></a>git分支</h4><p>开始时候，master分支是一条线，git用master指向最新的提交，再用head指向master，<br>每次提交，master分支都会向前移动一步，这样随着不断提交，master分支的线会越来越长</p><p>新建分支时候，例如新建分支dev，git会新建一个指针，指向master相同的提交，再把head指向dev，就表示当前分支在dev上</p><p>至此，新建分支完成，从现在开始，对工作区的修改和提交都是针对dev分支，比如提交一次后，dev指针往前移动一步，而master指针不变：</p><p>当dev分支上的工作完成了，git怎么合并？直接把master指向dev的指针提交，</p><p>提交完成后，可以删除dev分支，就是把dev指针给删掉，就只剩下master分支</p><p><strong>git checkout -b dev：</strong>新建dev分支，并切换到dev分支</p><blockquote><p>git checkout命令加上-b代表创建并切换，相当于：<br>git branch dev<br>git checkout dev</p></blockquote><p>然后用：<br><strong>git branch: </strong>查看当前分支<br>之后修改文件进行添加和提交<br>git add filename<br>git commit filiename -m “注释”</p><p>假设此时dev分支的任务完成，切换回master分支：<br>git checkout master<br>这样的话，修改的filename的内容不见了，是因为master的指针的提交点没变，变的是dev的提交点<br>需要把dev分支的工作合并到master分支上：<br><strong>git merge dev</strong><br>合并完成后，可以删除dev分支<br><strong>git branch -d dev</strong><br>删除后 用git branch查看，就只剩master分支了</p><p>git checkout 分支名称 意思是切换到该分支</p><p>关于解决冲突：<br><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375840202368c74be33fbd884e71b570f2cc3c0d1dcf000" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375840202368c74be33fbd884e71b570f2cc3c0d1dcf000</a></p><p><strong>git checkout -D branchName:</strong>（强制删除该分支）</p><p><strong>git remote -v:</strong> （显示远程库的信息）</p><p><strong>git push origin branchName:</strong> 把该分支推送到远程</p><p><strong>git tag tagContent commitVersion:</strong>（在相应的commit版本中添加标签）<br><strong>git show tagName:</strong> 查看该tag的详细信息</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要：git是我目前用过的最顺手，最合我心意的工具。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>39面试总结</title>
    <link href="http://yoursite.com/2020/03/10/39%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/03/10/39%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</id>
    <published>2020-03-10T11:30:20.000Z</published>
    <updated>2020-03-12T12:30:16.174Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：面试之前紧张得要死，准备了好多相关方面的问题，结果都没用到。。</p></blockquote><a id="more"></a><p>​        今天面试了石家庄一家公司的web前端工程师，因为之前一面的时候告诉我二面是技术面试，所以我还特意准备了一下，网上找了好多前端的面试题，HTML5的新特性，CSS3如何实现一些界面效果，jQuery相关知识点，Ajax的原理以及jsonp等等等等，因为是校招嘛，还准备了之前学的课程的一些技术点特地复习了一些，线程进程，数据库三大范式之类的。结果面试当天，包括人事在内的总共四位公司领导面试，一句专业性的技术问题都没有问，都是一些简历上的东西让描述一下，感觉一腔热血付诸东流😂。</p><p>​        可能之前没有接触过面试，上个学期一直在准备考研，没有实际去了解这些东西，对于校招不是很了解，可能因为是校招，也可能因为公司不是互联网相关的，对于技术方面不像专业互联网公司那样去考核。但是我内心还是很向往互联网公司的，包括工作方式，工作内容等等，所以还是准备学学Java基础或者Python基础，去找找真正的互联网公司应聘一下，接下来几天边做毕设边准备学习一下吧。</p><p>继续加油😠</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要：面试之前紧张得要死，准备了好多相关方面的问题，结果都没用到。。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="web前端面试" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
      <category term="总结" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>38HTML基本知识</title>
    <link href="http://yoursite.com/2020/03/09/38HTML%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2020/03/09/38HTML%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</id>
    <published>2020-03-09T12:04:54.000Z</published>
    <updated>2020-03-12T11:28:57.560Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：web前端面试HTML篇。</p></blockquote><a id="more"></a><ol><li>你是如何理解HTML语义化的？</li></ol><ul><li>比较简单的回答：我理解的语义化就是 标签用在合适的位置，比如段落要用<code>p</code>标签，标题要用<code>h1-h6</code>标签.</li><li>更细点的回答：我理解的HTML语义化是正确的标签做正确的事情，能够便于开发者阅读和写出更优雅的代码的同时，让网络爬虫更好的解析。</li></ul><ol start="2"><li>为什么要做到语义化？</li></ol><ul><li>有利于SEO，有利于搜索引擎爬虫更好的解析我们的页面，从而获取更多的有效信息，提升网页的权重。</li><li>在没有CSS的时候，能够清晰看出网页的结构，增强可读性。</li><li>便于团队合作开发和维护，提高开发效率</li></ul><ol start="3"><li><p>\&lt;!DOCTYPE> 文档声明，它不是HTML标签，是一个指示web浏览关于页面使用哪个HTML版本编写的指令。&lt;!DOCTYPE&gt; 声明必须位于文档的第一行，位于<html>标签之前。</html></p></li><li><p>\&lt;html lang=’en’>lang属性设定文档语言。</p><p>作用：SEO搜索引擎优化;有助于阅读障碍人士，通过读屏器阅读页面，还可以是\&lt;html lang=’zh-CN’></p></li><li><p>meta标签的几种用法。</p></li></ol><ul><li>meta指定文档编码</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这行代码的意思是，文档用UTF-8编码的，浏览器解析的时候用UTF-8编码解析。</span></span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>适配移动页面</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span>  <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>添加页面描述</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"腾讯网(www.qq.com)是中国最浏览量最大的门户网站"</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>HTML5标签。</li></ol><blockquote><p>内容性的标签:</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>          网页的头部</span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span>                网页的导航</span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span>          标签定义文档中的节(比如章节、页眉、页脚或文档中的其他部分。)</span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span>            标签的内容独立于文档的其余部分。比如外部的一篇文章，一个博客，论文等。</span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span>              网页侧边栏</span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>            网页的页脚</span><br></pre></td></tr></table></figure><blockquote><p>功能性的标签</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span>&gt;</span>  通过脚本绘制图像</span><br><span class="line"><span class="tag">&lt;<span class="name">Audio</span>&gt;</span>    播放音频</span><br><span class="line"><span class="tag">&lt;<span class="name">Video</span>&gt;</span>    播放视频</span><br></pre></td></tr></table></figure><ol start="7"><li>什么是H5？<br> H5是中国人制造的一个专有名词。实际上是指移动端页面，从某种意义上来说它是 HTML5，微信网页，移动PPT的母级。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要：web前端面试HTML篇。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="web前端面试" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
      <category term="HTML" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/HTML/"/>
    
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>37jQuery基本知识</title>
    <link href="http://yoursite.com/2020/03/08/37jQuery%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2020/03/08/37jQuery%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</id>
    <published>2020-03-08T11:05:17.000Z</published>
    <updated>2020-03-08T11:07:12.342Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>web前端面试jQuery篇。</p></blockquote><a id="more"></a><h4 id="jQuery库中的-是什么："><a href="#jQuery库中的-是什么：" class="headerlink" title="jQuery库中的$()是什么："></a>jQuery库中的$()是什么：</h4><p>$()时jQuery()函数的别称，$()函数可以把任何对象包裹成jQuery对象，然后就可以调用定义在jQuery对象上的多个不同方法。还可以把选择器字符串传入$()函数，它会返回一个匹配所有DOM元素数组的jQuery对象。</p><h4 id="如何用jQuery选择网页上的5个-lt-div-元素"><a href="#如何用jQuery选择网页上的5个-lt-div-元素" class="headerlink" title="如何用jQuery选择网页上的5个\&lt;div>元素"></a>如何用jQuery选择网页上的5个\&lt;div>元素</h4><p>如果网页上只有5个\&lt;div>的话，可以直接使用标签选择器进行选择，$(“div”)</p><p>如果网页上的\&lt;div>超过5个的话，使用ID选择器或者class选择器进行选择。</p><h4 id="jQuery里的ID选择器和class选择器有什么不同"><a href="#jQuery里的ID选择器和class选择器有什么不同" class="headerlink" title="jQuery里的ID选择器和class选择器有什么不同"></a>jQuery里的ID选择器和class选择器有什么不同</h4><p>ID选择器：$(‘#id_name’)</p><p>class选择器：$(‘.class_name’)</p><h4 id="点击一个按钮时使用jQuery隐藏一个图片"><a href="#点击一个按钮时使用jQuery隐藏一个图片" class="headerlink" title="点击一个按钮时使用jQuery隐藏一个图片"></a>点击一个按钮时使用jQuery隐藏一个图片</h4><p>使用ID或者class定位到图片，然后使用hide()方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#button'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">'iamge'</span>).hide();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="document-ready-是个什么函数？为什么要用它？"><a href="#document-ready-是个什么函数？为什么要用它？" class="headerlink" title="$(document).ready() 是个什么函数？为什么要用它？"></a>$(document).ready() 是个什么函数？为什么要用它？</h4><p>ready() 函数用于在文档进入ready状态时执行代码。当DOM 完全加载（例如HTML被完全解析DOM树构建完成时），jQuery允许你执行代码。使用$(document).ready()的最大好处在于它适用于所有浏览器，jQuery帮你解决了跨浏览器的难题。需要进一步了解的用户可以点击 answer链接查看详细讨论。</p><h4 id="this-和-this-关键字在-jQuery-中有何不同"><a href="#this-和-this-关键字在-jQuery-中有何不同" class="headerlink" title="$(this) 和 this 关键字在 jQuery 中有何不同"></a>$(this) 和 this 关键字在 jQuery 中有何不同</h4><p>$(this) 返回一个 jQuery 对象，你可以对它调用多个 jQuery 方法，比如用 text() 获取文本，用val() 获取值等等。而 this 代表当前元素，它是 JavaScript 关键词中的一个，表示上下文中的当前 DOM 元素。你不能对它调用 jQuery 方法，直到它被 $() 函数包裹，例如 $(this)。</p><h4 id="使用jQuery来提取一个HTML-标记的属性-例如-链接的href"><a href="#使用jQuery来提取一个HTML-标记的属性-例如-链接的href" class="headerlink" title="使用jQuery来提取一个HTML 标记的属性 例如. 链接的href"></a>使用jQuery来提取一个HTML 标记的属性 例如. 链接的href</h4><p>attr() 方法被用来提取任意一个HTML元素的一个属性的值. 你首先需要利用jQuery选择及选取到所有的链接或者一个特定的链接，然后你可以应用attr()方法来获得他们的href属性的值。下面的代码会找到页面中所有的链接并返回href值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;a&apos;).each(function()&#123;</span><br><span class="line">   alert($(this).attr(&apos;href&apos;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="jquery中attr和prop的区别"><a href="#jquery中attr和prop的区别" class="headerlink" title="jquery中attr和prop的区别"></a>jquery中attr和prop的区别</h4><p> 对于html元素本身就带有的固定属性（本身就带有的属性），在处理时，使用prop方法 可以操作布尔类型的属性</p><p>对于html元素我们自己定义的dom属性，在处理时，使用attr方法  不可以操作布尔类型的属性</p><h4 id="jQuery中-detach-和-remove-方法的区别是什么"><a href="#jQuery中-detach-和-remove-方法的区别是什么" class="headerlink" title="jQuery中 detach() 和 remove() 方法的区别是什么"></a>jQuery中 detach() 和 remove() 方法的区别是什么</h4><p>detach() 和 remove() 方法都被用来移除一个DOM元素, 两者之间的主要不同在于 detach() 会保持对过去被解除元素的跟踪, 因此它可以被取消解除, 而 remove() 方法则会保持过去被移除对象的引用。</p><h4 id="利用jQuery来向一个元素中添加和移除CSS类"><a href="#利用jQuery来向一个元素中添加和移除CSS类" class="headerlink" title="利用jQuery来向一个元素中添加和移除CSS类"></a>利用jQuery来向一个元素中添加和移除CSS类</h4><p> .addClass(“类名”)添加元素   .removeClass() 删除样式类  </p><h4 id="使用-CDN-加载-jQuery-库的主要优势"><a href="#使用-CDN-加载-jQuery-库的主要优势" class="headerlink" title="使用 CDN 加载 jQuery 库的主要优势"></a>使用 CDN 加载 jQuery 库的主要优势</h4><p>除了报错节省服务器带宽以及更快的下载速度这许多的好处之外, 最重要的是，如果浏览器已经从同一个CDN下载类相同的 jQuery 版本, 那么它就不会再去下载它一次. 因此今时今日，许多公共的网站都将jQuery用于用户交互和动画, 如果浏览器已经有了下载好的jQuery库，网站就能有非常好的展示机会。</p><h4 id="jQuery-get-和-jQuery-ajax-方法之间的区别"><a href="#jQuery-get-和-jQuery-ajax-方法之间的区别" class="headerlink" title="jQuery.get() 和 jQuery.ajax() 方法之间的区别"></a>jQuery.get() 和 jQuery.ajax() 方法之间的区别</h4><p>ajax() 方法更强大，更具可配置性, 让你可以指定等待多久，以及如何处理错误。get() 方法是一个只获取一些数据的专门化方法。</p><h4 id="jQuery-中的方法链是什么？使用方法链有什么好处"><a href="#jQuery-中的方法链是什么？使用方法链有什么好处" class="headerlink" title="jQuery 中的方法链是什么？使用方法链有什么好处?"></a>jQuery 中的方法链是什么？使用方法链有什么好处?</h4><p>方法链是对一个方法返回的结果调用另一个方法，这使得代码简洁明了，同时由于只对 DOM 进行了一轮查找，性能方面更加出色。</p><h4 id="哪种方式更高效：document-getElementbyId-“myId”-还是-“-myId”-？"><a href="#哪种方式更高效：document-getElementbyId-“myId”-还是-“-myId”-？" class="headerlink" title="哪种方式更高效：document.getElementbyId(“myId”) 还是 $(“#myId”)？"></a>哪种方式更高效：document.getElementbyId(“myId”) 还是 $(“#myId”)？</h4><p>第一种，因为它直接调用了 JavaScript 引擎。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;web前端面试jQuery篇。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="web前端面试" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
      <category term="jQuery" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/jQuery/"/>
    
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>36CSS相关知识</title>
    <link href="http://yoursite.com/2020/03/07/36CSS%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2020/03/07/36CSS%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</id>
    <published>2020-03-07T13:38:35.000Z</published>
    <updated>2020-03-07T13:41:29.191Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：web前端面试CSS篇</p></blockquote><a id="more"></a><ol><li><h5 id="CSS-盒子模型，绝对定位和相对定位"><a href="#CSS-盒子模型，绝对定位和相对定位" class="headerlink" title="CSS 盒子模型，绝对定位和相对定位"></a>CSS 盒子模型，绝对定位和相对定位</h5><p><strong>盒子模型</strong>也叫框模型，它规定了元素框处理元素内容、内边距、边框 和 外边距 的方式。在HTML文档中，每个元素都有盒子模型。</p><p>CSS盒子模型包含了内容（content）、内边距（padding）、边框（border）、外边距（margin）、宽度（width）、高度（height）几个要素，如图（图为标准盒子模型）</p><p><strong>绝对定位（absolute）的概念</strong>：如果设置它的偏移量，将会影响其他元素的位置。设置绝对定位时，元素会相对于离自己最近的设置了绝对定位的父元素进行定位。</p><p><strong>相对定位（relative）的概念</strong>：通过设置可使边框“相对于”它的起点移动，不影响其他元素的位置，依旧占据着原来的空间。</p></li><li><h5 id="清除浮动，什么时候需要清除浮动，清除浮动都有哪些方法"><a href="#清除浮动，什么时候需要清除浮动，清除浮动都有哪些方法" class="headerlink" title="清除浮动，什么时候需要清除浮动，清除浮动都有哪些方法"></a>清除浮动，什么时候需要清除浮动，清除浮动都有哪些方法</h5><p>浮动float最开始出现的意义是为了让文字环绕图片而已，后来用于让三个块级元素并排展示，这时候就出现了浮动</p><p>不过，由于float会导致浮动元素的父元素高度坍塌，所以，这时候就要去清除浮动。</p><p><strong>清除浮动的方式：</strong><br>解决这种问题的方式主要有两种：</p><ol><li><p>在父元素内添加冗余元素clear:both;</p><p>Clear属性存在的值有left,right,both,none,inherit.<br>如果是left,则表示在左侧不允许出现浮动元素，意思就是对父元素中左边的子元素起作用。</p></li><li><p>在父元素中设置属性overflow:hidden||auto</p><p>增加后，父元素会形成一个块级格式化上下文，即BFC，overflow: hidden本意是将父元素中溢出的内容裁切掉，而BFC中，在计算父元素真实高度时候，也把float元素的高度算入其中，所以在计算裁切的同时，顺带达成了清除浮动的目的。</p><p>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然。<br>计算BFC的高度时，浮动元素也参与计算。</p></li></ol></li><li><p>如何保持浮层水平垂直居中</p><p>利用flexbox</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">　<span class="attribute">justify-content</span>:center;</span><br><span class="line">　<span class="attribute">align-items</span>:center;</span><br><span class="line">　<span class="attribute">display</span>: -webkit-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>position 和 display 的取值和各自的意思和用法</p><ul><li><p>position属性取值：static(默认)、relative、absolute、fixed、inherit。</p><ul><li>static；始终处于文档流给予的位置。看起来好像没有用，但它可以快速取消定位，让top，right，bottom，left的值失效。在切换的时候可以尝试这个方法。</li><li>除了static值，在其他三个值的设置下，z-index才会起作用。（确切地说z-index只在定位元素上有效）</li><li>relative和absolute都可以用于定位，区别在于前者的div还属于正常的文档流，后者已经是脱离了正常文档流，不占据空间位置，不会将父类撑开。定位原点relative是相对于它在正常流中的默认位置偏移，它原本占据的空间任然保留；absolute相对于第一个position属性值不为static的父类。所以设置了position：absolute，其父类的该属性值要注意，而且overflow：hidden也不能乱设置，因为不属于正常文档流，不会占据父类的高度，也就不会有滚动条。</li><li>fixed 旧版本IE不支持，定位原点相对于浏览器窗口，而且不能变。常用于header，footer，或者一些固定的悬浮div，随滚动条滚动又稳定又流畅，比JS好多了。fixed可以有很多创造性的布局和作用，兼容性是问题。</li><li>inherit。规定从父类继承position属性的值。但是任何版本的IE都不支持该属性值。</li></ul></li><li><p>display属性取值：none、inline、inline-block、block、flex、inherit。</p><ul><li>display属性规定元素应该生成的框的类型。文档内任何元素都是框，块框或行内框。</li><li>none和visiability：hidden都可以隐藏div，区别有点像absolute和relative，前者不占据文档的空间，后者还是占据文档的位置。</li><li>inline和block，又叫行内元素和块级元素。表现出来的区别就是block独占一行，在浏览器中通常垂直布局，可以用margin来控制块级元素之间的间距；而inline以水平方式布局，垂直方向的margin和padding都是无效的，大小跟内容一样，且无法设置宽高。inline就像塑料袋，内容怎么样，就长得怎么样；block就像盒子，有固定的宽和高。</li><li>inline-block就介于两者之间。</li><li>flex 意为”弹性盒布局模型”，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为flex布局。设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。采用flex布局的元素，称为flex容器。它的所有子元素自动成为容器成员，称为flex项目（flex item）。</li></ul></li></ul></li><li><p>样式的层级关系，选择器优先级，样式冲突，以及抽离样式模块怎么写，说出思路，有无实践经验</p><p><strong>样式的层级关系：</strong>一个是权重，另一个就是共用样式和私用样式了，比如说两个ul，它们的子元素除了背景色之外都一样，那可以直接用li {}来定义相同的公用样式，用 .ul_1 li {} ， .ul_2 li {} 来定义不相同的样式。可以根据元素之间的差别来选择用哪种方法。推荐用多层级的方式书写css选择器。</p><p><strong>选择器优先级：</strong>（!important&gt;）id选择器&gt;class选择器（属性选择器/伪类选择器）&gt;标签选择器（伪元素选择器） 同类选择符条件下层级越多的优先级越高。优先级就近原则，同权重情况下样式定义最近者为准。载入样式以最后载入的定位为准。</p><p><strong>样式冲突：</strong>  如果同个元素有两个或以上冲突的CSS规则，浏览器有一些基本的规则来决定哪一个非常特殊而胜出。  选择器一样的情况下后面的会覆盖前面的属性。</p><p><strong>抽离样式模块：</strong>因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异。当然，初始化样式会对SEO有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化。</p></li><li><p>css3动画效果属性，canvas、svg的区别，CSS3中新增伪类举例</p></li><li><p>px和em和rem的区别，CSS中link 和@import的区别是?</p></li><li><p>了解过flex吗?</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要：web前端面试CSS篇&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="web前端面试" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
      <category term="CSS" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/CSS/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>35Python3使用支付宝接口</title>
    <link href="http://yoursite.com/2020/03/06/35Python3%E4%BD%BF%E7%94%A8%E6%94%AF%E4%BB%98%E5%AE%9D%E6%8E%A5%E5%8F%A3/"/>
    <id>http://yoursite.com/2020/03/06/35Python3%E4%BD%BF%E7%94%A8%E6%94%AF%E4%BB%98%E5%AE%9D%E6%8E%A5%E5%8F%A3/</id>
    <published>2020-03-06T12:37:37.000Z</published>
    <updated>2020-03-06T12:54:57.718Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：因为官方没有提供Python的SDK，所以我采用了github上一个开源的第三方SDK。</p></blockquote><a id="more"></a><p><strong>python-alipay-sdk:</strong> <a href="https://github.com/fzlee/alipay" target="_blank" rel="noopener">https://github.com/fzlee/alipay</a></p><p><strong>python3使用python-alipay-sdk对接支付宝的时候，可能会出现以下error</strong><br><strong>不支持RSA密钥格式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">alipay = AliPay(</span><br><span class="line">    appid=<span class="string">"2016101900723846"</span>,</span><br><span class="line">    app_notify_url=<span class="literal">None</span>,  <span class="comment"># 默认回调url</span></span><br><span class="line">    app_private_key_string=os.path.join(settings.BASE_DIR, <span class="string">'apps/order/app_private_key.pem'</span>),</span><br><span class="line">    <span class="comment"># 支付宝的公钥，验证支付宝回传消息使用，不是你自己的公钥,</span></span><br><span class="line">    alipay_public_key_string=os.path.join(settings.BASE_DIR, <span class="string">'apps/order/alipay_public_key.pem'</span>),</span><br><span class="line">    sign_type=<span class="string">"RSA2"</span>,  <span class="comment"># RSA 或者 RSA2</span></span><br><span class="line">    debug = <span class="literal">True</span>  <span class="comment"># 默认False</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>运行时出现错误：<strong>ValueError：RSA key format is not supported</strong></p><p><strong>解决办法:<br>把公钥和私钥的内容先读出来，然后再用读出来的内容去创建Alipay对象</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">app_private_key_string = open(os.path.join(settings.BASE_DIR, <span class="string">'apps/order/app_private_key.pem'</span>)).read()</span><br><span class="line">alipay_public_key_string = open(os.path.join(settings.BASE_DIR, <span class="string">'apps/order/alipay_public_key.pem'</span>)).read()</span><br><span class="line">        </span><br><span class="line">alipay = AliPay(</span><br><span class="line">    appid=<span class="string">"2016101900723846"</span>,</span><br><span class="line">    app_notify_url=<span class="literal">None</span>,  <span class="comment"># 默认回调url</span></span><br><span class="line">    app_private_key_string=app_private_key_string,</span><br><span class="line">    <span class="comment"># 支付宝的公钥，验证支付宝回传消息使用，不是你自己的公钥,</span></span><br><span class="line">    alipay_public_key_string=alipay_public_key_string,</span><br><span class="line">    sign_type=<span class="string">"RSA2"</span>,  <span class="comment"># RSA 或者 RSA2</span></span><br><span class="line">    debug = <span class="literal">True</span>  <span class="comment"># 默认False</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>本来想投机取巧一下，其实按照作者给的文档即可完美运行。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要：因为官方没有提供Python的SDK，所以我采用了github上一个开源的第三方SDK。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="问题总结" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>34python-alipay的SDK应用</title>
    <link href="http://yoursite.com/2020/03/05/34python-alipay%E7%9A%84SDK%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2020/03/05/34python-alipay%E7%9A%84SDK%E5%BA%94%E7%94%A8/</id>
    <published>2020-03-05T13:41:19.000Z</published>
    <updated>2020-03-05T13:41:19.549Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>33使用uwsgi作为服务器</title>
    <link href="http://yoursite.com/2020/03/04/33%E4%BD%BF%E7%94%A8uwsgi%E4%BD%9C%E4%B8%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yoursite.com/2020/03/04/33%E4%BD%BF%E7%94%A8uwsgi%E4%BD%9C%E4%B8%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2020-03-04T12:56:58.000Z</published>
    <updated>2020-03-04T13:15:04.272Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：Django自带的只是用于调试的服务器，要部署到云服务器上还是要用第三方的服务器。</p></blockquote><a id="more"></a><h4 id="uwsgi的安装"><a href="#uwsgi的安装" class="headerlink" title="uwsgi的安装"></a>uwsgi的安装</h4><p>切换到虚拟环境中，然后安装:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -c conda-forge uwsgi</span><br></pre></td></tr></table></figure><h4 id="uwsgi的配置"><a href="#uwsgi的配置" class="headerlink" title="uwsgi的配置"></a>uwsgi的配置</h4><p>修改项目settings.py文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DEBUG = FALSE</span><br><span class="line">ALLOWED_HOSTS = [&apos;*&apos;]</span><br></pre></td></tr></table></figure><p>项目中建立一个uwsgi.ini文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"># 使用nginx连接时使用</span><br><span class="line"># socket=127.0.0.1:8080</span><br><span class="line"># 直接做web服务器使用 python manage.py runserver</span><br><span class="line">http=127.0.0.1:8080</span><br><span class="line"># 项目目录</span><br><span class="line">chdir=/home/worksapce/DH_HX</span><br><span class="line"># 项目中的wsgi.py文件的目录, 相当于项目目录, 里面有项目的入口</span><br><span class="line">wsgi-file=DH_HX/wsgi.py</span><br><span class="line"># 指定启动的工作进程数</span><br><span class="line">processes=4</span><br><span class="line"># 指定工作进程中的线程数</span><br><span class="line">threads=2</span><br><span class="line">master=True</span><br><span class="line"># 保存启动之后主进程的pid</span><br><span class="line">pidfile=uwsgi.pid</span><br><span class="line"># 设置uwsgi后台运行,uwsgi.log保存日志信息</span><br><span class="line">daemonize=uwsgi.log</span><br><span class="line"># 设置虚拟环境的路径</span><br><span class="line">virtualenv=/usr/local/anaconda/envs/DjangoTest</span><br></pre></td></tr></table></figure><h4 id="启动uwsgi"><a href="#启动uwsgi" class="headerlink" title="启动uwsgi"></a>启动uwsgi</h4><p>启动：uwsgi –ini 配置文件路径 例如：uwsgi –ini uwsgi.ini<br>停止：uwsgi –stop uwsgi.pid 路径 例如：uwsgi –stop uwsgi.pid</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要：Django自带的只是用于调试的服务器，要部署到云服务器上还是要用第三方的服务器。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Django2.0" scheme="http://yoursite.com/tags/Django2-0/"/>
    
  </entry>
  
  <entry>
    <title>32使用xadmin替换Django的admin</title>
    <link href="http://yoursite.com/2020/03/03/32%E4%BD%BF%E7%94%A8xadmin%E6%9B%BF%E6%8D%A2Django%E7%9A%84admin/"/>
    <id>http://yoursite.com/2020/03/03/32%E4%BD%BF%E7%94%A8xadmin%E6%9B%BF%E6%8D%A2Django%E7%9A%84admin/</id>
    <published>2020-03-03T13:16:41.000Z</published>
    <updated>2020-03-04T13:31:30.886Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：Django自带有admin后台，但是其风格并不漂亮、功能也不是让人很满意。 所以从网上找了xadmin用来替换。</p></blockquote><a id="more"></a><h4 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h4><p>项目github地址为<a href="https://github.com/sshwsfc/xadmin，其中的xadmin文件夹是源码文件夹。" target="_blank" rel="noopener">https://github.com/sshwsfc/xadmin，其中的xadmin文件夹是源码文件夹。</a></p><h4 id="放置文件夹"><a href="#放置文件夹" class="headerlink" title="放置文件夹"></a>放置文件夹</h4><p>把xadmin文件夹放置在项目文件夹下面的，和templates同一级目录即可。</p><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">NSTALLED_APPS = [</span><br><span class="line">    &apos;django.contrib.admin&apos;,</span><br><span class="line">    &apos;django.contrib.auth&apos;,</span><br><span class="line">    &apos;django.contrib.contenttypes&apos;,</span><br><span class="line">    &apos;django.contrib.sessions&apos;,</span><br><span class="line">    &apos;django.contrib.messages&apos;,</span><br><span class="line">    &apos;django.contrib.staticfiles&apos;,</span><br><span class="line">    &apos;xadmin&apos;,#添加</span><br><span class="line">    &apos;crispy_forms&apos;,#添加</span><br><span class="line">    &apos;reversion&apos;,#添加(可选)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="修改主路由"><a href="#修改主路由" class="headerlink" title="修改主路由"></a>修改主路由</h4><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">from django.conf.urls import url,include</span></span><br><span class="line"></span><br><span class="line"><span class="xml"># from django.contrib import admin 注释admin</span></span><br><span class="line"></span><br><span class="line"><span class="xml">#以下四句为新添加内容</span></span><br><span class="line"></span><br><span class="line"><span class="xml">import xadmin </span></span><br><span class="line"><span class="xml">xadmin.autodiscover()</span></span><br><span class="line"></span><br><span class="line"><span class="xml">from xadmin.plugins import xversion</span></span><br><span class="line"><span class="xml">xversion.register_models()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">urlpatterns = [</span></span><br><span class="line"><span class="xml">  # url(r'^admin/', admin.site.urls),注释原路由</span></span><br><span class="line"><span class="xml">  url(r'^xadmin/',include(xadmin.site.urls)), #添加新路由</span></span><br><span class="line"><span class="xml">]</span></span><br></pre></td></tr></table></figure><h4 id="在应用中新建adminx-py文件"><a href="#在应用中新建adminx-py文件" class="headerlink" title="在应用中新建adminx.py文件"></a>在应用中新建adminx.py文件</h4><p>文件必须命名为这个名字，用于替换原有的admin文件，以后admin中的操作放到adminx中即可。</p><p>到此就可以了，xadmin还是非常方便好用，界面看起来也很舒适。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要：Django自带有admin后台，但是其风格并不漂亮、功能也不是让人很满意。 所以从网上找了xadmin用来替换。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Django2.0" scheme="http://yoursite.com/tags/Django2-0/"/>
    
  </entry>
  
  <entry>
    <title>31关于毕设的一些思考</title>
    <link href="http://yoursite.com/2020/03/02/31%E5%85%B3%E4%BA%8E%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    <id>http://yoursite.com/2020/03/02/31%E5%85%B3%E4%BA%8E%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</id>
    <published>2020-03-02T13:02:15.000Z</published>
    <updated>2020-03-02T13:46:58.002Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：随着毕业设计的深入，对项目也积累了一些认识，虽然在开发的路上还刚刚起步，但是这几天静下心来敲代码感觉还是爱上了这种产品在手中一步步成型的感觉。</p></blockquote><a id="more"></a><h4 id="做好自己的选择"><a href="#做好自己的选择" class="headerlink" title="做好自己的选择"></a>做好自己的选择</h4><p>程序世界里面可以选择的技术千千万万，每年的新技术也不停的出现，因此做技术注定是学习无止境的，提前选好自己的技术路线是一个首要性的问题，然后逐渐往深挖掘，往广拓展，这要比浅尝辄止重要得多。</p><h4 id="做项目应该求快还是应该求好"><a href="#做项目应该求快还是应该求好" class="headerlink" title="做项目应该求快还是应该求好"></a>做项目应该求快还是应该求好</h4><p>从某种目的出发，如果是老师或者课程要求的话，我认为应该注重功能，把更多的精力放到功能实现上去，如果时间富裕，可以充分向外拓展，使用更高级的技术，或者往深挖掘，探索更优的策略，优化项目。</p><p>如果是自己做项目，我觉得还是尽量打磨得更加精美比较好，让体验更加好一些，可以尝试研究一些技术之外的东西运用在项目里面，比如项目中如何贴近用户习惯，用户心理等等。</p><h4 id="规划自我发展路线"><a href="#规划自我发展路线" class="headerlink" title="规划自我发展路线"></a>规划自我发展路线</h4><p>及早去探索发现自己的发展路线，很多涉及到自身的发展问题不要抱着“水到渠成”，“车到山前必有路”这样的想法，时间越长，我越发现路是自己探索出来的，有时候也许发现是错的，但是总比停在原地要好，时常抬抬头看看前面的路可以更好的走好脚下的路。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要：随着毕业设计的深入，对项目也积累了一些认识，虽然在开发的路上还刚刚起步，但是这几天静下心来敲代码感觉还是爱上了这种产品在手中一步步成型的感觉。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="问题总结" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>30使用haystack进行全文检索</title>
    <link href="http://yoursite.com/2020/03/01/30%E4%BD%BF%E7%94%A8haystack%E8%BF%9B%E8%A1%8C%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2/"/>
    <id>http://yoursite.com/2020/03/01/30%E4%BD%BF%E7%94%A8haystack%E8%BF%9B%E8%A1%8C%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2/</id>
    <published>2020-03-01T10:59:33.000Z</published>
    <updated>2020-03-01T11:28:07.769Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：搜索功能升级，使用haystack进行全文搜索。</p></blockquote><a id="more"></a><h4 id="Haystack介绍以及安装"><a href="#Haystack介绍以及安装" class="headerlink" title="Haystack介绍以及安装"></a>Haystack介绍以及安装</h4><p>全文检索不同于特定字段的模糊查询，使用全文检索的效率更高，并且能够对于中文进行分词处理。</p><ul><li>haystack：全文检索的框架，支持whoosh、solr、Xapian、Elasticsearc四种全文检索引擎，<a href="http://haystacksearch.org/" target="_blank" rel="noopener">官方网站</a></li><li>whoosh：纯Python编写的全文搜索引擎，虽然性能比不上sphinx、xapian、Elasticsearc等，但是无二进制包，程序不会莫名其妙的崩溃，对于小型的站点，whoosh已经足够使用，<a href="https://whoosh.readthedocs.io/en/latest/" target="_blank" rel="noopener">whoosh文档</a></li><li>jieba：中文分词包，用于语句拆分。</li></ul><p>1）在虚拟环境中依次安装需要的包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install django-haystack</span><br><span class="line">pip install whoosh</span><br><span class="line">pip install jieba</span><br></pre></td></tr></table></figure><p>2）修改项目settings.py文件，安装应用haystack。</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">INSTALLED_APPS = (</span></span><br><span class="line"><span class="xml">    'haystack',</span></span><br><span class="line"><span class="xml">)</span></span><br></pre></td></tr></table></figure><p>3）在test6/settings.py文件中配置搜索引擎。</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">...</span></span><br><span class="line"><span class="xml">HAYSTACK_CONNECTIONS = &#123;</span></span><br><span class="line"><span class="xml">    'default': &#123;</span></span><br><span class="line"><span class="xml">        #使用whoosh引擎</span></span><br><span class="line"><span class="xml">        'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',</span></span><br><span class="line"><span class="xml">        #索引文件路径</span></span><br><span class="line"><span class="xml">        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">#当添加、修改、删除数据时，自动生成索引</span></span><br><span class="line"><span class="xml">HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'</span></span><br></pre></td></tr></table></figure><p>4）在项目urls.py中添加搜索的配置。</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">path('search/', include('haystack.urls')),</span></span><br></pre></td></tr></table></figure><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><p>1）在需要索引的应用目录下创建search_indexes.py文件，比如我要索引商品，就在goods目录下新建search_indexes.py文件，注意文件名很重要，不能修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> haystack <span class="keyword">import</span> indexes</span><br><span class="line"><span class="keyword">from</span> goods.models <span class="keyword">import</span> GoodsSKU</span><br><span class="line"><span class="comment">#指定对于某个类的某些数据建立索引</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsSKUIndex</span><span class="params">(indexes.SearchIndex, indexes.Indexable)</span>:</span></span><br><span class="line">    text = indexes.CharField(document=<span class="literal">True</span>, use_template=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_model</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> GoodsSKU</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index_queryset</span><span class="params">(self, using=None)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.get_model().objects.all()</span><br></pre></td></tr></table></figure><p>2）在templates目录下创建”search/indexes/goods/“目录。</p><p><img src="/2020/03/01/30使用haystack进行全文检索/1.png" alt="image-20200301191212079"></p><p>3）在上面的目录中创建”goodssku_text.txt”文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 指定根据表中的哪些字段建立索引</span><br><span class="line">&#123;&#123; object.name &#125;&#125;# 商品名称</span><br><span class="line">&#123;&#123; object.desc &#125;&#125;# 商品简介</span><br><span class="line">&#123;&#123; object.goods.detail &#125;&#125;# 商品详情</span><br></pre></td></tr></table></figure><p>4）找到虚拟环境下的haystack目录,我的项目环境是Anaconda创建的DjangoTest环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\ProgramFiles\Anaconda\envs\DjangoTest\Lib\site-packages\haystack\backends</span><br></pre></td></tr></table></figure><p>5）在上面的目录中创建ChineseAnalyzer.py文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">from</span> whoosh.analysis <span class="keyword">import</span> Tokenizer, Token</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChineseTokenizer</span><span class="params">(Tokenizer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, value, positions=False, chars=False,keeporiginal=False,removestops=True,start_pos=<span class="number">0</span>, start_char=<span class="number">0</span>, mode=<span class="string">''</span>, **kwargs)</span>:</span></span><br><span class="line">        t=Token(positions,chars,removestops=removestops, mode=mode,**kwargs)</span><br><span class="line">        seglist = jieba.cut(value, cut_all=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> seglist:</span><br><span class="line">            t.original = t.text = w</span><br><span class="line">            t.boost = <span class="number">1.0</span></span><br><span class="line">            <span class="keyword">if</span> positions:</span><br><span class="line">                t.pos = start_pos + value.find(w)</span><br><span class="line">            <span class="keyword">if</span> chars:</span><br><span class="line">                t.startchar = start_char + value.find(w)</span><br><span class="line">                t.endchar = start_char + value.find(w) + len(w)</span><br><span class="line">             <span class="keyword">yield</span> t</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ChineseAnalyzer</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> ChineseTokenizer()</span><br></pre></td></tr></table></figure><p>6）复制whoosh_backend.py文件，改为如下名称：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whoosh_cn_backend.py</span><br></pre></td></tr></table></figure><p>7）打开复制出来的新文件，引入中文分析类，内部采用jieba分词。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .ChineseAnalyzer <span class="keyword">import</span> ChineseAnalyzer</span><br></pre></td></tr></table></figure><p>8）更改词语分析类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查找</span><br><span class="line">analyzer=StemmingAnalyzer()</span><br><span class="line">改为</span><br><span class="line">analyzer=ChineseAnalyzer()</span><br></pre></td></tr></table></figure><p>9）初始化索引数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py rebuild_index</span><br></pre></td></tr></table></figure><p>初始化之后项目目录中会自动生成whoosh_index目录，目录里是whoosh的索引结构.</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>按照配置，在admin管理中添加数据后，会自动为数据创建索引，可以直接进行搜索，可以先创建一些测试数据。</p><p>1）在goods/views.py中定义视图query。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'goods/query.html'</span>)</span><br></pre></td></tr></table></figure><p>2）在goods/urls.py中配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(&apos;query/&apos;, views.query),</span><br></pre></td></tr></table></figure><p>3）在templates/目录中创建模板query.html。</p><blockquote><p>参数q表示搜索内容，传递到模板中的数据为query。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>全文检索<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">'get'</span> <span class="attr">action</span>=<span class="string">"/search/"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"q"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"查询"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4）自定义搜索结果模板：在templates/search/目录下创建search.html。</p><p>搜索结果进行分页，视图向模板中传递的上下文如下：</p><ul><li>query：搜索关键字</li><li>page：当前页的page对象</li><li>paginator：分页paginator对象</li></ul><p>视图接收的参数如下：</p><ul><li>参数q表示搜索内容，传递到模板中的数据为query</li><li>参数page表示当前页码</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>全文检索--结果页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>搜索<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span></span><span class="template-variable">&#123;&#123;query&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="symbol">&amp;nbsp;</span>结果如下：<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;%<span class="name"><span class="name">for</span></span> item <span class="keyword">in</span> page%&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.object.id&#125;&#125;</span><span class="xml">--</span><span class="template-variable">&#123;&#123;item.object.gcontent|<span class="name">safe</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;%<span class="name"><span class="name">empty</span></span>%&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>啥也没找到<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;%<span class="name"><span class="name">endfor</span></span>%&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;%<span class="name"><span class="name">for</span></span> pindex <span class="keyword">in</span> page.paginator.page_range%&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;%<span class="name"><span class="name">if</span></span> pindex == page.number%&#125;</span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123;pindex&#125;&#125;</span><span class="xml"><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;%<span class="name"><span class="name">else</span></span>%&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"?q=</span></span></span><span class="template-variable">&#123;&#123;query&#125;&#125;</span><span class="xml"><span class="tag"><span class="string"><span class="symbol">&amp;amp;</span>page=</span></span></span><span class="template-variable">&#123;&#123;pindex&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123;pindex&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;%<span class="name"><span class="name">endif</span></span>%&#125;</span></span><br><span class="line"><span class="template-tag">&#123;%<span class="name"><span class="name">endfor</span></span>%&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>5）运行服务器，在浏览器中输入如下地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/query/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要：搜索功能升级，使用haystack进行全文搜索。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Haystack" scheme="http://yoursite.com/tags/Haystack/"/>
    
      <category term="Whoosh" scheme="http://yoursite.com/tags/Whoosh/"/>
    
  </entry>
  
  <entry>
    <title>29疑难问题记录</title>
    <link href="http://yoursite.com/2020/02/29/29%E7%96%91%E9%9A%BE%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2020/02/29/29%E7%96%91%E9%9A%BE%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2020-02-29T12:50:46.000Z</published>
    <updated>2020-02-29T13:00:13.693Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>咦，明明在我电脑上就没问题……</p></blockquote><a id="more"></a><p>今天继续修改代码，写完代码之后启动项目发现了一个问题：</p><p>Reverse for ‘detail’ with arguments ‘(‘’,)’ not found. 1 pattern(s) tried: [‘…</p><p>总之就是url跳转时候正则匹配有问题，查了很长时间的百度，也尝试了很多种办法，但是都没有解决，url跳转感觉也没什么问题。</p><p>后来没办法只能创建了一个git分支，然后把主分支版本回退，回退到昨天的版本之后可以正常启动项目了，说明昨天的代码没有问题。</p><p>然后我又切到分支版本重新启动，这次没什么问题了，分支版本也能正常启动，就很奇怪，不知道到底是哪里不对，总感觉代码哪里有隐患。</p><p>记录一下，等哪天问题再出来了再来填坑。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;咦，明明在我电脑上就没问题……&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="问题总结" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
</feed>
