<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>白茶清欢</title>
  
  <subtitle>像三月的风扑击明亮的草垛，春天在每个夜晚数她的花朵</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-04T13:15:04.272Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>陈剑</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>33使用uwsgi作为服务器</title>
    <link href="http://yoursite.com/2020/03/04/33%E4%BD%BF%E7%94%A8uwsgi%E4%BD%9C%E4%B8%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yoursite.com/2020/03/04/33%E4%BD%BF%E7%94%A8uwsgi%E4%BD%9C%E4%B8%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2020-03-04T12:56:58.000Z</published>
    <updated>2020-03-04T13:15:04.272Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：Django自带的只是用于调试的服务器，要部署到云服务器上还是要用第三方的服务器。</p></blockquote><a id="more"></a><h4 id="uwsgi的安装"><a href="#uwsgi的安装" class="headerlink" title="uwsgi的安装"></a>uwsgi的安装</h4><p>切换到虚拟环境中，然后安装:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -c conda-forge uwsgi</span><br></pre></td></tr></table></figure><h4 id="uwsgi的配置"><a href="#uwsgi的配置" class="headerlink" title="uwsgi的配置"></a>uwsgi的配置</h4><p>修改项目settings.py文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DEBUG = FALSE</span><br><span class="line">ALLOWED_HOSTS = [&apos;*&apos;]</span><br></pre></td></tr></table></figure><p>项目中建立一个uwsgi.ini文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"># 使用nginx连接时使用</span><br><span class="line"># socket=127.0.0.1:8080</span><br><span class="line"># 直接做web服务器使用 python manage.py runserver</span><br><span class="line">http=127.0.0.1:8080</span><br><span class="line"># 项目目录</span><br><span class="line">chdir=/home/worksapce/DH_HX</span><br><span class="line"># 项目中的wsgi.py文件的目录, 相当于项目目录, 里面有项目的入口</span><br><span class="line">wsgi-file=DH_HX/wsgi.py</span><br><span class="line"># 指定启动的工作进程数</span><br><span class="line">processes=4</span><br><span class="line"># 指定工作进程中的线程数</span><br><span class="line">threads=2</span><br><span class="line">master=True</span><br><span class="line"># 保存启动之后主进程的pid</span><br><span class="line">pidfile=uwsgi.pid</span><br><span class="line"># 设置uwsgi后台运行,uwsgi.log保存日志信息</span><br><span class="line">daemonize=uwsgi.log</span><br><span class="line"># 设置虚拟环境的路径</span><br><span class="line">virtualenv=/usr/local/anaconda/envs/DjangoTest</span><br></pre></td></tr></table></figure><h4 id="启动uwsgi"><a href="#启动uwsgi" class="headerlink" title="启动uwsgi"></a>启动uwsgi</h4><p>启动：uwsgi –ini 配置文件路径 例如：uwsgi –ini uwsgi.ini<br>停止：uwsgi –stop uwsgi.pid 路径 例如：uwsgi –stop uwsgi.pid</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要：Django自带的只是用于调试的服务器，要部署到云服务器上还是要用第三方的服务器。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Django2.0" scheme="http://yoursite.com/tags/Django2-0/"/>
    
  </entry>
  
  <entry>
    <title>32使用xadmin替换Django的admin</title>
    <link href="http://yoursite.com/2020/03/03/32%E4%BD%BF%E7%94%A8xadmin%E6%9B%BF%E6%8D%A2Django%E7%9A%84admin/"/>
    <id>http://yoursite.com/2020/03/03/32%E4%BD%BF%E7%94%A8xadmin%E6%9B%BF%E6%8D%A2Django%E7%9A%84admin/</id>
    <published>2020-03-03T13:16:41.000Z</published>
    <updated>2020-03-03T13:42:50.255Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：Django自带有admin后台，但是其风格并不漂亮、功能也不是让人很满意。 所以从网上找了xadmin用来替换。</p></blockquote><h4 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h4><p>项目github地址为<a href="https://github.com/sshwsfc/xadmin，其中的xadmin文件夹是源码文件夹。" target="_blank" rel="noopener">https://github.com/sshwsfc/xadmin，其中的xadmin文件夹是源码文件夹。</a></p><h4 id="放置文件夹"><a href="#放置文件夹" class="headerlink" title="放置文件夹"></a>放置文件夹</h4><p>把xadmin文件夹放置在项目文件夹下面的，和templates同一级目录即可。</p><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">NSTALLED_APPS = [</span><br><span class="line">    &apos;django.contrib.admin&apos;,</span><br><span class="line">    &apos;django.contrib.auth&apos;,</span><br><span class="line">    &apos;django.contrib.contenttypes&apos;,</span><br><span class="line">    &apos;django.contrib.sessions&apos;,</span><br><span class="line">    &apos;django.contrib.messages&apos;,</span><br><span class="line">    &apos;django.contrib.staticfiles&apos;,</span><br><span class="line">    &apos;xadmin&apos;,#添加</span><br><span class="line">    &apos;crispy_forms&apos;,#添加</span><br><span class="line">    &apos;reversion&apos;,#添加(可选)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="修改主路由"><a href="#修改主路由" class="headerlink" title="修改主路由"></a>修改主路由</h4><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">from django.conf.urls import url,include</span></span><br><span class="line"></span><br><span class="line"><span class="xml"># from django.contrib import admin 注释admin</span></span><br><span class="line"></span><br><span class="line"><span class="xml">#以下四句为新添加内容</span></span><br><span class="line"></span><br><span class="line"><span class="xml">import xadmin </span></span><br><span class="line"><span class="xml">xadmin.autodiscover()</span></span><br><span class="line"></span><br><span class="line"><span class="xml">from xadmin.plugins import xversion</span></span><br><span class="line"><span class="xml">xversion.register_models()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">urlpatterns = [</span></span><br><span class="line"><span class="xml">  # url(r'^admin/', admin.site.urls),注释原路由</span></span><br><span class="line"><span class="xml">  url(r'^xadmin/',include(xadmin.site.urls)), #添加新路由</span></span><br><span class="line"><span class="xml">]</span></span><br></pre></td></tr></table></figure><h4 id="在应用中新建adminx-py文件"><a href="#在应用中新建adminx-py文件" class="headerlink" title="在应用中新建adminx.py文件"></a>在应用中新建adminx.py文件</h4><p>文件必须命名为这个名字，用于替换原有的admin文件，以后admin中的操作放到adminx中即可。</p><p>到此就可以了，xadmin还是非常方便好用，界面看起来也很舒适。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;摘要：Django自带有admin后台，但是其风格并不漂亮、功能也不是让人很满意。 所以从网上找了xadmin用来替换。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;下载源码&quot;&gt;&lt;a href=&quot;#下载源码&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Django2.0" scheme="http://yoursite.com/tags/Django2-0/"/>
    
  </entry>
  
  <entry>
    <title>31关于毕设的一些思考</title>
    <link href="http://yoursite.com/2020/03/02/31%E5%85%B3%E4%BA%8E%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    <id>http://yoursite.com/2020/03/02/31%E5%85%B3%E4%BA%8E%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</id>
    <published>2020-03-02T13:02:15.000Z</published>
    <updated>2020-03-02T13:46:58.002Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：随着毕业设计的深入，对项目也积累了一些认识，虽然在开发的路上还刚刚起步，但是这几天静下心来敲代码感觉还是爱上了这种产品在手中一步步成型的感觉。</p></blockquote><a id="more"></a><h4 id="做好自己的选择"><a href="#做好自己的选择" class="headerlink" title="做好自己的选择"></a>做好自己的选择</h4><p>程序世界里面可以选择的技术千千万万，每年的新技术也不停的出现，因此做技术注定是学习无止境的，提前选好自己的技术路线是一个首要性的问题，然后逐渐往深挖掘，往广拓展，这要比浅尝辄止重要得多。</p><h4 id="做项目应该求快还是应该求好"><a href="#做项目应该求快还是应该求好" class="headerlink" title="做项目应该求快还是应该求好"></a>做项目应该求快还是应该求好</h4><p>从某种目的出发，如果是老师或者课程要求的话，我认为应该注重功能，把更多的精力放到功能实现上去，如果时间富裕，可以充分向外拓展，使用更高级的技术，或者往深挖掘，探索更优的策略，优化项目。</p><p>如果是自己做项目，我觉得还是尽量打磨得更加精美比较好，让体验更加好一些，可以尝试研究一些技术之外的东西运用在项目里面，比如项目中如何贴近用户习惯，用户心理等等。</p><h4 id="规划自我发展路线"><a href="#规划自我发展路线" class="headerlink" title="规划自我发展路线"></a>规划自我发展路线</h4><p>及早去探索发现自己的发展路线，很多涉及到自身的发展问题不要抱着“水到渠成”，“车到山前必有路”这样的想法，时间越长，我越发现路是自己探索出来的，有时候也许发现是错的，但是总比停在原地要好，时常抬抬头看看前面的路可以更好的走好脚下的路。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要：随着毕业设计的深入，对项目也积累了一些认识，虽然在开发的路上还刚刚起步，但是这几天静下心来敲代码感觉还是爱上了这种产品在手中一步步成型的感觉。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="问题总结" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>30使用haystack进行全文检索</title>
    <link href="http://yoursite.com/2020/03/01/30%E4%BD%BF%E7%94%A8haystack%E8%BF%9B%E8%A1%8C%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2/"/>
    <id>http://yoursite.com/2020/03/01/30%E4%BD%BF%E7%94%A8haystack%E8%BF%9B%E8%A1%8C%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2/</id>
    <published>2020-03-01T10:59:33.000Z</published>
    <updated>2020-03-01T11:28:07.769Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：搜索功能升级，使用haystack进行全文搜索。</p></blockquote><a id="more"></a><h4 id="Haystack介绍以及安装"><a href="#Haystack介绍以及安装" class="headerlink" title="Haystack介绍以及安装"></a>Haystack介绍以及安装</h4><p>全文检索不同于特定字段的模糊查询，使用全文检索的效率更高，并且能够对于中文进行分词处理。</p><ul><li>haystack：全文检索的框架，支持whoosh、solr、Xapian、Elasticsearc四种全文检索引擎，<a href="http://haystacksearch.org/" target="_blank" rel="noopener">官方网站</a></li><li>whoosh：纯Python编写的全文搜索引擎，虽然性能比不上sphinx、xapian、Elasticsearc等，但是无二进制包，程序不会莫名其妙的崩溃，对于小型的站点，whoosh已经足够使用，<a href="https://whoosh.readthedocs.io/en/latest/" target="_blank" rel="noopener">whoosh文档</a></li><li>jieba：中文分词包，用于语句拆分。</li></ul><p>1）在虚拟环境中依次安装需要的包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install django-haystack</span><br><span class="line">pip install whoosh</span><br><span class="line">pip install jieba</span><br></pre></td></tr></table></figure><p>2）修改项目settings.py文件，安装应用haystack。</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">INSTALLED_APPS = (</span></span><br><span class="line"><span class="xml">    'haystack',</span></span><br><span class="line"><span class="xml">)</span></span><br></pre></td></tr></table></figure><p>3）在test6/settings.py文件中配置搜索引擎。</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">...</span></span><br><span class="line"><span class="xml">HAYSTACK_CONNECTIONS = &#123;</span></span><br><span class="line"><span class="xml">    'default': &#123;</span></span><br><span class="line"><span class="xml">        #使用whoosh引擎</span></span><br><span class="line"><span class="xml">        'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',</span></span><br><span class="line"><span class="xml">        #索引文件路径</span></span><br><span class="line"><span class="xml">        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">#当添加、修改、删除数据时，自动生成索引</span></span><br><span class="line"><span class="xml">HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'</span></span><br></pre></td></tr></table></figure><p>4）在项目urls.py中添加搜索的配置。</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">path('search/', include('haystack.urls')),</span></span><br></pre></td></tr></table></figure><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><p>1）在需要索引的应用目录下创建search_indexes.py文件，比如我要索引商品，就在goods目录下新建search_indexes.py文件，注意文件名很重要，不能修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> haystack <span class="keyword">import</span> indexes</span><br><span class="line"><span class="keyword">from</span> goods.models <span class="keyword">import</span> GoodsSKU</span><br><span class="line"><span class="comment">#指定对于某个类的某些数据建立索引</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsSKUIndex</span><span class="params">(indexes.SearchIndex, indexes.Indexable)</span>:</span></span><br><span class="line">    text = indexes.CharField(document=<span class="literal">True</span>, use_template=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_model</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> GoodsSKU</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index_queryset</span><span class="params">(self, using=None)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.get_model().objects.all()</span><br></pre></td></tr></table></figure><p>2）在templates目录下创建”search/indexes/goods/“目录。</p><p><img src="/2020/03/01/30使用haystack进行全文检索/1.png" alt="image-20200301191212079"></p><p>3）在上面的目录中创建”goodssku_text.txt”文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 指定根据表中的哪些字段建立索引</span><br><span class="line">&#123;&#123; object.name &#125;&#125;# 商品名称</span><br><span class="line">&#123;&#123; object.desc &#125;&#125;# 商品简介</span><br><span class="line">&#123;&#123; object.goods.detail &#125;&#125;# 商品详情</span><br></pre></td></tr></table></figure><p>4）找到虚拟环境下的haystack目录,我的项目环境是Anaconda创建的DjangoTest环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\ProgramFiles\Anaconda\envs\DjangoTest\Lib\site-packages\haystack\backends</span><br></pre></td></tr></table></figure><p>5）在上面的目录中创建ChineseAnalyzer.py文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">from</span> whoosh.analysis <span class="keyword">import</span> Tokenizer, Token</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChineseTokenizer</span><span class="params">(Tokenizer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, value, positions=False, chars=False,keeporiginal=False,removestops=True,start_pos=<span class="number">0</span>, start_char=<span class="number">0</span>, mode=<span class="string">''</span>, **kwargs)</span>:</span></span><br><span class="line">        t=Token(positions,chars,removestops=removestops, mode=mode,**kwargs)</span><br><span class="line">        seglist = jieba.cut(value, cut_all=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> seglist:</span><br><span class="line">            t.original = t.text = w</span><br><span class="line">            t.boost = <span class="number">1.0</span></span><br><span class="line">            <span class="keyword">if</span> positions:</span><br><span class="line">                t.pos = start_pos + value.find(w)</span><br><span class="line">            <span class="keyword">if</span> chars:</span><br><span class="line">                t.startchar = start_char + value.find(w)</span><br><span class="line">                t.endchar = start_char + value.find(w) + len(w)</span><br><span class="line">             <span class="keyword">yield</span> t</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ChineseAnalyzer</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> ChineseTokenizer()</span><br></pre></td></tr></table></figure><p>6）复制whoosh_backend.py文件，改为如下名称：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whoosh_cn_backend.py</span><br></pre></td></tr></table></figure><p>7）打开复制出来的新文件，引入中文分析类，内部采用jieba分词。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .ChineseAnalyzer <span class="keyword">import</span> ChineseAnalyzer</span><br></pre></td></tr></table></figure><p>8）更改词语分析类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查找</span><br><span class="line">analyzer=StemmingAnalyzer()</span><br><span class="line">改为</span><br><span class="line">analyzer=ChineseAnalyzer()</span><br></pre></td></tr></table></figure><p>9）初始化索引数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py rebuild_index</span><br></pre></td></tr></table></figure><p>初始化之后项目目录中会自动生成whoosh_index目录，目录里是whoosh的索引结构.</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>按照配置，在admin管理中添加数据后，会自动为数据创建索引，可以直接进行搜索，可以先创建一些测试数据。</p><p>1）在goods/views.py中定义视图query。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'goods/query.html'</span>)</span><br></pre></td></tr></table></figure><p>2）在goods/urls.py中配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(&apos;query/&apos;, views.query),</span><br></pre></td></tr></table></figure><p>3）在templates/目录中创建模板query.html。</p><blockquote><p>参数q表示搜索内容，传递到模板中的数据为query。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>全文检索<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">'get'</span> <span class="attr">action</span>=<span class="string">"/search/"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"q"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"查询"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4）自定义搜索结果模板：在templates/search/目录下创建search.html。</p><p>搜索结果进行分页，视图向模板中传递的上下文如下：</p><ul><li>query：搜索关键字</li><li>page：当前页的page对象</li><li>paginator：分页paginator对象</li></ul><p>视图接收的参数如下：</p><ul><li>参数q表示搜索内容，传递到模板中的数据为query</li><li>参数page表示当前页码</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>全文检索--结果页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>搜索<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span></span><span class="template-variable">&#123;&#123;query&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="symbol">&amp;nbsp;</span>结果如下：<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;%<span class="name"><span class="name">for</span></span> item <span class="keyword">in</span> page%&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.object.id&#125;&#125;</span><span class="xml">--</span><span class="template-variable">&#123;&#123;item.object.gcontent|<span class="name">safe</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;%<span class="name"><span class="name">empty</span></span>%&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>啥也没找到<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;%<span class="name"><span class="name">endfor</span></span>%&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;%<span class="name"><span class="name">for</span></span> pindex <span class="keyword">in</span> page.paginator.page_range%&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;%<span class="name"><span class="name">if</span></span> pindex == page.number%&#125;</span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123;pindex&#125;&#125;</span><span class="xml"><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;%<span class="name"><span class="name">else</span></span>%&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"?q=</span></span></span><span class="template-variable">&#123;&#123;query&#125;&#125;</span><span class="xml"><span class="tag"><span class="string"><span class="symbol">&amp;amp;</span>page=</span></span></span><span class="template-variable">&#123;&#123;pindex&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123;pindex&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;%<span class="name"><span class="name">endif</span></span>%&#125;</span></span><br><span class="line"><span class="template-tag">&#123;%<span class="name"><span class="name">endfor</span></span>%&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>5）运行服务器，在浏览器中输入如下地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/query/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要：搜索功能升级，使用haystack进行全文搜索。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Haystack" scheme="http://yoursite.com/tags/Haystack/"/>
    
      <category term="Whoosh" scheme="http://yoursite.com/tags/Whoosh/"/>
    
  </entry>
  
  <entry>
    <title>29疑难问题记录</title>
    <link href="http://yoursite.com/2020/02/29/29%E7%96%91%E9%9A%BE%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2020/02/29/29%E7%96%91%E9%9A%BE%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2020-02-29T12:50:46.000Z</published>
    <updated>2020-02-29T13:00:13.693Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>咦，明明在我电脑上就没问题……</p></blockquote><a id="more"></a><p>今天继续修改代码，写完代码之后启动项目发现了一个问题：</p><p>Reverse for ‘detail’ with arguments ‘(‘’,)’ not found. 1 pattern(s) tried: [‘…</p><p>总之就是url跳转时候正则匹配有问题，查了很长时间的百度，也尝试了很多种办法，但是都没有解决，url跳转感觉也没什么问题。</p><p>后来没办法只能创建了一个git分支，然后把主分支版本回退，回退到昨天的版本之后可以正常启动项目了，说明昨天的代码没有问题。</p><p>然后我又切到分支版本重新启动，这次没什么问题了，分支版本也能正常启动，就很奇怪，不知道到底是哪里不对，总感觉代码哪里有隐患。</p><p>记录一下，等哪天问题再出来了再来填坑。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;咦，明明在我电脑上就没问题……&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="问题总结" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>28页面静态化以及用户历史浏览记录的添加</title>
    <link href="http://yoursite.com/2020/02/28/28%E9%A1%B5%E9%9D%A2%E9%9D%99%E6%80%81%E5%8C%96%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E5%8E%86%E5%8F%B2%E6%B5%8F%E8%A7%88%E8%AE%B0%E5%BD%95%E7%9A%84%E6%B7%BB%E5%8A%A0/"/>
    <id>http://yoursite.com/2020/02/28/28%E9%A1%B5%E9%9D%A2%E9%9D%99%E6%80%81%E5%8C%96%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E5%8E%86%E5%8F%B2%E6%B5%8F%E8%A7%88%E8%AE%B0%E5%BD%95%E7%9A%84%E6%B7%BB%E5%8A%A0/</id>
    <published>2020-02-28T12:16:58.000Z</published>
    <updated>2020-02-28T12:40:43.185Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：使用页面静态化防止高并发用户访问时频繁刷新页面导致服务器卡顿，使用redis存储用户浏览记录也是同样的道理，防止用户频繁的数据库写入。</p></blockquote><a id="more"></a><h4 id="页面静态化"><a href="#页面静态化" class="headerlink" title="页面静态化"></a>页面静态化</h4><p>什么时候首页的静态页面需要重新生成？</p><p>当管理员后台修改首页信息对应的表格中的数据的时候，需要重新生成首页静态页面。</p><h4 id="页面数据的缓存"><a href="#页面数据的缓存" class="headerlink" title="页面数据的缓存:"></a>页面数据的缓存:</h4><p>把页面使用的数据放在缓存中，当再次使用这些数据的时候，先从缓存中读取，如果获取不到，再去查询数据库，减少数据库查询的次数。</p><h4 id="历史浏览记录的添加"><a href="#历史浏览记录的添加" class="headerlink" title="历史浏览记录的添加"></a>历史浏览记录的添加</h4><ul><li><p>什么时候需要添加历史浏览记录？</p><ul><li>访问商品的详情页面的时候（在商品详情对应的视图中），需要添加历史浏览记录。</li></ul></li><li><p>什么时候需要获取历史浏览记录？</p><ul><li>访问用户个人信息页面的时候获取用户历史浏览记录。</li></ul></li><li><p>历史浏览记录需要存储在哪里？</p><ul><li><p>redis数据库 -&gt; 内存型数据库</p><p>使用redis数据库存储历史浏览记录。</p></li></ul></li><li><p>redis中存储历史浏览记录的格式？</p><ul><li><p>string</p></li><li><p>hash</p></li><li><p>list</p></li><li><p>set</p></li><li><p>zset</p><p>存储用户的历史浏览记录时，所有用户的历史浏览记录用同一条数据保存</p><p>hash：</p><p>​        history：user_用户id: ‘1, 2, 3’</p><p>每个用户的历史浏览记录用一条数据结构保存：</p><p>list:</p><p>​    history_用户id：[3, 2, 1]</p><p>添加历史浏览记录时，用户最新的浏览的商品id从列表的左侧插入。</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要：使用页面静态化防止高并发用户访问时频繁刷新页面导致服务器卡顿，使用redis存储用户浏览记录也是同样的道理，防止用户频繁的数据库写入。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="问题总结" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>27Linux上安装Anaconda3以及环境迁移</title>
    <link href="http://yoursite.com/2020/02/27/27Linux%E4%B8%8A%E5%AE%89%E8%A3%85Anaconda3%E4%BB%A5%E5%8F%8A%E7%8E%AF%E5%A2%83%E8%BF%81%E7%A7%BB/"/>
    <id>http://yoursite.com/2020/02/27/27Linux%E4%B8%8A%E5%AE%89%E8%A3%85Anaconda3%E4%BB%A5%E5%8F%8A%E7%8E%AF%E5%A2%83%E8%BF%81%E7%A7%BB/</id>
    <published>2020-02-27T12:40:53.000Z</published>
    <updated>2020-02-27T13:16:01.296Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：安装过程很简单，但是环境迁移很烦，尝试了很多次才成功，记录一下闭坑过程。</p></blockquote><a id="more"></a><h3 id="Anaconda3的安装"><a href="#Anaconda3的安装" class="headerlink" title="Anaconda3的安装"></a>Anaconda3的安装</h3><h4 id="安装包下载"><a href="#安装包下载" class="headerlink" title="安装包下载"></a>安装包下载</h4><ol><li>历史版本：<a href="https://repo.continuum.io/archive/" target="_blank" rel="noopener">https://repo.continuum.io/archive/</a></li><li>清华镜像源：<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</a></li></ol><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bash Anaconda3-5.0.0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><p>之后提示接下来是许可协议，按Enter继续</p><p>许可协议有很多页，按Q跳到最后，输入yes接受协议</p><p>Anaconda默认按照位置是用户的home目录下的anaconda目录，修改为/usr/local目录下(我习惯把安装的软件都放到/usr/local/下面)，Enter开始进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[/root/anaconda3] &gt;&gt;&gt; /usr/<span class="built_in">local</span>/anaconda3</span><br></pre></td></tr></table></figure><p>等待安装几分钟后，会询问是否将Anaconda目录添加到.bashrc文件的PATH中，输入yes，安装完成后刷新.bashrc文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> /root/.bashrc</span><br></pre></td></tr></table></figure><h3 id="环境迁移"><a href="#环境迁移" class="headerlink" title="环境迁移"></a>环境迁移</h3><h4 id="Windows导出环境"><a href="#Windows导出环境" class="headerlink" title="Windows导出环境"></a>Windows导出环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda env <span class="built_in">export</span> &gt; environment.yaml</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">conda list -e &gt; requirments.txt</span><br></pre></td></tr></table></figure><p>环境会被保存在environment.yaml文件中，我们把文件上传到Linux服务器上面，通过以下命令进行环境复现</p><h4 id="Linux环境复现"><a href="#Linux环境复现" class="headerlink" title="Linux环境复现"></a>Linux环境复现</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda env create -f environment.yaml</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">conda install --yes --file requirements.txt</span><br></pre></td></tr></table></figure><p>因为是通过conda命令来创建虚拟环境，所以环境中使用到的库也是通过conda命令来安装，但是conda库没有我们需要的库的时候，我们会从pip库里面安装，这就导致conda命令无法安装pip的库，环境迁移不成功，所以我们在进行环境迁移的时候可以直接使用pip导出库，在Linux上进行install。</p><h4 id="一种实际上更好用的方法"><a href="#一种实际上更好用的方法" class="headerlink" title="一种实际上更好用的方法"></a>一种实际上更好用的方法</h4><p>pip导出库到requirements.txt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><p>Linux上创建虚拟环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n envname python=3.6</span><br></pre></td></tr></table></figure><p>进入虚拟环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> activate envname</span><br></pre></td></tr></table></figure><p>使用pip安装需要的包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>这样就会顺利很多。</p><p><strong>Linux上Anaconda进出环境命令比Windows多了一个source</strong></p><p>进入环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> activate env_name</span><br></pre></td></tr></table></figure><p>退出环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> deactivate</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要：安装过程很简单，但是环境迁移很烦，尝试了很多次才成功，记录一下闭坑过程。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="Anaconda3" scheme="http://yoursite.com/tags/Anaconda3/"/>
    
  </entry>
  
  <entry>
    <title>26CentOS7上安装MySQL</title>
    <link href="http://yoursite.com/2020/02/26/26CentOS7%E4%B8%8A%E5%AE%89%E8%A3%85MySQL/"/>
    <id>http://yoursite.com/2020/02/26/26CentOS7%E4%B8%8A%E5%AE%89%E8%A3%85MySQL/</id>
    <published>2020-02-26T13:23:29.000Z</published>
    <updated>2020-02-26T14:08:53.801Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：安装了一遍居然出错了，只能卸载再安一遍记录一下。</p><p>最近发现做东西总要出错，明明很简单的配置过程总要出点问题，偶尔顺利一次都要怀疑到底对不对。</p></blockquote><a id="more"></a><h4 id="为防止安装失败，先说卸载"><a href="#为防止安装失败，先说卸载" class="headerlink" title="为防止安装失败，先说卸载"></a>为防止安装失败，先说卸载</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看yum是否安装过mysql</span></span><br><span class="line">$ yum list installed mysql*</span><br></pre></td></tr></table></figure><p>如果显示了列表，说明系统中有MySQL。</p><p>根据列表上的名字进行yum卸载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ yum remove mysql-community-client mysql-community-common mysql-community-libs mysql-community-libs-compat mysql-community-server mysql57-community-release</span><br><span class="line"></span><br><span class="line">$ rm -rf /var/lib/mysql  </span><br><span class="line">$ rm /etc/my.cnf</span><br></pre></td></tr></table></figure><ol start="2"><li>rpm查看安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -qa | grep -i mysql</span><br></pre></td></tr></table></figure><p>根据列表上的名字进行rpm卸载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -ev mysql57-community-release-el7-9.noarch</span><br><span class="line">$ rpm -ev mysql-community-server-5.7.17-1.el7.x86_64</span><br><span class="line">$ rpm -ev mysql-community-libs-5.7.17-1.el7.x86_64</span><br><span class="line">$ rpm -ev mysql-community-libs-compat-5.7.17-1.el7.x86_64</span><br><span class="line">$ rpm -ev mysql-community-common-5.7.17-1.el7.x86_64</span><br><span class="line">$ rpm -ev mysql-community-client-5.7.17-1.el7.x86_64</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /var/lib/  </span><br><span class="line">$ rm -rf mysql/</span><br></pre></td></tr></table></figure><p>注意：这里有可能会抛依赖错误 error:Failed dependencies:，则加上 –nodeps不检查依赖关系删除，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -e --nodeps mysql-community-server-5.7.17-1.el7.x86_64</span><br></pre></td></tr></table></figure><p>清除余项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ whereis mysql</span><br><span class="line">mysql: /usr/bin/mysql /usr/lib64/mysql /usr/<span class="built_in">local</span>/mysql /usr/share/mysql /usr/share/man/man1/mysql.1.gz</span><br><span class="line"><span class="comment"># 删除上面的文件夹</span></span><br><span class="line">$ rm -rf /usr/bin/mysql</span><br><span class="line">…</span><br><span class="line">…</span><br></pre></td></tr></table></figure><p>删除配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rm –rf /usr/my.cnf</span><br><span class="line">$ rm -rf /root/.mysql_sercret</span><br></pre></td></tr></table></figure><p>剩余配置检查</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ chkconfig --list | grep -i mysql</span><br><span class="line">$ chkconfig --del mysqld</span><br></pre></td></tr></table></figure><p>根据上面的列表，删除 , 如：mysqld</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol><li>安装软件源</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://repo.mysql.com/mysql57-community-release-el7-9.noarch.rpm</span><br><span class="line">$ rpm -ivh mysql57-community-release-el7-9.noarch.rpm</span><br></pre></td></tr></table></figure><ol start="2"><li>接下来使用yum安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新yum软件包</span></span><br><span class="line">$ yum check-update  </span><br><span class="line"><span class="comment"># 更新系统 </span></span><br><span class="line">$ yum update</span><br><span class="line"> <span class="comment">#安装mysql</span></span><br><span class="line">$ yum install mysql mysql-server</span><br></pre></td></tr></table></figure><ol start="3"><li>安装完成后启动服务</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ service start mysqld</span><br><span class="line">$ systemctl start mysqld.service</span><br></pre></td></tr></table></figure><ol start="4"><li>查看MySQL的运行状态</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ service mysqld status</span><br><span class="line">$ systemctl status mysqld.service</span><br></pre></td></tr></table></figure><ol start="5"><li>获取MySQL的默认密码</li></ol><p>MySQL5.7安装完成后为root用户随机生成了一个密码，在error log中，关于error log的位置，如果安装的是RPM包，则默认是/var/log/mysqld.log。<br>只有启动过一次mysql才可以查看临时密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ grep <span class="string">'temporary password'</span> /var/<span class="built_in">log</span>/mysqld.log</span><br></pre></td></tr></table></figure><p><img src="/2020/02/26/26CentOS7上安装MySQL/1.png" alt="image-20200226214404829"></p><p>我这里的密码是rMThio2k&gt;aWp</p><ol start="6"><li>使用默认密码登录并修改密码</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u root -p</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;root&apos;;</span><br></pre></td></tr></table></figure><p>如果密码太简单，会出现一个错误<code>ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</code>,对于这个错误，可以修改两个参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set global validate_password_policy=0; </span><br><span class="line">mysql&gt; set global validate_password_length=1;</span><br></pre></td></tr></table></figure><p>再次执行修改密码就可以了</p><ol start="7"><li>授权可以外网访问MySQL</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;mypassword&apos; WITH GRANT OPTION;</span><br><span class="line">mysql&gt; FLUSH  PRIVILEGES;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要：安装了一遍居然出错了，只能卸载再安一遍记录一下。&lt;/p&gt;
&lt;p&gt;最近发现做东西总要出错，明明很简单的配置过程总要出点问题，偶尔顺利一次都要怀疑到底对不对。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>兼职酱前端设计图</title>
    <link href="http://yoursite.com/2020/02/26/%E5%85%BC%E8%81%8C%E9%85%B1%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E5%9B%BE/"/>
    <id>http://yoursite.com/2020/02/26/%E5%85%BC%E8%81%8C%E9%85%B1%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E5%9B%BE/</id>
    <published>2020-02-26T04:55:06.000Z</published>
    <updated>2020-02-26T05:01:57.119Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：以前做的一个项目的前端设计图，图中APP界面均为实际效果图。</p></blockquote><a id="more"></a><p><img src="/2020/02/26/兼职酱前端设计图/1.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要：以前做的一个项目的前端设计图，图中APP界面均为实际效果图。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端设计" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Redis随笔</title>
    <link href="http://yoursite.com/2020/02/25/Redis%E9%9A%8F%E7%AC%94/"/>
    <id>http://yoursite.com/2020/02/25/Redis%E9%9A%8F%E7%AC%94/</id>
    <published>2020-02-25T10:44:20.000Z</published>
    <updated>2020-02-25T10:47:11.926Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：把Redis移到服务器端进行配置实现购物车功能。</p></blockquote><a id="more"></a><h4 id="使用外网访问Linux上的Redis"><a href="#使用外网访问Linux上的Redis" class="headerlink" title="使用外网访问Linux上的Redis"></a>使用外网访问Linux上的Redis</h4><p>只需修改/etc/redis.conf文件。将bind注释掉即可。</p><p>linux上操作redis相关命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># service命令启动reids脚本</span></span><br><span class="line">service redis start</span><br><span class="line"><span class="comment"># service命令停止redis脚本</span></span><br><span class="line">service redis stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># systemctl命令兼容了service</span></span><br><span class="line">systemctl redis start</span><br><span class="line">systemctl redis stop</span><br><span class="line">systemctl redis restart</span><br></pre></td></tr></table></figure><h4 id="使用Redis实现购物车功能"><a href="#使用Redis实现购物车功能" class="headerlink" title="使用Redis实现购物车功能"></a>使用Redis实现购物车功能</h4><ol><li><p>什么时候添加购物车记录？</p><p>当用户点击加入购物车时需要添加购物车记录</p></li><li><p>什么时候需要获取购物车记录？</p><p>使用到购物车中数据和访问购物车页面的时候需要获取购物车记录</p></li><li><p>使用什么存储购物车记录?</p><p>Redis存储购物车记录</p></li><li><p>分析存储购物车记录的格式？</p><p>一个用户的购物车记录用户一条数据保存</p><p>hash:</p><p>‘cart_用户id’：[‘sku_id’：商品数目，’sku_id’：商品数目]</p><p>例子:</p><p>‘cart_1’：[‘1’：3，’2’：5]</p></li></ol><ol start="5"><li><p>获取用户购物车中商品总数目：</p><p>使用hlen</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要：把Redis移到服务器端进行配置实现购物车功能。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>25FastDFS+Nginx学习记录</title>
    <link href="http://yoursite.com/2020/02/25/25FastDFS+Nginx%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2020/02/25/25FastDFS+Nginx%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2020-02-25T10:12:30.000Z</published>
    <updated>2020-02-25T10:43:35.280Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：简单介绍一下FastDFS和Nginx。</p></blockquote><a id="more"></a><h3 id="FastDFS"><a href="#FastDFS" class="headerlink" title="FastDFS"></a>FastDFS</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>FastDFS 是一个开源的高性能分布式文件系统（DFS）。 它的主要功能包括：文件存储，文件同步和文件访问，以及高容量和负载平衡。主要解决了海量数据存储问题，特别适合以中小文件（建议范围：4KB &lt; file_size &lt;500MB）为载体的在线服务。</p><p>FastDFS 系统有三个角色：跟踪服务器(Tracker Server)、存储服务器(Storage Server)和客户端(Client)。</p><p>　　<strong>Tracker Server</strong>：跟踪服务器，主要做调度工作，起到均衡的作用；负责管理所有的 storage server和 group，每个 storage 在启动后会连接 Tracker，告知自己所属 group 等信息，并保持周期性心跳。</p><p>　　<strong>Storage Server</strong>：存储服务器，主要提供容量和备份服务；以 group 为单位，每个 group 内可以有多台 storage server，数据互为备份。</p><p>　　<strong>Client</strong>：客户端，上传下载数据的服务器，也就是我们自己的项目所部署在的服务器。</p><p><img src="/2020/02/25/25FastDFS+Nginx学习记录/1.png" alt="img"></p><h4 id="FastDFS的存储策略"><a href="#FastDFS的存储策略" class="headerlink" title="FastDFS的存储策略"></a>FastDFS的存储策略</h4><p>为了支持大容量，存储节点（服务器）采用了分卷（或分组）的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了冗余备份和负载均衡的作用。</p><p>在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。</p><h4 id="FastDFS的上传过程"><a href="#FastDFS的上传过程" class="headerlink" title="FastDFS的上传过程"></a>FastDFS的上传过程</h4><p>FastDFS向使用者提供基本文件访问接口，比如upload、download、append、delete等，以客户端库的方式提供给用户使用。</p><p>Storage Server会定期的向Tracker Server发送自己的存储信息。当Tracker Server Cluster中的Tracker Server不止一个时，各个Tracker之间的关系是对等的，所以客户端上传时可以选择任意一个Tracker。</p><p>当Tracker收到客户端上传文件的请求时，会为该文件分配一个可以存储文件的group，当选定了group后就要决定给客户端分配group中的哪一个storage server。当分配好storage server后，客户端向storage发送写文件请求，storage将会为文件分配一个数据存储目录。然后为文件分配一个fileid，最后根据以上的信息生成文件名存储文件。</p><p><img src="/2020/02/25/25FastDFS+Nginx学习记录/2.png" alt></p><h4 id="FastDFS的文件同步"><a href="#FastDFS的文件同步" class="headerlink" title="FastDFS的文件同步"></a>FastDFS的文件同步</h4><p>写文件时，客户端将文件写至group内一个storage server即认为写文件成功，storage server写完文件后，会由后台线程将文件同步至同group内其他的storage server。</p><p>每个storage写文件后，同时会写一份binlog，binlog里不包含文件数据，只包含文件名等元信息，这份binlog用于后台同步，storage会记录向group内其他storage同步的进度，以便重启后能接上次的进度继续同步；进度以时间戳的方式进行记录，所以最好能保证集群内所有server的时钟保持同步。</p><p>storage的同步进度会作为元数据的一部分汇报到tracker上，tracke在选择读storage的时候会以同步进度作为参考。</p><h4 id="FastDFS的文件下载"><a href="#FastDFS的文件下载" class="headerlink" title="FastDFS的文件下载"></a>FastDFS的文件下载</h4><p>客户端uploadfile成功后，会拿到一个storage生成的文件名，接下来客户端根据这个文件名即可访问到该文件。</p><p><img src="/2020/02/25/25FastDFS+Nginx学习记录/3.png" alt></p><p>跟upload file一样，在downloadfile时客户端可以选择任意tracker server。tracker发送download请求给某个tracker，必须带上文件名信息，tracke从文件名中解析出文件的group、大小、创建时间等信息，然后为该请求选择一个storage用来服务读请求。</p><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p><strong>Nginx：</strong>Nginx（“engine x”），Nginx是俄罗斯人Igor Sysoev编写的一款高性能的 HTTP 和反向代理服务器。也是一个IMAP/POP3/SMTP代理服务器，也就是说，Nginx本身就可以托管网站，进行HTTP服务处理，也可以作为反向代理服务器使用。</p><p>Nginx就是反向代理服务器。</p><p>代理服务器是介于客户端和Web服务器之间的另一台服务器，有了它之后，浏览器不是直接到Web服务器去取回网页，而是通过向代理服务器发送请求，信号会先送到代理服务器，由代理服务器来取回浏览器所需要的信息并传送给你的浏览器。</p><p><img src="/2020/02/25/25FastDFS+Nginx学习记录/4.png" alt></p><p>一个完整的代理请求过程为：客户端首先与代理服务器创建连接，然后根据代理服务器所使用的代理协议，请求对目标服务器创建连接、或则获得目标服务器的指定资源。</p><p>正向代理是一个位于客户端和原始服务器之间的服务器，为了从原始服务器取的内容，客户端向代理发送一个请求并指定目标（原始服务器），然后代理向原始服务器转交请求并将获得的内容返回给客户端，客户端必须要进行一些特别的设置才能使用正向代理。</p><p>反向代理服务器：在服务器端接收客户端的请求，然后把请求分发给具体的服务器进行处理，然后再将服务器的响应结果反馈给客户端。Nginx就是其中的一种反向代理服务器软件。</p><p><strong>简单的说：</strong></p><p>正向代理：客户端知道服务器端，通过代理端连接服务器端。代理端代理的是服务器端。<br>反向代理：所谓反向，是对正向而言的。服务器端知道客户端，客户端不知道服务器端，通过代理端连接服务器端。代理端代理的是客户端。代理对象刚好相反，所以叫反向代理。</p><h4 id="Nginx的特点"><a href="#Nginx的特点" class="headerlink" title="Nginx的特点"></a>Nginx的特点</h4><p>（1）跨平台：Nginx 可以在大多数 Unix like OS编译运行，而且也有Windows的移植版本。<br>（2）配置异常简单，非常容易上手。配置风格跟程序开发一样，神一般的配置<br>（3）非阻塞、高并发连接：数据复制时，磁盘I/O的第一阶段是非阻塞的。官方测试能够支撑5万并发连接，在实际生产环境中跑到2～3万并发连接数.(这得益于Nginx使用了最新的epoll模型)<br>（4）事件驱动：通信机制采用epoll模型，支持更大的并发连接。<br>（5）master/worker结构：一个master进程，生成一个或多个worker进程<br>（6）内存消耗小：处理大并发的请求内存消耗非常小。在3万并发连接下，开启的10个Nginx 进程才消耗150M内存（15M*10=150M）<br>（7）成本低廉：Nginx为开源软件，可以免费使用。而购买F5 BIG-IP、NetScaler等硬件负载均衡交换机则需要十多万至几十万人民币<br>（8）内置的健康检查功能：如果 Nginx Proxy 后端的某台 Web 服务器宕机了，不会影响前端访问。<br>（9）节省带宽：支持 GZIP 压缩，可以添加浏览器本地缓存的 Header 头。<br>（10）稳定性高：用于反向代理，宕机的概率微乎其微</p><h4 id="使用FastDFS-Nginx搭建文件分布系统"><a href="#使用FastDFS-Nginx搭建文件分布系统" class="headerlink" title="使用FastDFS + Nginx搭建文件分布系统"></a>使用FastDFS + Nginx搭建文件分布系统</h4><p>海量存储，存储容量扩展方便。</p><p>文件内容重复。</p><p>结合nginx提高网站提供图片的效率。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要：简单介绍一下FastDFS和Nginx。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/tags/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="FastDFS" scheme="http://yoursite.com/tags/FastDFS/"/>
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>24Python与FDFS交互时遇到的问题</title>
    <link href="http://yoursite.com/2020/02/24/24Python%E4%B8%8EFDFS%E4%BA%A4%E4%BA%92%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2020/02/24/24Python%E4%B8%8EFDFS%E4%BA%A4%E4%BA%92%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-02-24T11:59:16.000Z</published>
    <updated>2020-02-24T12:50:03.211Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天使用python在本地和服务器的FastDFS进行交互，遇到了几个问题，记录一下。</p></blockquote><a id="more"></a><h4 id="python与FDFS交互时报错"><a href="#python与FDFS交互时报错" class="headerlink" title="python与FDFS交互时报错"></a>python与FDFS交互时报错</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> fdfs_client.client <span class="keyword">import</span> Fdfs_client</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client = Fdfs_client(<span class="string">'/etc/fdfs/client.conf'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ret = client.upload_by_filename(<span class="string">'test'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ret</span><br><span class="line">&#123;<span class="string">'Group name'</span>:<span class="string">'group1'</span>,<span class="string">'Status'</span>:<span class="string">'Upload successed.'</span>, <span class="string">'Remote file_id'</span>:<span class="string">'group1/M00/00/00/</span></span><br><span class="line"><span class="string">wKjzh0_xaR63RExnAAAaDqbNk5E1398.py'</span>,<span class="string">'Uploaded size'</span>:<span class="string">'6.0KB'</span>,<span class="string">'Local file name'</span>:<span class="string">'test'</span></span><br><span class="line">, <span class="string">'Storage IP'</span>:<span class="string">'192.168.243.133'</span>&#125;</span><br></pre></td></tr></table></figure><p>在测试FDFS与python交互时，输入以上代码，这是官方文档的代码，当我输入<br>ret = client.upload_by_filename(‘test’)后，就报错了。</p><p>错误如下：<br>Traceback (most recent call last):<br>File “”, line 1, in<br>File “/root/.virtualenvs/Cole_py3/lib/python3.6/site-packages/fdfs_client/client.py”, line 88, in upload_by_filename<br>raise DataError(errmsg + ‘(uploading)’)<br>fdfs_client.exceptions.DataError: [-] Error: test1 is not a file.(uploading)</p><p>主要还是太天真了，以为按照官方测试代码输入就没错，后来查看了client.py的代码，才发现，ret = client.upload_by_filename(’ ‘) 括号里面填写的是要在你本机存在的文件名或者文件路径<br>ret = client.upload_by_filename(’ /home/cole/python/test/test1.py ‘)<br>ret = client.upload_by_filename(’ test1.py ‘)<br>这两种写法都可以，前提是test1.py是要存在你本机</p><h4 id="type-object-argument-after-must-be-a-mapping-not-str"><a href="#type-object-argument-after-must-be-a-mapping-not-str" class="headerlink" title="type object argument after ** must be a mapping, not str"></a>type object argument after ** must be a mapping, not str</h4><p>django自定义fdfs文件存储时报了这个错误。</p><p>创建client实例对象的时候不能直接传入配置文件的地址字符串,否则报错.<br>错误代码:TypeError: type object argument after ** must be a mapping, not str</p><p>解决办法：通过模块内<strong>get_tracker_conf</strong>函数, 获取配置文件后传入。</p><p>原代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fdfs_client.client <span class="keyword">import</span> Fdfs_client</span><br><span class="line">client = （./utils/fdfs/client.con<span class="string">f')</span></span><br><span class="line"><span class="string">ret = client.upload_by_buffer(content.read())</span></span><br></pre></td></tr></table></figure><p>修改后代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fdfs_client.client <span class="keyword">import</span> Fdfs_client, get_tracker_conf</span><br><span class="line">　　tracker_path = get_tracker_conf(<span class="string">'./utils/fdfs/client.conf'</span>)</span><br><span class="line">　　client = Fdfs_client(tracker_path)</span><br><span class="line">　　ret = client.upload_by_buffer(content.read())</span><br></pre></td></tr></table></figure><h4 id="python3使用fdfs上传文件时报str-returned-non-string-type-bytes-错误"><a href="#python3使用fdfs上传文件时报str-returned-non-string-type-bytes-错误" class="headerlink" title="python3使用fdfs上传文件时报str returned non-string (type bytes)错误"></a>python3使用fdfs上传文件时报<strong>str</strong> returned non-string (type bytes)错误</h4><p>上传成功后返回一个字典, 其中’Remote file_id’键对应的值由旧版模块string类型更改为byte类型。所以, 返回的文件id是byte类型，</p><p>原代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filename = result.get(<span class="string">'Remote file_id'</span>)</span><br><span class="line"><span class="keyword">return</span> filename</span><br></pre></td></tr></table></figure><p>修改后代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filename = result.get(<span class="string">'Remote file_id'</span>)</span><br><span class="line"><span class="keyword">return</span> filename.decode()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今天使用python在本地和服务器的FastDFS进行交互，遇到了几个问题，记录一下。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="问题总结" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/tags/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="FastDFS" scheme="http://yoursite.com/tags/FastDFS/"/>
    
  </entry>
  
  <entry>
    <title>搭建FastDFS及Nginx过程中遇到的问题</title>
    <link href="http://yoursite.com/2020/02/23/%E6%90%AD%E5%BB%BAFastDFS%E5%8F%8ANginx%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2020/02/23/%E6%90%AD%E5%BB%BAFastDFS%E5%8F%8ANginx%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-02-23T10:37:47.000Z</published>
    <updated>2020-02-23T10:42:56.061Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：安装个Nginx，配置文件那里整整用了一天时间，还是无法映射到8888端口，只能使用80端口实现了，无奈。</p></blockquote><a id="more"></a><h4 id="本地上传文件到FastDFS命令上传报错：ERROR-file-connection-pool-c-line-130-connect-to-x-x-x-x-22122-fail"><a href="#本地上传文件到FastDFS命令上传报错：ERROR-file-connection-pool-c-line-130-connect-to-x-x-x-x-22122-fail" class="headerlink" title="本地上传文件到FastDFS命令上传报错：ERROR - file: connection_pool.c, line: 130, connect to x.x.x.x:22122 fail"></a>本地上传文件到FastDFS命令上传报错：ERROR - file: connection_pool.c, line: 130, connect to x.x.x.x:22122 fail</h4><p><strong>问题分析</strong>：错误信息提示错误的原因为连接超时，连接超时有两种可能的原因，一种是云服务器拒绝我们的访问，另一种是我们服务器电脑开启了开机启动防火墙。<br><strong>注：不管你进行什么操作，只要是报了类似连接失败错误代号，大部分都是由于两种原因造成</strong></p><p><strong>解决方法一</strong>：<br>故先检查云服务是否对我们的22122端口（FastDFS的默认端口）进行了拦截，有的话创建安全组对该端口进行放行应用到实例上再次上传就能解决上传成功(这里我设置为所有端口都开放)。</p><p><img src="/2020/02/23/搭建FastDFS及Nginx过程中遇到的问题/1.png" alt="image-20200223114229884"></p><p><strong>解决方法二：</strong><br>由于出现该问题的原因是因为自己的防火墙没有开启，故开启防火墙即可解决问题，Linux上的指令如下：<br>1、关闭防火墙：</p><p><code>sudo systemctl stop firewalld.service</code><br>2、关闭开机启动：</p><p><code>sudo systemctl disable firewalld.service</code></p><p>再次上传：</p><p><img src="/2020/02/23/搭建FastDFS及Nginx过程中遇到的问题/2.png" alt="image-20200223114409066"></p><p>成功</p><h4 id="nginx-conf的配置"><a href="#nginx-conf的配置" class="headerlink" title="nginx.conf的配置"></a>nginx.conf的配置</h4><p>按照文档进行配置，但是无论如何都打不开8888的端口，只能改到默认的80端口，具体配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  x.x.x.x;</span><br><span class="line"></span><br><span class="line">        location ~/group[0-9]/ &#123;</span><br><span class="line">            ngx_fastdfs_module;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要：安装个Nginx，配置文件那里整整用了一天时间，还是无法映射到8888端口，只能使用80端口实现了，无奈。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="问题总结" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/tags/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="FastDFS" scheme="http://yoursite.com/tags/FastDFS/"/>
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>23搭建FastDFS+Nginx分布式文件系统</title>
    <link href="http://yoursite.com/2020/02/23/23%E6%90%AD%E5%BB%BAFastDFS-Nginx%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2020/02/23/23%E6%90%AD%E5%BB%BAFastDFS-Nginx%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-02-23T10:27:26.000Z</published>
    <updated>2020-02-23T10:43:27.062Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：安装一个分布式文件系统花了一天时间，不过总算是搞出来了。</p></blockquote><a id="more"></a><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>我用的是Linux版本是centos7<br>准备搭建所需要的gz包：<br>    nginx-1.8.1.tar.gz<br>    fastdfs-master.zip<br>    fastdfs-nginx-module-master.zip<br>    libfastcommon-master.zip</p><h3 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y lrzsz</span><br></pre></td></tr></table></figure><p>安装完成之后可以使用<code>rz</code>命令从本地向云服务器上传文件</p><h3 id="安装FastDFS"><a href="#安装FastDFS" class="headerlink" title="安装FastDFS"></a>安装FastDFS</h3><h4 id="安装fastdfs依赖包"><a href="#安装fastdfs依赖包" class="headerlink" title="安装fastdfs依赖包"></a>安装fastdfs依赖包</h4><ol><li><p>将libfastcommon解压到/usr/local/文件夹下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ unzip libfastcommon-master.zip -d /usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure></li><li><p>进入到libfastcommon-master目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/libfastcommon-master</span><br></pre></td></tr></table></figure></li><li><p>执行./make.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./make.sh</span><br></pre></td></tr></table></figure></li><li><p>执行./make.sh install</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./make.sh install</span><br></pre></td></tr></table></figure></li></ol><h4 id="安装fastdfs"><a href="#安装fastdfs" class="headerlink" title="安装fastdfs"></a>安装fastdfs</h4><ol><li><p>解压缩fastdfs-master.zip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ unzip fastdfs-master.zip -d /usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure></li><li><p>进入到fastdfs-master目录中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/fasdfs-master</span><br></pre></td></tr></table></figure></li><li><p>执行./make.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./make.sh</span><br></pre></td></tr></table></figure></li><li><p>执行./make.sh install</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./make.sh install</span><br></pre></td></tr></table></figure></li></ol><h4 id="配置跟中服务器tracker"><a href="#配置跟中服务器tracker" class="headerlink" title="配置跟中服务器tracker"></a>配置跟中服务器tracker</h4><ol><li><p>将tracker.conf文件移动到/etc/fdfs/中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp /etc/fdfs/tracker.conf.sample /etc/fdfs/tracker.conf</span><br></pre></td></tr></table></figure></li><li><p>在/usr/local/python3/目录中创建目录/fastdfs/tracker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p /usr/<span class="built_in">local</span>/python3/fastdfs/tracker</span><br></pre></td></tr></table></figure></li><li><p>编辑/etc/fdfs/tracker.conf配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/fdfs/tracker.conf</span><br></pre></td></tr></table></figure></li><li><p>修改内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base_path=/usr/<span class="built_in">local</span>/python3/fastdfs/tracker</span><br></pre></td></tr></table></figure></li></ol><h4 id="配置储存服务器storage"><a href="#配置储存服务器storage" class="headerlink" title="配置储存服务器storage"></a>配置储存服务器storage</h4><ol><li><p>将storage.conf文件移动到/etc/fdfs/中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp /etc/fdfs/storage.conf.sample /etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure></li><li><p>在/usr/local/python3/fastdfs/目录中创建目录storage</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p /usr/<span class="built_in">local</span>/python3/fastdfs/storage</span><br></pre></td></tr></table></figure></li><li><p>编辑/etc/fdfs/storage.conf配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure></li><li><p>修改内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">base_path=/usr/<span class="built_in">local</span>/python3/fastdfs/storage</span><br><span class="line">store_path0=/usr/<span class="built_in">local</span>/python3/fastdfs/storage</span><br><span class="line"><span class="comment"># 此处x.x.x.x为自己的云服务器的ip地址</span></span><br><span class="line">tracker_server=x.x.x.x:22122</span><br></pre></td></tr></table></figure></li><li><p>启动tracker和storage</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ service fdfs_trackerd start</span><br><span class="line">$ service fdfs_storaged start</span><br></pre></td></tr></table></figure></li></ol><h4 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h4><ol><li><p>将client.conf文件移动到/etc/fdfs/文件夹下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp /etc/fdfs/client.conf.sample /etc/fdfs/client.conf</span><br></pre></td></tr></table></figure></li><li><p>编辑/etc/fdfs/client.conf配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/fdfs/client.conf</span><br></pre></td></tr></table></figure></li><li><p>修改内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">base_path=/usr/<span class="built_in">local</span>/python3/fastdfs/tracker</span><br><span class="line"><span class="comment"># 此处x.x.x.x为自己的云服务器的ip地址</span></span><br><span class="line">tracker_server=x.x.x.x:22122</span><br></pre></td></tr></table></figure></li><li><p>上传文件到/usr/local/文件夹下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line">$ rz</span><br></pre></td></tr></table></figure></li><li><p>上传文件测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ fdfs_upload_file /etc/fdfs/client.conf /usr/<span class="built_in">local</span>/1.jpg</span><br></pre></td></tr></table></figure></li><li><p>正确返回内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">group1/M00/00/00/rBBVCV5SUomAZGXzAAJsTkkrCMI580.jpg</span><br></pre></td></tr></table></figure></li></ol><h3 id="安装nginx及fastdfs-nginx-module"><a href="#安装nginx及fastdfs-nginx-module" class="headerlink" title="安装nginx及fastdfs-nginx-module"></a>安装nginx及fastdfs-nginx-module</h3><h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4><ol><li><p>将nginx-1.8.1.tar.gz解压至/usr/local</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar -zxvf nginx-1.8.1.tar.gz -C /usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure></li><li><p>进入nginx-1.8.1目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx-1.8.1</span><br></pre></td></tr></table></figure></li><li><p>参数配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./configure --prefix=/usr/<span class="built_in">local</span>/nginx</span><br></pre></td></tr></table></figure></li><li><p>编译安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li><li><p>启动nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/sbin</span><br><span class="line">$ nginx</span><br></pre></td></tr></table></figure></li><li><p>如果启动成功可以在浏览器访问自己的服务器</p><p><img src="/2020/02/23/23搭建FastDFS-Nginx分布式文件系统/1.png" alt="image-20200223180515518"></p></li></ol><h4 id="添加fastdfs-nginx-module"><a href="#添加fastdfs-nginx-module" class="headerlink" title="添加fastdfs-nginx-module"></a>添加fastdfs-nginx-module</h4><ol><li><p>将fastdfs-nginx-module-master.zip解压到/usr/local/文件夹下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ unzip fastdfs-nginx-module-master.zip -d /usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure></li><li><p>在nginx中添加该模块 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx-1.8.1</span><br><span class="line">$ ./configure --add-module=/usr/<span class="built_in">local</span>/fastdfs-nginx-module/src</span><br></pre></td></tr></table></figure></li><li><p>编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li><li><p>修改fastdfs-nginx-module配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/fastdfs-nginx-module/src</span><br><span class="line">$ vim config</span><br></pre></td></tr></table></figure></li><li><p>修改内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CORE_INCS=<span class="string">"<span class="variable">$CORE_INCS</span> /usr/include/fastdfs /usr/include/fastcommon"</span></span><br><span class="line">CORE_LIBS=<span class="string">"<span class="variable">$CORE_LIBS</span> -L/usr/lib -lfastcommon -lfdfsclient"</span></span><br></pre></td></tr></table></figure></li><li><p>将src目录下的mod_fastdfs.conf文件复制到/etc/fdfs/目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp /usr/<span class="built_in">local</span>/fastdfs-nginx-module-master/src/mod_fastdfs.conf /etc/fdfs</span><br></pre></td></tr></table></figure></li><li><p>修改/etc/fdfs/mod_fastdfs.conf的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/fdfs/mod_fastdfs.conf</span><br></pre></td></tr></table></figure></li><li><p>修改内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">connect_timeout=10</span><br><span class="line"><span class="comment"># 此处x.x.x.x为自己的云服务器的ip地址</span></span><br><span class="line">tracker_server=x.x.x.x:22122</span><br><span class="line">url_have_group_name=<span class="literal">true</span></span><br><span class="line">store_path0=/usr/<span class="built_in">local</span>/python3/fastdfs/storage</span><br></pre></td></tr></table></figure></li><li><p>将fastdfs-master/conf/目录下的两个文件复制到/etc/fdfs/中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/fastdfs-master/conf</span><br><span class="line">$ cp http.conf /etc/fdfs/http.conf</span><br><span class="line">$ cp mime.types /etc/fdfs/mime.types</span><br></pre></td></tr></table></figure></li><li><p>进入/usr/local/nginx/conf目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/conf</span><br></pre></td></tr></table></figure></li><li><p>修改nginx.conf配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim nginx.conf</span><br></pre></td></tr></table></figure></li><li><p>修改内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  x.x.x.x;</span><br><span class="line"></span><br><span class="line">        location ~/group[0-9]/ &#123;</span><br><span class="line">            ngx_fastdfs_module;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重新启动nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/sbin</span><br><span class="line">$ nginx -s reload</span><br></pre></td></tr></table></figure></li><li><p>将之前上传图片时的返回内容复制到浏览器地址栏可以查看到文件</p><p><img src="/2020/02/23/23搭建FastDFS-Nginx分布式文件系统/2.png" alt="image-20200223182448549"></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要：安装一个分布式文件系统花了一天时间，不过总算是搞出来了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/tags/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="FastDFS" scheme="http://yoursite.com/tags/FastDFS/"/>
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>22Linux中部署项目环境</title>
    <link href="http://yoursite.com/2020/02/22/22Linux%E4%B8%AD%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2020/02/22/22Linux%E4%B8%AD%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83/</id>
    <published>2020-02-22T11:04:09.000Z</published>
    <updated>2020-02-22T11:08:38.373Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>经常用Linux系统进行开发，但是没有专门记录过。今天买了阿里云的服务器准备把项目部署到云端，把部署环境的过程记录一下。</p></blockquote><a id="more"></a><p>安装环境</p><blockquote><p>系统版本：CentOS 7.6（自带Python2.7）<br>安装版本：Python3.6<br>安装插件：virtualenv、virtualenvwrapper</p></blockquote><h4 id="一、安装Python3"><a href="#一、安装Python3" class="headerlink" title="一、安装Python3"></a>一、安装Python3</h4><p>由于CentOS7原本就安装了Python2，而且这个Python2不能被删除，因为有很多系统命令，比如yum都要用到。所以我们要额外安装Python3。</p><p>我们先来查看python安装位置，一般是位于<code>/usr/bin/python</code>目录下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ which python</span><br><span class="line">&gt;&gt; /usr/bin/python</span><br></pre></td></tr></table></figure><p>下面介绍安装Python3的方法：</p><p><strong>1. 安装依赖包</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y groupinstall &quot;Development tools&quot;</span><br><span class="line">$ yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span><br></pre></td></tr></table></figure><p><strong>2.下载Python3安装包</strong><br>我这里下载的是Python3.6.2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tar.xz</span><br></pre></td></tr></table></figure><p><strong>3. 新建python3存放目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir /usr/<span class="built_in">local</span>/python3</span><br></pre></td></tr></table></figure><p><strong>4. 安装Python3</strong><br>解压压缩包，进入解压目录，指定安装目录，安装Python3。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ tar -xvJf  Python-3.6.2.tar.xz</span><br><span class="line">$ <span class="built_in">cd</span> Python-3.6.2</span><br><span class="line">$ ./configure --prefix=/usr/<span class="built_in">local</span>/python3</span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure><p>安装Python3时，会自动安装pip。假如没有，需要自己手动安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y install python-pip</span><br></pre></td></tr></table></figure><p><strong>5. 创建软链接</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ln -s /usr/<span class="built_in">local</span>/python3/bin/python3 /usr/bin/python3</span><br><span class="line">$ ln -s /usr/<span class="built_in">local</span>/python3/bin/pip3 /usr/bin/pip3</span><br></pre></td></tr></table></figure><p><strong>6. 安装完成，输入<code>python3</code>测试</strong></p><p><img src="/2020/02/22/22Linux中部署项目环境/1.png" alt="image-20200222184903576"></p><p>安装成功</p><h4 id="二、创建虚拟环境"><a href="#二、创建虚拟环境" class="headerlink" title="二、创建虚拟环境"></a>二、创建虚拟环境</h4><p><code>virtualenv</code>是一个可以在同一计算机中隔离多个python版本的工具。有时，两个不同的项目可能需要不同版本的python，如 python2.7 / python3.6 ，但是如果都装到一起，经常会导致问题。<code>virtualenv</code>能够用于创建独立的Python虚拟环境，多个Python相互独立，互不影响。<br><code>virtualenvwrapper</code>这个软件包可以让我们管理虚拟环境变得更加简单。不用再跑到某个目录下通过<code>virtualenv</code>来创建虚拟环境，并且激活的时候也要跑到具体的目录下去激活。</p><p>使用<code>pip</code>安装包前，先更新<code>pip</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install --upgrade pip</span><br></pre></td></tr></table></figure><p><strong>1. 安装virtualenv、virtualenvwrapper</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install virtualenv</span><br><span class="line">$ pip3 install virtualenvwrapper</span><br></pre></td></tr></table></figure><p><strong>2. 进入<code>.bashrc</code>文件中，定义<code>virtualenvwrapper</code>路径</strong></p><p>使用vim编辑<code>.bashrc</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>在文末填入以下代码并保存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定virtualenvwrapper执行的python版本</span></span><br><span class="line"><span class="built_in">export</span> VIRTUALENVWRAPPER_PYTHON=/usr/<span class="built_in">local</span>/python3/bin/python3</span><br><span class="line"><span class="comment"># 指定虚拟环境存放目录</span></span><br><span class="line"><span class="built_in">export</span> WORKON_HOME=~/Envs    </span><br><span class="line"><span class="comment"># 指定virtualenv的目录</span></span><br><span class="line"><span class="built_in">export</span> VIRTUALENVWRAPPER_VIRTUALENV=/usr/loacl/python3/bin/virtualenv</span><br><span class="line"><span class="comment"># virtualenvwrapper.sh所在目录</span></span><br><span class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/python3/bin/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure><p><strong>3. 运行<code>.bashrc</code>文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p><strong>4. 创建虚拟环境</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkvirtualenv py3-env</span><br></pre></td></tr></table></figure><p>也可指定虚拟环境的python版本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkvirtualenv --python=<span class="regexp">/usr/</span>local/python3/bin/python3 my_prj</span><br></pre></td></tr></table></figure><h4 id="导入项目所需的库文件"><a href="#导入项目所需的库文件" class="headerlink" title="导入项目所需的库文件"></a>导入项目所需的库文件</h4><p><strong>1. 进入虚拟环境中，然后进入到项目所在目录，安装好相应的包</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>附：自动生成项目安装包的依赖文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><p>虚拟环境搭建完成！</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;经常用Linux系统进行开发，但是没有专门记录过。今天买了阿里云的服务器准备把项目部署到云端，把部署环境的过程记录一下。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/tags/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>21Django2.0部分问题总结</title>
    <link href="http://yoursite.com/2020/02/21/21Django2-0%E9%83%A8%E5%88%86%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/02/21/21Django2-0%E9%83%A8%E5%88%86%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</id>
    <published>2020-02-21T13:27:34.000Z</published>
    <updated>2020-02-22T02:27:20.997Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：记录一下今天遇到的问题，导包时用相对路径，pycharm不会报错，但项目启动不起来，用绝对路径可以启动起来，但pycharm会报错。</p></blockquote><a id="more"></a><h4 id="python引入模块报错ValueError-attempted-relative-import-beyond-top-level-package"><a href="#python引入模块报错ValueError-attempted-relative-import-beyond-top-level-package" class="headerlink" title="python引入模块报错ValueError: attempted relative import beyond top-level package"></a>python引入模块报错ValueError: attempted relative import beyond top-level package</h4><p>​        原因：导包时使用了相对路径，比如 <code>from . import XXX</code>或者<code>from .. import XXX</code></p><p>​        在涉及到相对导入时，package所对应的文件夹必须正确的被python解释器视作package，而不是普通文件夹。否则由于不被视作package，无法利用package之间的嵌套关系实现python中包的相对导入。</p><p>​        文件夹被python解释器视作package需要满足两个条件：</p><p>1、文件夹中必须有<strong>init</strong>.py文件，该文件可以为空，但必须存在该文件。</p><p>2、不能作为顶层模块来执行该文件夹中的py文件（即不能作为主函数的入口）。</p><p>​        补充：在”from YY import XX”这样的代码中，无论是XX还是YY，只要被python解释器视作package，就会首先调用该package的<strong>init</strong>.py文件。如果都是package，则调用顺序是YY，XX。</p><p>​        解决办法：使用绝对路径即可，或者在文件中添加下面两行代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys,os</span><br><span class="line">sys.path.append(os.path.dirname(__file__) + os.sep + <span class="string">'../'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要：记录一下今天遇到的问题，导包时用相对路径，pycharm不会报错，但项目启动不起来，用绝对路径可以启动起来，但pycharm会报错。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="问题总结" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/tags/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>20使用celery异步发送邮件过程中遇到的问题</title>
    <link href="http://yoursite.com/2020/02/20/20%E4%BD%BF%E7%94%A8celery%E5%BC%82%E6%AD%A5%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2020/02/20/20%E4%BD%BF%E7%94%A8celery%E5%BC%82%E6%AD%A5%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-02-20T11:38:27.000Z</published>
    <updated>2020-02-20T11:43:25.502Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：今天使用celery进行异步发送激活邮件，主要是为了防止发送邮件过程中系统反应过慢，影响用户体验。</p></blockquote><a id="more"></a><ol><li><p>启动worker过程中目标计算机积极拒绝，无法连接。</p><ul><li>下载并安装Redis-x64-3.0.503.msi，地址：<a href="https://github.com/MicrosoftArchive/redis/releases" target="_blank" rel="noopener">https://github.com/MicrosoftArchive/redis/releases</a></li><li>双击redis-cli.exe，启动服务即可。</li></ul></li><li><p>windows下安装Redis第一次启动报错：Creating Server TCP listening socket 127.0.0.1:6379: bind: No error</p><ul><li><p>双击redis-cli.exe</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt;shutdown</span><br><span class="line">not connected&gt;exit</span><br></pre></td></tr></table></figure></li></ul><p>​    然后重新运行redis-server.exe redis.windows.conf，启动成功！</p><p>​    启动成功后不要关闭启动页面</p></li><li><p>发送邮件是worker报错：ValueError: not enough values to unpack (expected 3, got 0)</p><ul><li><p>原网页:<a href="https://github.com/celery/celery/issues/4081" target="_blank" rel="noopener">Unable to run tasks under Windows</a></p><p>看别人描述大概就是说win10上运行celery4.x就会出现这个问题，解决办法如下,原理未知：</p><p>先安装一个eventlet</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install eventlet</span><br></pre></td></tr></table></figure><p>然后启动worker的时候加一个参数<code>-P eventlet</code>，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A &lt;mymodule&gt; worker -l info -P eventlet</span><br></pre></td></tr></table></figure><p>然后就可以正常的调用了。</p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要：今天使用celery进行异步发送激活邮件，主要是为了防止发送邮件过程中系统反应过慢，影响用户体验。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="问题总结" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/tags/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="Django2.0" scheme="http://yoursite.com/tags/Django2-0/"/>
    
  </entry>
  
  <entry>
    <title>19使用邮箱进行账号激活</title>
    <link href="http://yoursite.com/2020/02/19/19%E4%BD%BF%E7%94%A8%E9%82%AE%E7%AE%B1%E8%BF%9B%E8%A1%8C%E8%B4%A6%E5%8F%B7%E6%BF%80%E6%B4%BB/"/>
    <id>http://yoursite.com/2020/02/19/19%E4%BD%BF%E7%94%A8%E9%82%AE%E7%AE%B1%E8%BF%9B%E8%A1%8C%E8%B4%A6%E5%8F%B7%E6%BF%80%E6%B4%BB/</id>
    <published>2020-02-19T12:36:25.000Z</published>
    <updated>2020-02-19T12:42:10.906Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：今天对登录注册模块进行重新设计，增加了邮箱激活功能。</p></blockquote><a id="more"></a><h4 id="邮箱开启STMP服务"><a href="#邮箱开启STMP服务" class="headerlink" title="邮箱开启STMP服务"></a>邮箱开启STMP服务</h4><p>可以免费开启STMP服务的邮箱有163,126，QQ，我选择的是QQ邮箱</p><p><img src="/2020/02/19/19使用邮箱进行账号激活/1.png" alt="image-20200219134229787"></p><p>选择设置下面的账户，下滑找到STMP服务一项，选择开启</p><p><img src="/2020/02/19/19使用邮箱进行账号激活/2.png" alt="image-20200219134522351"></p><p><img src="/2020/02/19/19使用邮箱进行账号激活/3.png" alt="image-20200219134738744"></p><p>使用密保手机发送一条信息</p><p><img src="/2020/02/19/19使用邮箱进行账号激活/4.png" alt="image-20200219134903997"></p><p>然后就可以拿到开启STMP服务的授权码，我们将授权码复制下来保存</p><h4 id="配置项目settings-py文件"><a href="#配置项目settings-py文件" class="headerlink" title="配置项目settings.py文件"></a>配置项目settings.py文件</h4><p>在项目的settings.py文件中加上以下配置</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"># 发送邮件配置</span></span><br><span class="line"><span class="xml"># SMTP服务地址</span></span><br><span class="line"><span class="xml">EMAIL_HOST = "smtp.qq.com"</span></span><br><span class="line"><span class="xml">EMAIL_PORT = 25</span></span><br><span class="line"><span class="xml"># 发送邮件的邮箱</span></span><br><span class="line"><span class="xml">EMAIL_HOST_USER = "你的邮箱"</span></span><br><span class="line"><span class="xml"># 客户端授权码密码</span></span><br><span class="line"><span class="xml">EMAIL_HOST_PASSWORD = "刚刚复制的授权码"</span></span><br><span class="line"><span class="xml">EMAIL_USE_TLS= False</span></span><br><span class="line"><span class="xml"># 收件人看到的发件人</span></span><br><span class="line"><span class="xml">EMAIL_FROM = "你的邮箱"</span></span><br></pre></td></tr></table></figure><h4 id="在响应的应用的views-py文件中新建视图send"><a href="#在响应的应用的views-py文件中新建视图send" class="headerlink" title="在响应的应用的views.py文件中新建视图send"></a>在响应的应用的views.py文件中新建视图send</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用Django内置的邮件库进行邮件发送</span></span><br><span class="line"><span class="keyword">from</span> django.core.mail <span class="keyword">import</span> send_mail</span><br><span class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> TimedJSONWebSignatureSerializer <span class="keyword">as</span> Serializer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用itsdangerous对用户ID进行加密,生成激活token</span></span><br><span class="line"><span class="comment"># ID加密是为了防止用户恶意攻击</span></span><br><span class="line">serializer = Serializer(settings.SECRET_KEY, <span class="number">3600</span>)</span><br><span class="line">info = &#123;<span class="string">'confirm'</span>:user.id&#125;</span><br><span class="line">token = serializer.dumps(info)</span><br><span class="line">token = token.decode()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发邮件</span></span><br><span class="line">subject = <span class="string">"邮件标题"</span></span><br><span class="line">message = <span class="string">'邮件正文'</span></span><br><span class="line">html_message = <span class="string">'请点击下面的链接激活您的账号&lt;br/&gt;&lt;a href=" 激活链接 "&gt;激活链接 &lt;/a&gt;'</span> %      </span><br><span class="line">send = settings.EMAIL_FROM</span><br><span class="line">receiver = [email]</span><br><span class="line">send_mail(subject, message, send, receiver,html_message=html_message)</span><br></pre></td></tr></table></figure><h4 id="配置响应应用的urls-py"><a href="#配置响应应用的urls-py" class="headerlink" title="配置响应应用的urls.py"></a>配置响应应用的urls.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用re_path进行正则路径匹配，path无法进行正则匹配</span></span><br><span class="line">re_path(<span class="string">r"^active/(?P&lt;token&gt;.*)$"</span>, ActiveView.as_view(), name=<span class="string">"active"</span>),</span><br></pre></td></tr></table></figure><h4 id="设置响应的点击发送后的链接对应的视图来处理事务"><a href="#设置响应的点击发送后的链接对应的视图来处理事务" class="headerlink" title="设置响应的点击发送后的链接对应的视图来处理事务"></a>设置响应的点击发送后的链接对应的视图来处理事务</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用itsdangerous库对用户ID进行解密</span></span><br><span class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> TimedJSONWebSignatureSerializer <span class="keyword">as</span> Serializer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ActiveView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="string">"""用户激活"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, token)</span>:</span></span><br><span class="line">        <span class="comment"># 用户激活</span></span><br><span class="line">        <span class="comment"># 进行解密， 获取激活信息</span></span><br><span class="line">        serializer = Serializer(settings.SECRET_KEY, <span class="number">3600</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            info = serializer.loads(token)</span><br><span class="line">            user_id = info[<span class="string">"confirm"</span>]</span><br><span class="line">            <span class="comment"># 根据id获取用户信息</span></span><br><span class="line">            user = User.objects.get(id=user_id)</span><br><span class="line">            user.is_active = <span class="number">1</span></span><br><span class="line">            user.save()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 跳转到登录页面</span></span><br><span class="line">            <span class="keyword">return</span> redirect(reverse(<span class="string">"user:login"</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> SignatureExpired <span class="keyword">as</span> e:</span><br><span class="line">            <span class="comment"># 激活链接已经过期</span></span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">"激活链接已过期"</span>)</span><br></pre></td></tr></table></figure><p>本文中代码均是在Django2.0环境下写的，更换环境可能需要修改，而且部分内容与应用中其他内容呼应，比如登录注册等等，所以本文只用作记录，其他系统并不适用。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要：今天对登录注册模块进行重新设计，增加了邮箱激活功能。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/tags/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="STMP" scheme="http://yoursite.com/tags/STMP/"/>
    
  </entry>
  
  <entry>
    <title>18Django升级到2.0过程中遇到的问题</title>
    <link href="http://yoursite.com/2020/02/18/18Django%E5%8D%87%E7%BA%A7%E5%88%B02-0%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2020/02/18/18Django%E5%8D%87%E7%BA%A7%E5%88%B02-0%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-02-18T12:01:29.000Z</published>
    <updated>2020-02-18T12:07:07.072Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天突发奇想把Django升级到2.0，过程艰难，自找苦吃。</p></blockquote><a id="more"></a><h4 id="Django2-0-中外键ForeignKey需要添加属性on-delete"><a href="#Django2-0-中外键ForeignKey需要添加属性on-delete" class="headerlink" title="Django2.0 中外键ForeignKey需要添加属性on_delete"></a>Django2.0 中外键ForeignKey需要添加属性on_delete</h4><p>on_delete参数的各个值的含义:</p><p>​    on_delete=None,        # 删除关联表中的数据时,当前表与其关联的field的行为<br>​    on_delete=models.CASCADE,   # 删除关联数据,与之关联也删除<br>​    on_delete=models.DO_NOTHING,  # 删除关联数据,什么也不做<br>​    on_delete=models.PROTECT,   # 删除关联数据,引发错误ProtectedError<br>​    # models.ForeignKey(‘关联表’, on_delete=models.SET_NULL, blank=True, null=True)<br>​    on_delete=models.SET_NULL,   # 删除关联数据,与之关联的值设置为null（前提FK字段需要设置为可空,一对一同理）<br>​    # models.ForeignKey(‘关联表’, on_delete=models.SET_DEFAULT, default=’默认值’)<br>​    on_delete=models.SET_DEFAULT, # 删除关联数据,与之关联的值设置为默认值（前提FK字段需要设置默认值,一对一同理）<br>​    on_delete=models.SET,     # 删除关联数据,<br>​         a. 与之关联的值设置为指定值,设置：models.SET(值)<br>​         b. 与之关联的值设置为可执行对象的返回值,设置：models.SET(可执行对象)</p><h4 id="Django中blank-True和null-True的区别"><a href="#Django中blank-True和null-True的区别" class="headerlink" title="Django中blank=True和null=True的区别"></a>Django中blank=True和null=True的区别</h4><p>null 是针对数据库而言，如果 null=True, 表示数据库的该字段可以为空。那么在新建一个model对象的时候是不会报错的！！</p><p>blank 是针对表单的，如果 blank=True，表示你的表单填写该字段的时候可以不填。比如 admin 界面下增加 model 一条记录的时候，直观的看到就是该字段不是粗体。</p><h4 id="Django2-0中urlpattern匹配写法"><a href="#Django2-0中urlpattern匹配写法" class="headerlink" title="Django2.0中urlpattern匹配写法"></a>Django2.0中urlpattern匹配写法</h4><p>例如：仅匹配<a href="http://127.0.0.1:8000/时想要跳转到某个页面，这时urlpattern中的url规则应该写成：" target="_blank" rel="noopener">http://127.0.0.1:8000/时想要跳转到某个页面，这时urlpattern中的url规则应该写成：</a></p><p><strong>情况1：使用url</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">　　from django.contrib import admin</span><br><span class="line">　　from django.urls import path</span><br><span class="line">　　from django.conf.urls import url</span><br><span class="line"></span><br><span class="line">　　urlpatterns = [</span><br><span class="line">    　　path(&apos;admin/&apos;, admin.site.urls),</span><br><span class="line">    　　url(r&apos;&apos;,include(&apos;CRM.urls&apos;)),</span><br></pre></td></tr></table></figure><pre><code>　　# 以前习惯用url(r&apos;^$&apos;,view.somedef)　　# 如果这么写会报错：　　# Your URL pattern &apos;^$&apos; uses include with a route ending with a &apos;$&apos;</code></pre><p>　　]</p><p>情况2：使用path</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">　　from django.contrib import admin</span><br><span class="line">　　from django.urls import path</span><br><span class="line">　　</span><br><span class="line">　　urlpatterns = [</span><br><span class="line">　　　　path(&apos;admin/&apos;, admin.site.urls),</span><br><span class="line">　　　　　path(&apos;&apos;,include(&apos;CRM.urls&apos;)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>情况3：使用re_path</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from django.conf.urls import re_path</span><br><span class="line"></span><br><span class="line">　　urlpatterns = [</span><br><span class="line">　　　　path(&apos;admin/&apos;, admin.site.urls),</span><br><span class="line">　　　　re_path(r&apos;&apos;,include(&apos;CRM.urls&apos;)),</span><br><span class="line"></span><br><span class="line">　　]</span><br></pre></td></tr></table></figure><h4 id="form表单的action写法"><a href="#form表单的action写法" class="headerlink" title="form表单的action写法"></a>form表单的action写法</h4><p><strong>问题：</strong>RuntimeError: You called this URL via POST, but the URL doesn’t end in a slash and you have APPEN…</p><p>提示form的action地址最后不是/结尾的，而且APPEND_SLASH的值是Ture</p><p><strong>解决办法：</strong>将form的action地址改为/结尾的就可以了，或者将APPEND_SLASH的值改为False</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今天突发奇想把Django升级到2.0，过程艰难，自找苦吃。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="问题总结" scheme="http://yoursite.com/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="毕业设计" scheme="http://yoursite.com/tags/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="Django2.0" scheme="http://yoursite.com/tags/Django2-0/"/>
    
  </entry>
  
  <entry>
    <title>一种解决github项目下载失败的方法</title>
    <link href="http://yoursite.com/2020/02/17/%E4%B8%80%E7%A7%8D%E8%A7%A3%E5%86%B3github%E9%A1%B9%E7%9B%AE%E4%B8%8B%E8%BD%BD%E5%A4%B1%E8%B4%A5%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2020/02/17/%E4%B8%80%E7%A7%8D%E8%A7%A3%E5%86%B3github%E9%A1%B9%E7%9B%AE%E4%B8%8B%E8%BD%BD%E5%A4%B1%E8%B4%A5%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2020-02-17T13:32:49.000Z</published>
    <updated>2020-02-17T14:03:41.135Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：借助码云实现第三方快速下载</p></blockquote><a id="more"></a><p>今天下载一个 <del>比较大型</del> 30m大小的项目的时候由于网络问题接连失败，然后在网上找了一种可行的方法，记录下来。</p><h4 id="1-首先需要一个码云账户，如果你没有，这个是官网地址https-gitee-com"><a href="#1-首先需要一个码云账户，如果你没有，这个是官网地址https-gitee-com" class="headerlink" title="1. 首先需要一个码云账户，如果你没有，这个是官网地址https://gitee.com/"></a>1. 首先需要一个码云账户，如果你没有，这个是官网地址<a href="https://gitee.com/" target="_blank" rel="noopener">https://gitee.com/</a></h4><p><img src="/2020/02/17/一种解决github项目下载失败的方法/1.png" alt></p><h4 id="2-注册一个账号"><a href="#2-注册一个账号" class="headerlink" title="2. 注册一个账号"></a>2. 注册一个账号</h4><p><img src="/2020/02/17/一种解决github项目下载失败的方法/2.png" alt="image-20200217214348392"></p><h4 id="3-新建一个仓库"><a href="#3-新建一个仓库" class="headerlink" title="3.新建一个仓库"></a>3.新建一个仓库</h4><p><img src="/2020/02/17/一种解决github项目下载失败的方法/3.png" alt="image-20200217214722401"></p><h4 id="4-选择导入已有仓库"><a href="#4-选择导入已有仓库" class="headerlink" title="4. 选择导入已有仓库"></a>4. 选择导入已有仓库</h4><p><img src="/2020/02/17/一种解决github项目下载失败的方法/4.png" alt="image-20200217214928948"></p><h4 id="5-复制github项目地址"><a href="#5-复制github项目地址" class="headerlink" title="5.复制github项目地址"></a>5.复制github项目地址</h4><p><img src="/2020/02/17/一种解决github项目下载失败的方法/5.png" alt="image-20200217215524197"></p><h4 id="6-粘贴刚刚刚创建的仓库，然后点击创建"><a href="#6-粘贴刚刚刚创建的仓库，然后点击创建" class="headerlink" title="6.粘贴刚刚刚创建的仓库，然后点击创建"></a>6.粘贴刚刚刚创建的仓库，然后点击创建</h4><p><img src="/2020/02/17/一种解决github项目下载失败的方法/6.png" alt="image-20200217215817678"></p><h4 id="7-等待创建完成之后的，将仓库下载到本地"><a href="#7-等待创建完成之后的，将仓库下载到本地" class="headerlink" title="7.等待创建完成之后的，将仓库下载到本地"></a>7.等待创建完成之后的，将仓库下载到本地</h4><p><img src="/2020/02/17/一种解决github项目下载失败的方法/7.png" alt="image-20200217220141506"></p><p>输入验证码之后就可以用正常网速下载项目到本地了。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要：借助码云实现第三方快速下载&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="桌边闲话" scheme="http://yoursite.com/categories/%E6%A1%8C%E8%BE%B9%E9%97%B2%E8%AF%9D/"/>
    
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
</feed>
