<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>47VUEX的使用</title>
    <url>/2020/03/19/47VUEX%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p>VUE全家桶真多啊。。</p>
</blockquote>
<a id="more"></a>
<h4 id="vuex创建"><a href="#vuex创建" class="headerlink" title="vuex创建"></a>vuex创建</h4><ol>
<li><p>src目录下新建一个vuex的文件夹</p>
</li>
<li><p>vuex文件夹里面新建一个store.js</p>
</li>
<li><p>安装vuex</p>
<ul>
<li>cnpm install vuex –save</li>
</ul>
</li>
<li><p>在store.js中引入vue  引入vuex并且use vuex</p>
<ul>
<li><p>import Vue from ‘vue’</p>
<p>import Vuex from ‘vuex’</p>
<p>Vue.use(Vuex)</p>
</li>
</ul>
</li>
<li><p>定义数据</p>
<ul>
<li><p>state在vuex中用于存储数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var state=&#123;</span><br><span class="line">	count:1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>定义方法</p>
<ul>
<li><p>mutation里面放的是方法，主要用于改变state里面的数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var mutation&#123;</span><br><span class="line">	incCount()&#123;</span><br><span class="line">		++state.count;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>暴露</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">	state,</span><br><span class="line">	mutations</span><br><span class="line">&#125;)</span><br><span class="line">export default store;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h4 id="vuex数据使用"><a href="#vuex数据使用" class="headerlink" title="vuex数据使用"></a>vuex数据使用</h4><ol>
<li><p>在其他页面引入store</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import store from &apos;../vuex/store.js&apos;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注册</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default&#123;</span><br><span class="line">	······</span><br><span class="line">	store，</span><br><span class="line">	······</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;this.$store.state.count&#125;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button @click=&apos;addCount&apos;&gt;点击增加数据&lt;/button&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">	···</span><br><span class="line">	methods：&#123;</span><br><span class="line">		addCount()&#123;</span><br><span class="line">			//改变vuex store里面的数据</span><br><span class="line">			this.$store.commit(&apos;incCount&apos;);  //触发state里面的数据</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Getters操作数据"><a href="#Getters操作数据" class="headerlink" title="Getters操作数据"></a>Getters操作数据</h4><p>改变state里面的count数据的时候会触发getters里面的方法，获取新的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var getters=&#123;</span><br><span class="line">	computedCount:(state)=&gt;&#123;</span><br><span class="line">		return state.count*2; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; this.$store.getters.computedCount &#125;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><p>Action 类似于 mutation，不同在于：</p>
<ul>
<li>Action 提交的是 mutation，而不是直接变更状态。</li>
<li>Action 可以包含任意异步操作，突破了mutation只能同步执行的限制。</li>
</ul>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>VUE</category>
      </categories>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title>46VUE中index.html，App.vue，main.js之间的关系</title>
    <url>/2020/03/18/46VUE%E4%B8%ADindex-html%EF%BC%8CVue-vue%EF%BC%8Cmain-js%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
    <content><![CDATA[<blockquote>
<p>摘要：index.html，App.vue，main.js相互依赖</p>
</blockquote>
<p>首先要明确这几个文件各有什么作用：</p>
<p><strong>index.html—主页，项目入口</strong></p>
<p><strong>App.vue—根组件</strong></p>
<p><strong>main.js—入口文件</strong></p>
<p><img src="/2020/03/18/46VUE中index-html，Vue-vue，main-js之间的关系/1.png" alt="image-20200318215949356"></p>
<p><img src="/2020/03/18/46VUE中index-html，Vue-vue，main-js之间的关系/2.png" alt="image-20200318220110871"></p>
<p><img src="/2020/03/18/46VUE中index-html，Vue-vue，main-js之间的关系/3.png" alt="image-20200318220132797"></p>
<p>项目启动之后：</p>
<p><img src="/2020/03/18/46VUE中index-html，Vue-vue，main-js之间的关系/4.png" alt="image-20200318220732215"></p>
<p>可以看到，在网页的Title部分，加载了index.html中定义的Title，而在正文部分，加载了App.vue中定义的部分。</p>
<p>所以浏览器访问项目，最先访问的是index.html文件，index.html文件中有一个名为app的挂载点，然后Vue根实例就会挂载到该挂载点上， main.js作为项目的入口文件，在main.js中，新建了一个Vue实例，在Vue实例中，通过：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  //components: &#123;App &#125;,</span><br><span class="line">  //template: &apos;&lt;App/&gt;&apos;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>告诉该实例要挂载的地方（即实例装载到index.html中的位置），template会替代原来的的挂载点处的内容</p>
<p><strong>总结：</strong>在项目运行中，main.js作为项目的入口文件，运行中，找到其实例需要挂载的位置，即index.html中，刚开始，index.html的挂载点处的内容会被显示，但是随后就被实例中的组件中的模板中的内容所取代，所以我们会看到有那么一瞬间会显示出index.html中正文的内容。</p>
<p>而index.html中的Title部分不会被取代，所以会一直保留。</p>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>VUE</category>
      </categories>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title>46VUE的父子组件传值</title>
    <url>/2020/03/17/46VUE%E7%9A%84%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/</url>
    <content><![CDATA[<blockquote>
<p>摘要：专业做前端的工具，真香啊。。。</p>
</blockquote>
<a id="more"></a>
<h4 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h4><ol>
<li>父组件向子组件传值，首先需要给DOM节点绑定属性，使用<code>v-bind:title=&quot;title&quot;</code>的方式动态增加属性，然后需要注意的几点是：</li>
</ol>
<ul>
<li>组件实例的作用域是孤立的；</li>
<li>子组件要显式的用<code>props</code>选项声明它预期的数据，如：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 某个子组件中：</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    title: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &apos;hello world&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后就可以在页面中使用了。以上就是<code>单向数据流</code>的一般表现了： 父级 prop 的更新会向下流动到子组件中，但是反过来则不行。</p>
<ol start="2">
<li>子组件通过<code>事件</code>给父组件发送信息。</li>
</ol>
<p>每个Vue实例都实现了事件接口：使用<code>$on(evntName)</code>监听事件；使用<code>$emit(eventName,optionalPayload)</code>触发事件。另外，父组件可以在使用子组件的地方直接用<code>v-on</code>来监听子组件触发的事件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;test&quot;&gt;</span><br><span class="line">      &lt;test-com @childFn=&quot;parentFn&quot;&gt;&lt;/test-com&gt;</span><br><span class="line">      &lt;br/&gt; </span><br><span class="line">      子组件传来的值 : &#123;&#123;message&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    // ...</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: &apos;&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">       parentFn(payload) &#123;</span><br><span class="line">        this.message = payload;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;VUE</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line">&lt;template&gt; </span><br><span class="line">&lt;div class=&quot;testCom&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;message&quot; /&gt;</span><br><span class="line">    &lt;button @click=&quot;click&quot;&gt;Send&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    // ...</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          // 默认</span><br><span class="line">          message: &apos;我是来自子组件的消息&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      click() &#123;</span><br><span class="line">            this.$emit(&apos;childFn&apos;, this.message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>VUE</category>
      </categories>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title>45VUE的入门笔记</title>
    <url>/2020/03/16/45VUE%E7%9A%84%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>摘要：感觉VUE挺简单的。。</p>
</blockquote>
<a id="more"></a>
<h4 id="new-Vue-是创建了一个Vue实例"><a href="#new-Vue-是创建了一个Vue实例" class="headerlink" title="new Vue 是创建了一个Vue实例;*"></a>new Vue 是创建了一个Vue实例;*</h4><p> el: ‘#app’意思是让Vue实例去接管id为’app’的div里面的内容,即为Vue实例和这个div的Dom元素做了绑定,el绑定的div为挂载  点</p>
<p> data : 就是vue的一些数据</p>
<p>直接通过双花括号的形式显示在data里的的数据</p>
<h4 id="Vue的常用指令"><a href="#Vue的常用指令" class="headerlink" title="Vue的常用指令"></a>Vue的常用指令</h4><p>Vue指令以v-开头，作用在HTML元素上，将指令绑定在元素上时，会给绑定的元素添加一些特殊行为，可将指令视作特殊的HTML属性</p>
<p> <strong>v-model</strong> 在表单元素上实现双向绑定</p>
<p> <strong>v-if</strong>  条件判断指令，根据表达式值的真假来插入或删除元素，表达式返回一个布尔值</p>
<p> <strong>v-show</strong> 条件渲染指令，与v-if不同的是，无论v-show的值为true或false，元素都会存在于HTML代码中；而只有当v-if   的值为true，元素才会存在于HTML代码中。v-show指令只是设置了元素CSS的style值</p>
<p><strong>v-else</strong> 可配合v-if或v-show使用，v-else指令必须紧邻v-if或v-show，否则该命令无法正常工作。v-else绑定的元素能否  渲染在HTML中，取决于前面使用的是v-if还是v-show。若前面使用的是v-if，且v-if值为true，则v-else元素不会渲染；若前面使用的是v-show，且v-show值为true，则v-else元素仍会渲染到HTML。  </p>
<p><strong>v-for</strong>  循环指令，基于一个数组渲染一个列表，与JavaScript遍历类似，语法如下：</p>
<p>​    v-for = “item in items”</p>
<p><strong>v-bind</strong>  给DOM绑定元素属性，语法如下：</p>
<p>​    v-bind:argument=”expression”</p>
<p>其中，argument通常是HTML元素的特性，如：<code>v-bind:  class = &quot;expression&quot;</code>。</p>
<p>注：v-bind指令可以缩写为:冒号。如：<code>:class=&quot;expression&quot;</code>。</p>
<p><strong>v-on</strong>  用于监听DOM事件，语法与v-bind类似，如监听点击事件v-on:click=”doSth”</p>
<p>​    注：v-on指令可以缩写为@符号。如：@click=”doSth”。 </p>
<p>Vue的键盘事件</p>
<blockquote>
<!--@keydown.xx,点什么键,就是按下什么键触发事件-->
<p><input @keydown.enter="keyEnter()">  //按下回车键即触发事件</p>
<p><input @keydown.a="kerA()">  //按下键盘的A键</p>
</blockquote>
<h4 id="Vue的事件冒泡"><a href="#Vue的事件冒泡" class="headerlink" title="Vue的事件冒泡"></a>Vue的事件冒泡</h4><p>  什么是事件冒泡: 在div的层层嵌套中,触发最里面的事件,会相继触发一层层的事件,即为事件冒泡</p>
<p>  阻止冒泡: 给事件添加@click=”show($event)”</p>
<blockquote>
<p>show: function (e) {</p>
<p>   alert(“this is 3”);</p>
<p>   e.stopPropagation(); //阻止</p>
<p>​                    }</p>
</blockquote>
<p>或者直接@click.stop=”show($event)”,就不用写e.stopPropagation();</p>
<blockquote>
<!--阻止事件默认方法-->
<button @click.prevent.stop="show()">text</button>
</blockquote>
<h4 id="methods-Vue方法"><a href="#methods-Vue方法" class="headerlink" title="methods: Vue方法"></a>methods: Vue方法</h4><blockquote>
<p> methods: {</p>
<p>  //这个是要执行的函数</p>
<p>   hello: function() { }</p>
<p>}</p>
</blockquote>
<p> methods里面放vue的方法</p>
<h4 id="钩子函数-mounted"><a href="#钩子函数-mounted" class="headerlink" title="钩子函数 :mounted"></a>钩子函数 :mounted</h4><p>  对于前端来说，钩子函数就是指在所有函数执行前，我先执行了的函数，即 钩住 我感兴趣的函数，只要它执行，我就先执行。</p>
<blockquote>
<p>mounted: function() {</p>
<p>  //这个是钩子函数 ,如果hello函数要执行，必须先执行钩子函数 </p>
<p>}</p>
</blockquote>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>VUE</category>
      </categories>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title>44VUE的安装以及创建项目过程中遇到的问题</title>
    <url>/2020/03/15/44VUE%E7%9A%84%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>摘要：今天简单学了学VUE的安装和基本语法，记录一下遇到的问题。</p>
</blockquote>
<a id="more"></a>
<h4 id="安装脚手架"><a href="#安装脚手架" class="headerlink" title="安装脚手架"></a>安装脚手架</h4><p>cnpm install -g vue-cli</p>
<h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><p>vue init webpack huaxi</p>
<h4 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h4><h5 id="搭建vue项目（vue-init-webpack）时报错-vue-cli-•-Failed-to-download-repo-vuejs-templates-webpack-unable-to-verifythe-first-certificate"><a href="#搭建vue项目（vue-init-webpack）时报错-vue-cli-•-Failed-to-download-repo-vuejs-templates-webpack-unable-to-verifythe-first-certificate" class="headerlink" title="搭建vue项目（vue init webpack）时报错 vue-cli • Failed to download repo vuejs-templates/webpack: unable to verifythe first certificate"></a>搭建vue项目（vue init webpack）时报错 vue-cli • Failed to download repo vuejs-templates/webpack: unable to verifythe first certificate</h5><p>其实就是网络不好，下载webpack失败</p>
<h4 id="解决办法就是下载webpack到本地，线下创建"><a href="#解决办法就是下载webpack到本地，线下创建" class="headerlink" title="解决办法就是下载webpack到本地，线下创建"></a>解决办法就是下载webpack到本地，线下创建</h4><ol>
<li><a href="https://github.com/vuejs-templates/webpack" target="_blank" rel="noopener">https://github.com/vuejs-templates/webpack</a> 下载webpack文件</li>
<li>在C盘找.vue-templates文件夹，如果没有就在C:\User\Administrator下创建一个.vue-templates文件夹</li>
<li>把下载的webpack文件解压到.vue-templates文件夹里边，重命名为webpack</li>
<li>在想要创建VUE项目的文件夹里打开cmd，输入vue init webpack huaxi –offline</li>
</ol>
<p>offline就是使用线下webpack创建的意思</p>
<h4 id="创建过程："><a href="#创建过程：" class="headerlink" title="创建过程："></a>创建过程：</h4><p><img src="/2020/03/15/44VUE的安装以及创建项目过程中遇到的问题/1.png" alt="image-20200315151532307"></p>
<p>Project name(项目名称)</p>
<p>Project description(项目介绍)</p>
<p>Author(作者，这里不知道怎么回事自动获取到了我的github昵称和邮箱…)</p>
<p>Vue build(打包方式，回车即可)</p>
<p>Install vue-router(是否要安装 vue-router，项目中肯定要使用到，Y 回车)</p>
<p>Use ESLint to lint your code（是否需要 js 语法检测，不需要，所以 n 回车)</p>
<p>Set up unit tests(是否安装单元测试工具，不需要，n 回车)</p>
<p>Setup e2e tests with Nightwatch(是否需要端到端测试工具，不需要，n回车)</p>
<p>Should we run <code>npm install</code> for you after the project has been created(是否需要npm install，不需要，我们使用cnpm install，选第三项回车)</p>
<h4 id="进入项目文件夹"><a href="#进入项目文件夹" class="headerlink" title="进入项目文件夹"></a>进入项目文件夹</h4><p>cnpm install</p>
<p>npm run dev</p>
<p>浏览器打开<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></p>
<p><img src="/2020/03/15/44VUE的安装以及创建项目过程中遇到的问题/2.png" alt="image-20200315152345349"></p>
<h5 id="npm换到淘宝源cnpm方法："><a href="#npm换到淘宝源cnpm方法：" class="headerlink" title="npm换到淘宝源cnpm方法："></a>npm换到淘宝源cnpm方法：</h5><p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>VUE</category>
      </categories>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title>43又挖了个VUE的新坑</title>
    <url>/2020/03/14/43%E5%8F%88%E6%8C%96%E4%BA%86%E4%B8%AAVUE%E7%9A%84%E6%96%B0%E5%9D%91/</url>
    <content><![CDATA[<blockquote>
<p>摘要：这个没学完，又要学习新的。。</p>
</blockquote>
<a id="more"></a>
<p>今天把毕设的前端页面和手机端页面改了改，项目碰到个错误总是无法解决，很苦恼，已经快2个星期了，总是找不到原因。</p>
<p>然后最近总感觉时间不够用了，前几天准备面试看了一些照招聘信息，发现自己差好多，然后网上找学习资料屯在收藏夹里，今天做毕设又发现还要用到VUE，虽然说不使用VUE的话也能实现效果，但是前后端不分离总是不方便，尤其涉及到移动端的时候，还是前后端分离实现起来比较容易。</p>
<p>于是，又给自己挖了个新坑，VUE还是要学的，毕竟对找工作也有好处，我对前端比较感兴趣，喜欢亲手做出那种绚丽的感觉。</p>
<p>明天继续加油！</p>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>VUE</category>
      </categories>
      <tags>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title>找出数组中的重复数字</title>
    <url>/2020/03/12/%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<blockquote>
<p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p>
</blockquote>
<a id="more"></a>
<p><strong>思路：</strong>选定一个数组中的值为初始值，然后进行循环比较，如果数组中有相等的值，然后返回这个值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i]==nums[j])&#123;</span><br><span class="line">                    flag = nums[i];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是这么做是很费时的，LeetCode上显示用时3602ms</p>
<p>这道题的关键点是题目中的“<strong>数组 nums 里的所有数字都在 0～n-1 的范围内</strong>”，所以数组的元素值和下标是有一定关系的，可以通过这种关系进行求解，附上大神的解法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 如果没有重复数字，那么正常排序后，数字i应该在下标为i的位置，所以思路是重头扫描数组，遇到下标为i的数字如果不是i的话，（假设为m),那么我们就拿与下标m的数字交换。在交换过程中，如果有重复的数字发生，那么终止返回ture</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">while</span> (nums[i]!=i)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]==nums[nums[i]])&#123;</span><br><span class="line">                    <span class="keyword">return</span> nums[i];</span><br><span class="line">                &#125;</span><br><span class="line">                temp=nums[i];</span><br><span class="line">                nums[i]=nums[temp];</span><br><span class="line">                nums[temp]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">作者：derrick_sun</span><br><span class="line">链接：https:<span class="comment">//leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/solution/yuan-di-zhi-huan-shi-jian-kong-jian-100-by-derrick/</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>剑指offer</category>
      </categories>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>Git学习笔记</title>
    <url>/2020/03/11/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>摘要：git是我目前用过的最顺手，最合我心意的工具。</p>
</blockquote>
<a id="more"></a>
<h3 id="git学习笔记"><a href="#git学习笔记" class="headerlink" title="git学习笔记"></a>git学习笔记</h3><p>windows下：<br>直接安装git，完成后设置用户名和邮箱<br>$ git config –global user.name “Your Name”<br>$ git config –global user.email “<a href="mailto:email@example.com" target="_blank" rel="noopener">email@example.com</a>“</p>
<p><strong>pwd ：</strong>pwd 显示当前目录<br><strong>mkdir ：</strong>创建文件夹</p>
<h4 id="git基本操作"><a href="#git基本操作" class="headerlink" title="git基本操作"></a>git基本操作</h4><p><strong>git init :</strong>创建空的仓库<br><strong>git add：</strong>把文件添加到git仓库（git add.后面加”.”，意思是文件夹下的所有文件）<br><strong>git commit：</strong>把文件提交到仓库(git committ -m “我的注释内容”)</p>
<blockquote>
<p>如果没有写注释 直接提交的话 会进入一个页面</p>
<p>输入注释，然后esc，再输入:wq点击回车就可</p>
</blockquote>
<p><strong>git status:</strong> 查看仓库当前的状态<br><strong>git diff:</strong> 查看区别<br><strong>git log:</strong> 查看最近到最炫的提交日志 （可以加上–pretty=oneline参数）<br><strong>git reset –hard HEAD^:</strong>（回到上一个版本 上两个版本是HEAD^^，上一百个版本是HEAD~100）<br>reset也可以把暂存区的修改撤销掉，重新放回工作区</p>
<p><strong>git reflog:</strong>（显示每一个git的reset命令）</p>
<p><strong>git checkout – filename:</strong>（意思是把该file在工作区的修改全部撤销，如果没有添加到暂存区，就会撤销到和版本库一样；如果添加到了暂存区，就会回到添加到暂存区后的状态）</p>
<p><strong>rm filename:</strong> 删除文件（在文件目录里删除）<br><strong>git rm filename:</strong> 在版本库中删除文件</p>
<blockquote>
<p>git commit -m “删除某一个文件“<br>（在版本库删除文件的时候 要先git rm 再git commit）</p>
</blockquote>
<p>如果在文件目录里删除，想要通过git恢复，就是git checkout – filename</p>
<h4 id="git本地库与远程库交互"><a href="#git本地库与远程库交互" class="headerlink" title="git本地库与远程库交互"></a>git本地库与远程库交互</h4><p>本地git和github（就是远程git版本库托管），之间进行传输，是通过ssh加密，所以要生成ssh key:<br>ssh-keygen -t rsa -C “emailaddress“</p>
<p>使用git clone进行克隆<br>git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:githubUserName/projectName.git</p>
<p>如果已经在本地建立了版本库，可以在github上先建立一个同名的库，然后进行关联<br>关联：<br>git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:githubUserName/projectName.git</p>
<p>将本地仓库的文件上传到远程仓库<br>git push -u origin master<br>如果这个命令出错，可以用：<br>git pull –rebase origin master 把新建版本库的README.md下载下来<br>（【注：pull=fetch+merge]）</p>
<h4 id="git分支"><a href="#git分支" class="headerlink" title="git分支"></a>git分支</h4><p>开始时候，master分支是一条线，git用master指向最新的提交，再用head指向master，<br>每次提交，master分支都会向前移动一步，这样随着不断提交，master分支的线会越来越长</p>
<p>新建分支时候，例如新建分支dev，git会新建一个指针，指向master相同的提交，再把head指向dev，就表示当前分支在dev上</p>
<p>至此，新建分支完成，从现在开始，对工作区的修改和提交都是针对dev分支，比如提交一次后，dev指针往前移动一步，而master指针不变：</p>
<p>当dev分支上的工作完成了，git怎么合并？直接把master指向dev的指针提交，</p>
<p>提交完成后，可以删除dev分支，就是把dev指针给删掉，就只剩下master分支</p>
<p><strong>git checkout -b dev：</strong>新建dev分支，并切换到dev分支</p>
<blockquote>
<p>git checkout命令加上-b代表创建并切换，相当于：<br>git branch dev<br>git checkout dev</p>
</blockquote>
<p>然后用：<br><strong>git branch: </strong>查看当前分支<br>之后修改文件进行添加和提交<br>git add filename<br>git commit filiename -m “注释”</p>
<p>假设此时dev分支的任务完成，切换回master分支：<br>git checkout master<br>这样的话，修改的filename的内容不见了，是因为master的指针的提交点没变，变的是dev的提交点<br>需要把dev分支的工作合并到master分支上：<br><strong>git merge dev</strong><br>合并完成后，可以删除dev分支<br><strong>git branch -d dev</strong><br>删除后 用git branch查看，就只剩master分支了</p>
<p>git checkout 分支名称 意思是切换到该分支</p>
<p>关于解决冲突：<br><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375840202368c74be33fbd884e71b570f2cc3c0d1dcf000" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375840202368c74be33fbd884e71b570f2cc3c0d1dcf000</a></p>
<p><strong>git checkout -D branchName:</strong>（强制删除该分支）</p>
<p><strong>git remote -v:</strong> （显示远程库的信息）</p>
<p><strong>git push origin branchName:</strong> 把该分支推送到远程</p>
<p><strong>git tag tagContent commitVersion:</strong>（在相应的commit版本中添加标签）<br><strong>git show tagName:</strong> 查看该tag的详细信息</p>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>39面试总结</title>
    <url>/2020/03/10/39%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>摘要：面试之前紧张得要死，准备了好多相关方面的问题，结果都没用到。。</p>
</blockquote>
<a id="more"></a>
<p>​        今天面试了石家庄一家公司的web前端工程师，因为之前一面的时候告诉我二面是技术面试，所以我还特意准备了一下，网上找了好多前端的面试题，HTML5的新特性，CSS3如何实现一些界面效果，jQuery相关知识点，Ajax的原理以及jsonp等等等等，因为是校招嘛，还准备了之前学的课程的一些技术点特地复习了一些，线程进程，数据库三大范式之类的。结果面试当天，包括人事在内的总共四位公司领导面试，一句专业性的技术问题都没有问，都是一些简历上的东西让描述一下，感觉一腔热血付诸东流😂。</p>
<p>​        可能之前没有接触过面试，上个学期一直在准备考研，没有实际去了解这些东西，对于校招不是很了解，可能因为是校招，也可能因为公司不是互联网相关的，对于技术方面不像专业互联网公司那样去考核。但是我内心还是很向往互联网公司的，包括工作方式，工作内容等等，所以还是准备学学Java基础或者Python基础，去找找真正的互联网公司应聘一下，接下来几天边做毕设边准备学习一下吧。</p>
<p>继续加油😠</p>
]]></content>
      <categories>
        <category>web前端面试</category>
        <category>总结</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>38HTML基本知识</title>
    <url>/2020/03/09/38HTML%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<blockquote>
<p>摘要：web前端面试HTML篇。</p>
</blockquote>
<a id="more"></a>
<ol>
<li>你是如何理解HTML语义化的？</li>
</ol>
<ul>
<li>比较简单的回答：我理解的语义化就是 标签用在合适的位置，比如段落要用<code>p</code>标签，标题要用<code>h1-h6</code>标签.</li>
<li>更细点的回答：我理解的HTML语义化是正确的标签做正确的事情，能够便于开发者阅读和写出更优雅的代码的同时，让网络爬虫更好的解析。</li>
</ul>
<ol start="2">
<li>为什么要做到语义化？</li>
</ol>
<ul>
<li>有利于SEO，有利于搜索引擎爬虫更好的解析我们的页面，从而获取更多的有效信息，提升网页的权重。</li>
<li>在没有CSS的时候，能够清晰看出网页的结构，增强可读性。</li>
<li>便于团队合作开发和维护，提高开发效率</li>
</ul>
<ol start="3">
<li><p>\&lt;!DOCTYPE> 文档声明，它不是HTML标签，是一个指示web浏览关于页面使用哪个HTML版本编写的指令。&lt;!DOCTYPE&gt; 声明必须位于文档的第一行，位于<html>标签之前。</html></p>
</li>
<li><p>\&lt;html lang=’en’>lang属性设定文档语言。</p>
<p>作用：SEO搜索引擎优化;有助于阅读障碍人士，通过读屏器阅读页面，还可以是\&lt;html lang=’zh-CN’></p>
</li>
<li><p>meta标签的几种用法。</p>
</li>
</ol>
<ul>
<li>meta指定文档编码</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这行代码的意思是，文档用UTF-8编码的，浏览器解析的时候用UTF-8编码解析。</span></span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>适配移动页面</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span>  <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>添加页面描述</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"腾讯网(www.qq.com)是中国最浏览量最大的门户网站"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="6">
<li>HTML5标签。</li>
</ol>
<blockquote>
<p>内容性的标签:</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>          网页的头部</span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span>                网页的导航</span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span>          标签定义文档中的节(比如章节、页眉、页脚或文档中的其他部分。)</span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span>            标签的内容独立于文档的其余部分。比如外部的一篇文章，一个博客，论文等。</span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span>              网页侧边栏</span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>            网页的页脚</span><br></pre></td></tr></table></figure>
<blockquote>
<p>功能性的标签</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span>&gt;</span>  通过脚本绘制图像</span><br><span class="line"><span class="tag">&lt;<span class="name">Audio</span>&gt;</span>    播放音频</span><br><span class="line"><span class="tag">&lt;<span class="name">Video</span>&gt;</span>    播放视频</span><br></pre></td></tr></table></figure>
<ol start="7">
<li>什么是H5？<br> H5是中国人制造的一个专有名词。实际上是指移动端页面，从某种意义上来说它是 HTML5，微信网页，移动PPT的母级。</li>
</ol>
]]></content>
      <categories>
        <category>web前端面试</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>37jQuery基本知识</title>
    <url>/2020/03/08/37jQuery%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<blockquote>
<p>web前端面试jQuery篇。</p>
</blockquote>
<a id="more"></a>
<h4 id="jQuery库中的-是什么："><a href="#jQuery库中的-是什么：" class="headerlink" title="jQuery库中的$()是什么："></a>jQuery库中的$()是什么：</h4><p>$()时jQuery()函数的别称，$()函数可以把任何对象包裹成jQuery对象，然后就可以调用定义在jQuery对象上的多个不同方法。还可以把选择器字符串传入$()函数，它会返回一个匹配所有DOM元素数组的jQuery对象。</p>
<h4 id="如何用jQuery选择网页上的5个-lt-div-元素"><a href="#如何用jQuery选择网页上的5个-lt-div-元素" class="headerlink" title="如何用jQuery选择网页上的5个\&lt;div>元素"></a>如何用jQuery选择网页上的5个\&lt;div>元素</h4><p>如果网页上只有5个\&lt;div>的话，可以直接使用标签选择器进行选择，$(“div”)</p>
<p>如果网页上的\&lt;div>超过5个的话，使用ID选择器或者class选择器进行选择。</p>
<h4 id="jQuery里的ID选择器和class选择器有什么不同"><a href="#jQuery里的ID选择器和class选择器有什么不同" class="headerlink" title="jQuery里的ID选择器和class选择器有什么不同"></a>jQuery里的ID选择器和class选择器有什么不同</h4><p>ID选择器：$(‘#id_name’)</p>
<p>class选择器：$(‘.class_name’)</p>
<h4 id="点击一个按钮时使用jQuery隐藏一个图片"><a href="#点击一个按钮时使用jQuery隐藏一个图片" class="headerlink" title="点击一个按钮时使用jQuery隐藏一个图片"></a>点击一个按钮时使用jQuery隐藏一个图片</h4><p>使用ID或者class定位到图片，然后使用hide()方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#button'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	$(<span class="string">'iamge'</span>).hide();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="document-ready-是个什么函数？为什么要用它？"><a href="#document-ready-是个什么函数？为什么要用它？" class="headerlink" title="$(document).ready() 是个什么函数？为什么要用它？"></a>$(document).ready() 是个什么函数？为什么要用它？</h4><p>ready() 函数用于在文档进入ready状态时执行代码。当DOM 完全加载（例如HTML被完全解析DOM树构建完成时），jQuery允许你执行代码。使用$(document).ready()的最大好处在于它适用于所有浏览器，jQuery帮你解决了跨浏览器的难题。需要进一步了解的用户可以点击 answer链接查看详细讨论。</p>
<h4 id="this-和-this-关键字在-jQuery-中有何不同"><a href="#this-和-this-关键字在-jQuery-中有何不同" class="headerlink" title="$(this) 和 this 关键字在 jQuery 中有何不同"></a>$(this) 和 this 关键字在 jQuery 中有何不同</h4><p>$(this) 返回一个 jQuery 对象，你可以对它调用多个 jQuery 方法，比如用 text() 获取文本，用val() 获取值等等。而 this 代表当前元素，它是 JavaScript 关键词中的一个，表示上下文中的当前 DOM 元素。你不能对它调用 jQuery 方法，直到它被 $() 函数包裹，例如 $(this)。</p>
<h4 id="使用jQuery来提取一个HTML-标记的属性-例如-链接的href"><a href="#使用jQuery来提取一个HTML-标记的属性-例如-链接的href" class="headerlink" title="使用jQuery来提取一个HTML 标记的属性 例如. 链接的href"></a>使用jQuery来提取一个HTML 标记的属性 例如. 链接的href</h4><p>attr() 方法被用来提取任意一个HTML元素的一个属性的值. 你首先需要利用jQuery选择及选取到所有的链接或者一个特定的链接，然后你可以应用attr()方法来获得他们的href属性的值。下面的代码会找到页面中所有的链接并返回href值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&apos;a&apos;).each(function()&#123;</span><br><span class="line">   alert($(this).attr(&apos;href&apos;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="jquery中attr和prop的区别"><a href="#jquery中attr和prop的区别" class="headerlink" title="jquery中attr和prop的区别"></a>jquery中attr和prop的区别</h4><p> 对于html元素本身就带有的固定属性（本身就带有的属性），在处理时，使用prop方法 可以操作布尔类型的属性</p>
<p>对于html元素我们自己定义的dom属性，在处理时，使用attr方法  不可以操作布尔类型的属性</p>
<h4 id="jQuery中-detach-和-remove-方法的区别是什么"><a href="#jQuery中-detach-和-remove-方法的区别是什么" class="headerlink" title="jQuery中 detach() 和 remove() 方法的区别是什么"></a>jQuery中 detach() 和 remove() 方法的区别是什么</h4><p>detach() 和 remove() 方法都被用来移除一个DOM元素, 两者之间的主要不同在于 detach() 会保持对过去被解除元素的跟踪, 因此它可以被取消解除, 而 remove() 方法则会保持过去被移除对象的引用。</p>
<h4 id="利用jQuery来向一个元素中添加和移除CSS类"><a href="#利用jQuery来向一个元素中添加和移除CSS类" class="headerlink" title="利用jQuery来向一个元素中添加和移除CSS类"></a>利用jQuery来向一个元素中添加和移除CSS类</h4><p> .addClass(“类名”)添加元素   .removeClass() 删除样式类  </p>
<h4 id="使用-CDN-加载-jQuery-库的主要优势"><a href="#使用-CDN-加载-jQuery-库的主要优势" class="headerlink" title="使用 CDN 加载 jQuery 库的主要优势"></a>使用 CDN 加载 jQuery 库的主要优势</h4><p>除了报错节省服务器带宽以及更快的下载速度这许多的好处之外, 最重要的是，如果浏览器已经从同一个CDN下载类相同的 jQuery 版本, 那么它就不会再去下载它一次. 因此今时今日，许多公共的网站都将jQuery用于用户交互和动画, 如果浏览器已经有了下载好的jQuery库，网站就能有非常好的展示机会。</p>
<h4 id="jQuery-get-和-jQuery-ajax-方法之间的区别"><a href="#jQuery-get-和-jQuery-ajax-方法之间的区别" class="headerlink" title="jQuery.get() 和 jQuery.ajax() 方法之间的区别"></a>jQuery.get() 和 jQuery.ajax() 方法之间的区别</h4><p>ajax() 方法更强大，更具可配置性, 让你可以指定等待多久，以及如何处理错误。get() 方法是一个只获取一些数据的专门化方法。</p>
<h4 id="jQuery-中的方法链是什么？使用方法链有什么好处"><a href="#jQuery-中的方法链是什么？使用方法链有什么好处" class="headerlink" title="jQuery 中的方法链是什么？使用方法链有什么好处?"></a>jQuery 中的方法链是什么？使用方法链有什么好处?</h4><p>方法链是对一个方法返回的结果调用另一个方法，这使得代码简洁明了，同时由于只对 DOM 进行了一轮查找，性能方面更加出色。</p>
<h4 id="哪种方式更高效：document-getElementbyId-“myId”-还是-“-myId”-？"><a href="#哪种方式更高效：document-getElementbyId-“myId”-还是-“-myId”-？" class="headerlink" title="哪种方式更高效：document.getElementbyId(“myId”) 还是 $(“#myId”)？"></a>哪种方式更高效：document.getElementbyId(“myId”) 还是 $(“#myId”)？</h4><p>第一种，因为它直接调用了 JavaScript 引擎。</p>
]]></content>
      <categories>
        <category>web前端面试</category>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>36CSS相关知识</title>
    <url>/2020/03/07/36CSS%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<blockquote>
<p>摘要：web前端面试CSS篇</p>
</blockquote>
<a id="more"></a>
<ol>
<li><h5 id="CSS-盒子模型，绝对定位和相对定位"><a href="#CSS-盒子模型，绝对定位和相对定位" class="headerlink" title="CSS 盒子模型，绝对定位和相对定位"></a>CSS 盒子模型，绝对定位和相对定位</h5><p><strong>盒子模型</strong>也叫框模型，它规定了元素框处理元素内容、内边距、边框 和 外边距 的方式。在HTML文档中，每个元素都有盒子模型。</p>
<p>CSS盒子模型包含了内容（content）、内边距（padding）、边框（border）、外边距（margin）、宽度（width）、高度（height）几个要素，如图（图为标准盒子模型）</p>
<p><strong>绝对定位（absolute）的概念</strong>：如果设置它的偏移量，将会影响其他元素的位置。设置绝对定位时，元素会相对于离自己最近的设置了绝对定位的父元素进行定位。</p>
<p><strong>相对定位（relative）的概念</strong>：通过设置可使边框“相对于”它的起点移动，不影响其他元素的位置，依旧占据着原来的空间。</p>
</li>
<li><h5 id="清除浮动，什么时候需要清除浮动，清除浮动都有哪些方法"><a href="#清除浮动，什么时候需要清除浮动，清除浮动都有哪些方法" class="headerlink" title="清除浮动，什么时候需要清除浮动，清除浮动都有哪些方法"></a>清除浮动，什么时候需要清除浮动，清除浮动都有哪些方法</h5><p>浮动float最开始出现的意义是为了让文字环绕图片而已，后来用于让三个块级元素并排展示，这时候就出现了浮动</p>
<p>不过，由于float会导致浮动元素的父元素高度坍塌，所以，这时候就要去清除浮动。</p>
<p><strong>清除浮动的方式：</strong><br>解决这种问题的方式主要有两种：</p>
<ol>
<li><p>在父元素内添加冗余元素clear:both;</p>
<p>Clear属性存在的值有left,right,both,none,inherit.<br>如果是left,则表示在左侧不允许出现浮动元素，意思就是对父元素中左边的子元素起作用。</p>
</li>
<li><p>在父元素中设置属性overflow:hidden||auto</p>
<p>增加后，父元素会形成一个块级格式化上下文，即BFC，overflow: hidden本意是将父元素中溢出的内容裁切掉，而BFC中，在计算父元素真实高度时候，也把float元素的高度算入其中，所以在计算裁切的同时，顺带达成了清除浮动的目的。</p>
<p>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然。<br>计算BFC的高度时，浮动元素也参与计算。</p>
</li>
</ol>
</li>
<li><p>如何保持浮层水平垂直居中</p>
<p>利用flexbox</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">　<span class="attribute">justify-content</span>:center;</span><br><span class="line">　<span class="attribute">align-items</span>:center;</span><br><span class="line">　<span class="attribute">display</span>: -webkit-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>position 和 display 的取值和各自的意思和用法</p>
<ul>
<li><p>position属性取值：static(默认)、relative、absolute、fixed、inherit。</p>
<ul>
<li>static；始终处于文档流给予的位置。看起来好像没有用，但它可以快速取消定位，让top，right，bottom，left的值失效。在切换的时候可以尝试这个方法。</li>
<li>除了static值，在其他三个值的设置下，z-index才会起作用。（确切地说z-index只在定位元素上有效）</li>
<li>relative和absolute都可以用于定位，区别在于前者的div还属于正常的文档流，后者已经是脱离了正常文档流，不占据空间位置，不会将父类撑开。定位原点relative是相对于它在正常流中的默认位置偏移，它原本占据的空间任然保留；absolute相对于第一个position属性值不为static的父类。所以设置了position：absolute，其父类的该属性值要注意，而且overflow：hidden也不能乱设置，因为不属于正常文档流，不会占据父类的高度，也就不会有滚动条。</li>
<li>fixed 旧版本IE不支持，定位原点相对于浏览器窗口，而且不能变。常用于header，footer，或者一些固定的悬浮div，随滚动条滚动又稳定又流畅，比JS好多了。fixed可以有很多创造性的布局和作用，兼容性是问题。</li>
<li>inherit。规定从父类继承position属性的值。但是任何版本的IE都不支持该属性值。</li>
</ul>
</li>
<li><p>display属性取值：none、inline、inline-block、block、flex、inherit。</p>
<ul>
<li>display属性规定元素应该生成的框的类型。文档内任何元素都是框，块框或行内框。</li>
<li>none和visiability：hidden都可以隐藏div，区别有点像absolute和relative，前者不占据文档的空间，后者还是占据文档的位置。</li>
<li>inline和block，又叫行内元素和块级元素。表现出来的区别就是block独占一行，在浏览器中通常垂直布局，可以用margin来控制块级元素之间的间距；而inline以水平方式布局，垂直方向的margin和padding都是无效的，大小跟内容一样，且无法设置宽高。inline就像塑料袋，内容怎么样，就长得怎么样；block就像盒子，有固定的宽和高。</li>
<li>inline-block就介于两者之间。</li>
<li>flex 意为”弹性盒布局模型”，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为flex布局。设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。采用flex布局的元素，称为flex容器。它的所有子元素自动成为容器成员，称为flex项目（flex item）。</li>
</ul>
</li>
</ul>
</li>
<li><p>样式的层级关系，选择器优先级，样式冲突，以及抽离样式模块怎么写，说出思路，有无实践经验</p>
<p><strong>样式的层级关系：</strong>一个是权重，另一个就是共用样式和私用样式了，比如说两个ul，它们的子元素除了背景色之外都一样，那可以直接用li {}来定义相同的公用样式，用 .ul_1 li {} ， .ul_2 li {} 来定义不相同的样式。可以根据元素之间的差别来选择用哪种方法。推荐用多层级的方式书写css选择器。</p>
<p><strong>选择器优先级：</strong>（!important&gt;）id选择器&gt;class选择器（属性选择器/伪类选择器）&gt;标签选择器（伪元素选择器） 同类选择符条件下层级越多的优先级越高。优先级就近原则，同权重情况下样式定义最近者为准。载入样式以最后载入的定位为准。</p>
<p><strong>样式冲突：</strong>  如果同个元素有两个或以上冲突的CSS规则，浏览器有一些基本的规则来决定哪一个非常特殊而胜出。  选择器一样的情况下后面的会覆盖前面的属性。</p>
<p><strong>抽离样式模块：</strong>因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异。当然，初始化样式会对SEO有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化。</p>
</li>
<li><p>css3动画效果属性，canvas、svg的区别，CSS3中新增伪类举例</p>
</li>
<li><p>px和em和rem的区别，CSS中link 和@import的区别是?</p>
</li>
<li><p>了解过flex吗?</p>
</li>
</ol>
]]></content>
      <categories>
        <category>web前端面试</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>35Python3使用支付宝接口</title>
    <url>/2020/03/06/35Python3%E4%BD%BF%E7%94%A8%E6%94%AF%E4%BB%98%E5%AE%9D%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<blockquote>
<p>摘要：因为官方没有提供Python的SDK，所以我采用了github上一个开源的第三方SDK。</p>
</blockquote>
<a id="more"></a>
<p><strong>python-alipay-sdk:</strong> <a href="https://github.com/fzlee/alipay" target="_blank" rel="noopener">https://github.com/fzlee/alipay</a></p>
<p><strong>python3使用python-alipay-sdk对接支付宝的时候，可能会出现以下error</strong><br><strong>不支持RSA密钥格式</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alipay = AliPay(</span><br><span class="line">    appid=<span class="string">"2016101900723846"</span>,</span><br><span class="line">    app_notify_url=<span class="literal">None</span>,  <span class="comment"># 默认回调url</span></span><br><span class="line">    app_private_key_string=os.path.join(settings.BASE_DIR, <span class="string">'apps/order/app_private_key.pem'</span>),</span><br><span class="line">    <span class="comment"># 支付宝的公钥，验证支付宝回传消息使用，不是你自己的公钥,</span></span><br><span class="line">    alipay_public_key_string=os.path.join(settings.BASE_DIR, <span class="string">'apps/order/alipay_public_key.pem'</span>),</span><br><span class="line">    sign_type=<span class="string">"RSA2"</span>,  <span class="comment"># RSA 或者 RSA2</span></span><br><span class="line">    debug = <span class="literal">True</span>  <span class="comment"># 默认False</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>运行时出现错误：<strong>ValueError：RSA key format is not supported</strong></p>
<p><strong>解决办法:<br>把公钥和私钥的内容先读出来，然后再用读出来的内容去创建Alipay对象</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app_private_key_string = open(os.path.join(settings.BASE_DIR, <span class="string">'apps/order/app_private_key.pem'</span>)).read()</span><br><span class="line">alipay_public_key_string = open(os.path.join(settings.BASE_DIR, <span class="string">'apps/order/alipay_public_key.pem'</span>)).read()</span><br><span class="line">        </span><br><span class="line">alipay = AliPay(</span><br><span class="line">    appid=<span class="string">"2016101900723846"</span>,</span><br><span class="line">    app_notify_url=<span class="literal">None</span>,  <span class="comment"># 默认回调url</span></span><br><span class="line">    app_private_key_string=app_private_key_string,</span><br><span class="line">    <span class="comment"># 支付宝的公钥，验证支付宝回传消息使用，不是你自己的公钥,</span></span><br><span class="line">    alipay_public_key_string=alipay_public_key_string,</span><br><span class="line">    sign_type=<span class="string">"RSA2"</span>,  <span class="comment"># RSA 或者 RSA2</span></span><br><span class="line">    debug = <span class="literal">True</span>  <span class="comment"># 默认False</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>本来想投机取巧一下，其实按照作者给的文档即可完美运行。</p>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>问题总结</category>
      </categories>
  </entry>
  <entry>
    <title>34python-alipay的SDK应用</title>
    <url>/2020/03/05/34python-alipay%E7%9A%84SDK%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>33使用uwsgi作为服务器</title>
    <url>/2020/03/04/33%E4%BD%BF%E7%94%A8uwsgi%E4%BD%9C%E4%B8%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<blockquote>
<p>摘要：Django自带的只是用于调试的服务器，要部署到云服务器上还是要用第三方的服务器。</p>
</blockquote>
<a id="more"></a>
<h4 id="uwsgi的安装"><a href="#uwsgi的安装" class="headerlink" title="uwsgi的安装"></a>uwsgi的安装</h4><p>切换到虚拟环境中，然后安装:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda install -c conda-forge uwsgi</span><br></pre></td></tr></table></figure>
<h4 id="uwsgi的配置"><a href="#uwsgi的配置" class="headerlink" title="uwsgi的配置"></a>uwsgi的配置</h4><p>修改项目settings.py文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DEBUG = FALSE</span><br><span class="line">ALLOWED_HOSTS = [&apos;*&apos;]</span><br></pre></td></tr></table></figure>
<p>项目中建立一个uwsgi.ini文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"># 使用nginx连接时使用</span><br><span class="line"># socket=127.0.0.1:8080</span><br><span class="line"># 直接做web服务器使用 python manage.py runserver</span><br><span class="line">http=127.0.0.1:8080</span><br><span class="line"># 项目目录</span><br><span class="line">chdir=/home/worksapce/DH_HX</span><br><span class="line"># 项目中的wsgi.py文件的目录, 相当于项目目录, 里面有项目的入口</span><br><span class="line">wsgi-file=DH_HX/wsgi.py</span><br><span class="line"># 指定启动的工作进程数</span><br><span class="line">processes=4</span><br><span class="line"># 指定工作进程中的线程数</span><br><span class="line">threads=2</span><br><span class="line">master=True</span><br><span class="line"># 保存启动之后主进程的pid</span><br><span class="line">pidfile=uwsgi.pid</span><br><span class="line"># 设置uwsgi后台运行,uwsgi.log保存日志信息</span><br><span class="line">daemonize=uwsgi.log</span><br><span class="line"># 设置虚拟环境的路径</span><br><span class="line">virtualenv=/usr/local/anaconda/envs/DjangoTest</span><br></pre></td></tr></table></figure>
<h4 id="启动uwsgi"><a href="#启动uwsgi" class="headerlink" title="启动uwsgi"></a>启动uwsgi</h4><p>启动：uwsgi –ini 配置文件路径 例如：uwsgi –ini uwsgi.ini<br>停止：uwsgi –stop uwsgi.pid 路径 例如：uwsgi –stop uwsgi.pid</p>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Django2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>32使用xadmin替换Django的admin</title>
    <url>/2020/03/03/32%E4%BD%BF%E7%94%A8xadmin%E6%9B%BF%E6%8D%A2Django%E7%9A%84admin/</url>
    <content><![CDATA[<blockquote>
<p>摘要：Django自带有admin后台，但是其风格并不漂亮、功能也不是让人很满意。 所以从网上找了xadmin用来替换。</p>
</blockquote>
<a id="more"></a>
<h4 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h4><p>项目github地址为<a href="https://github.com/sshwsfc/xadmin，其中的xadmin文件夹是源码文件夹。" target="_blank" rel="noopener">https://github.com/sshwsfc/xadmin，其中的xadmin文件夹是源码文件夹。</a></p>
<h4 id="放置文件夹"><a href="#放置文件夹" class="headerlink" title="放置文件夹"></a>放置文件夹</h4><p>把xadmin文件夹放置在项目文件夹下面的，和templates同一级目录即可。</p>
<h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NSTALLED_APPS = [</span><br><span class="line">    &apos;django.contrib.admin&apos;,</span><br><span class="line">    &apos;django.contrib.auth&apos;,</span><br><span class="line">    &apos;django.contrib.contenttypes&apos;,</span><br><span class="line">    &apos;django.contrib.sessions&apos;,</span><br><span class="line">    &apos;django.contrib.messages&apos;,</span><br><span class="line">    &apos;django.contrib.staticfiles&apos;,</span><br><span class="line">    &apos;xadmin&apos;,#添加</span><br><span class="line">    &apos;crispy_forms&apos;,#添加</span><br><span class="line">    &apos;reversion&apos;,#添加(可选)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h4 id="修改主路由"><a href="#修改主路由" class="headerlink" title="修改主路由"></a>修改主路由</h4><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">from django.conf.urls import url,include</span></span><br><span class="line"></span><br><span class="line"><span class="xml"># from django.contrib import admin 注释admin</span></span><br><span class="line"></span><br><span class="line"><span class="xml">#以下四句为新添加内容</span></span><br><span class="line"></span><br><span class="line"><span class="xml">import xadmin </span></span><br><span class="line"><span class="xml">xadmin.autodiscover()</span></span><br><span class="line"></span><br><span class="line"><span class="xml">from xadmin.plugins import xversion</span></span><br><span class="line"><span class="xml">xversion.register_models()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">urlpatterns = [</span></span><br><span class="line"><span class="xml">  # url(r'^admin/', admin.site.urls),注释原路由</span></span><br><span class="line"><span class="xml">  url(r'^xadmin/',include(xadmin.site.urls)), #添加新路由</span></span><br><span class="line"><span class="xml">]</span></span><br></pre></td></tr></table></figure>
<h4 id="在应用中新建adminx-py文件"><a href="#在应用中新建adminx-py文件" class="headerlink" title="在应用中新建adminx.py文件"></a>在应用中新建adminx.py文件</h4><p>文件必须命名为这个名字，用于替换原有的admin文件，以后admin中的操作放到adminx中即可。</p>
<p>到此就可以了，xadmin还是非常方便好用，界面看起来也很舒适。</p>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Django2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>31关于毕设的一些思考</title>
    <url>/2020/03/02/31%E5%85%B3%E4%BA%8E%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<blockquote>
<p>摘要：随着毕业设计的深入，对项目也积累了一些认识，虽然在开发的路上还刚刚起步，但是这几天静下心来敲代码感觉还是爱上了这种产品在手中一步步成型的感觉。</p>
</blockquote>
<a id="more"></a>
<h4 id="做好自己的选择"><a href="#做好自己的选择" class="headerlink" title="做好自己的选择"></a>做好自己的选择</h4><p>程序世界里面可以选择的技术千千万万，每年的新技术也不停的出现，因此做技术注定是学习无止境的，提前选好自己的技术路线是一个首要性的问题，然后逐渐往深挖掘，往广拓展，这要比浅尝辄止重要得多。</p>
<h4 id="做项目应该求快还是应该求好"><a href="#做项目应该求快还是应该求好" class="headerlink" title="做项目应该求快还是应该求好"></a>做项目应该求快还是应该求好</h4><p>从某种目的出发，如果是老师或者课程要求的话，我认为应该注重功能，把更多的精力放到功能实现上去，如果时间富裕，可以充分向外拓展，使用更高级的技术，或者往深挖掘，探索更优的策略，优化项目。</p>
<p>如果是自己做项目，我觉得还是尽量打磨得更加精美比较好，让体验更加好一些，可以尝试研究一些技术之外的东西运用在项目里面，比如项目中如何贴近用户习惯，用户心理等等。</p>
<h4 id="规划自我发展路线"><a href="#规划自我发展路线" class="headerlink" title="规划自我发展路线"></a>规划自我发展路线</h4><p>及早去探索发现自己的发展路线，很多涉及到自身的发展问题不要抱着“水到渠成”，“车到山前必有路”这样的想法，时间越长，我越发现路是自己探索出来的，有时候也许发现是错的，但是总比停在原地要好，时常抬抬头看看前面的路可以更好的走好脚下的路。</p>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>问题总结</category>
      </categories>
  </entry>
  <entry>
    <title>30使用haystack进行全文检索</title>
    <url>/2020/03/01/30%E4%BD%BF%E7%94%A8haystack%E8%BF%9B%E8%A1%8C%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2/</url>
    <content><![CDATA[<blockquote>
<p>摘要：搜索功能升级，使用haystack进行全文搜索。</p>
</blockquote>
<a id="more"></a>
<h4 id="Haystack介绍以及安装"><a href="#Haystack介绍以及安装" class="headerlink" title="Haystack介绍以及安装"></a>Haystack介绍以及安装</h4><p>全文检索不同于特定字段的模糊查询，使用全文检索的效率更高，并且能够对于中文进行分词处理。</p>
<ul>
<li>haystack：全文检索的框架，支持whoosh、solr、Xapian、Elasticsearc四种全文检索引擎，<a href="http://haystacksearch.org/" target="_blank" rel="noopener">官方网站</a></li>
<li>whoosh：纯Python编写的全文搜索引擎，虽然性能比不上sphinx、xapian、Elasticsearc等，但是无二进制包，程序不会莫名其妙的崩溃，对于小型的站点，whoosh已经足够使用，<a href="https://whoosh.readthedocs.io/en/latest/" target="_blank" rel="noopener">whoosh文档</a></li>
<li>jieba：中文分词包，用于语句拆分。</li>
</ul>
<p>1）在虚拟环境中依次安装需要的包。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install django-haystack</span><br><span class="line">pip install whoosh</span><br><span class="line">pip install jieba</span><br></pre></td></tr></table></figure>
<p>2）修改项目settings.py文件，安装应用haystack。</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">INSTALLED_APPS = (</span></span><br><span class="line"><span class="xml">    'haystack',</span></span><br><span class="line"><span class="xml">)</span></span><br></pre></td></tr></table></figure>
<p>3）在test6/settings.py文件中配置搜索引擎。</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">...</span></span><br><span class="line"><span class="xml">HAYSTACK_CONNECTIONS = &#123;</span></span><br><span class="line"><span class="xml">    'default': &#123;</span></span><br><span class="line"><span class="xml">        #使用whoosh引擎</span></span><br><span class="line"><span class="xml">        'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',</span></span><br><span class="line"><span class="xml">        #索引文件路径</span></span><br><span class="line"><span class="xml">        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">#当添加、修改、删除数据时，自动生成索引</span></span><br><span class="line"><span class="xml">HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'</span></span><br></pre></td></tr></table></figure>
<p>4）在项目urls.py中添加搜索的配置。</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">path('search/', include('haystack.urls')),</span></span><br></pre></td></tr></table></figure>
<h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><p>1）在需要索引的应用目录下创建search_indexes.py文件，比如我要索引商品，就在goods目录下新建search_indexes.py文件，注意文件名很重要，不能修改。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> haystack <span class="keyword">import</span> indexes</span><br><span class="line"><span class="keyword">from</span> goods.models <span class="keyword">import</span> GoodsSKU</span><br><span class="line"><span class="comment">#指定对于某个类的某些数据建立索引</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsSKUIndex</span><span class="params">(indexes.SearchIndex, indexes.Indexable)</span>:</span></span><br><span class="line">    text = indexes.CharField(document=<span class="literal">True</span>, use_template=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_model</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> GoodsSKU</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index_queryset</span><span class="params">(self, using=None)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.get_model().objects.all()</span><br></pre></td></tr></table></figure>
<p>2）在templates目录下创建”search/indexes/goods/“目录。</p>
<p><img src="/2020/03/01/30使用haystack进行全文检索/1.png" alt="image-20200301191212079"></p>
<p>3）在上面的目录中创建”goodssku_text.txt”文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 指定根据表中的哪些字段建立索引</span><br><span class="line">&#123;&#123; object.name &#125;&#125;			# 商品名称</span><br><span class="line">&#123;&#123; object.desc &#125;&#125;			# 商品简介</span><br><span class="line">&#123;&#123; object.goods.detail &#125;&#125;	# 商品详情</span><br></pre></td></tr></table></figure>
<p>4）找到虚拟环境下的haystack目录,我的项目环境是Anaconda创建的DjangoTest环境。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\ProgramFiles\Anaconda\envs\DjangoTest\Lib\site-packages\haystack\backends</span><br></pre></td></tr></table></figure>
<p>5）在上面的目录中创建ChineseAnalyzer.py文件。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">from</span> whoosh.analysis <span class="keyword">import</span> Tokenizer, Token</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChineseTokenizer</span><span class="params">(Tokenizer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, value, positions=False, chars=False,keeporiginal=False,removestops=True,start_pos=<span class="number">0</span>, start_char=<span class="number">0</span>, mode=<span class="string">''</span>, **kwargs)</span>:</span></span><br><span class="line">        t=Token(positions,chars,removestops=removestops, mode=mode,**kwargs)</span><br><span class="line">        seglist = jieba.cut(value, cut_all=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> seglist:</span><br><span class="line">            t.original = t.text = w</span><br><span class="line">            t.boost = <span class="number">1.0</span></span><br><span class="line">            <span class="keyword">if</span> positions:</span><br><span class="line">                t.pos = start_pos + value.find(w)</span><br><span class="line">            <span class="keyword">if</span> chars:</span><br><span class="line">                t.startchar = start_char + value.find(w)</span><br><span class="line">                t.endchar = start_char + value.find(w) + len(w)</span><br><span class="line">             <span class="keyword">yield</span> t</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ChineseAnalyzer</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> ChineseTokenizer()</span><br></pre></td></tr></table></figure>
<p>6）复制whoosh_backend.py文件，改为如下名称：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">whoosh_cn_backend.py</span><br></pre></td></tr></table></figure>
<p>7）打开复制出来的新文件，引入中文分析类，内部采用jieba分词。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .ChineseAnalyzer <span class="keyword">import</span> ChineseAnalyzer</span><br></pre></td></tr></table></figure>
<p>8）更改词语分析类。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">查找</span><br><span class="line">analyzer=StemmingAnalyzer()</span><br><span class="line">改为</span><br><span class="line">analyzer=ChineseAnalyzer()</span><br></pre></td></tr></table></figure>
<p>9）初始化索引数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manage.py rebuild_index</span><br></pre></td></tr></table></figure>
<p>初始化之后项目目录中会自动生成whoosh_index目录，目录里是whoosh的索引结构.</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>按照配置，在admin管理中添加数据后，会自动为数据创建索引，可以直接进行搜索，可以先创建一些测试数据。</p>
<p>1）在goods/views.py中定义视图query。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'goods/query.html'</span>)</span><br></pre></td></tr></table></figure>
<p>2）在goods/urls.py中配置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">path(&apos;query/&apos;, views.query),</span><br></pre></td></tr></table></figure>
<p>3）在templates/目录中创建模板query.html。</p>
<blockquote>
<p>参数q表示搜索内容，传递到模板中的数据为query。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>全文检索<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">'get'</span> <span class="attr">action</span>=<span class="string">"/search/"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"q"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"查询"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>4）自定义搜索结果模板：在templates/search/目录下创建search.html。</p>
<p>搜索结果进行分页，视图向模板中传递的上下文如下：</p>
<ul>
<li>query：搜索关键字</li>
<li>page：当前页的page对象</li>
<li>paginator：分页paginator对象</li>
</ul>
<p>视图接收的参数如下：</p>
<ul>
<li>参数q表示搜索内容，传递到模板中的数据为query</li>
<li>参数page表示当前页码</li>
</ul>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>全文检索--结果页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>搜索<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span></span><span class="template-variable">&#123;&#123;query&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="symbol">&amp;nbsp;</span>结果如下：<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;%<span class="name"><span class="name">for</span></span> item <span class="keyword">in</span> page%&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.object.id&#125;&#125;</span><span class="xml">--</span><span class="template-variable">&#123;&#123;item.object.gcontent|<span class="name">safe</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;%<span class="name"><span class="name">empty</span></span>%&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>啥也没找到<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;%<span class="name"><span class="name">endfor</span></span>%&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;%<span class="name"><span class="name">for</span></span> pindex <span class="keyword">in</span> page.paginator.page_range%&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;%<span class="name"><span class="name">if</span></span> pindex == page.number%&#125;</span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123;pindex&#125;&#125;</span><span class="xml"><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;%<span class="name"><span class="name">else</span></span>%&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"?q=</span></span></span><span class="template-variable">&#123;&#123;query&#125;&#125;</span><span class="xml"><span class="tag"><span class="string"><span class="symbol">&amp;amp;</span>page=</span></span></span><span class="template-variable">&#123;&#123;pindex&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123;pindex&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;%<span class="name"><span class="name">endif</span></span>%&#125;</span></span><br><span class="line"><span class="template-tag">&#123;%<span class="name"><span class="name">endfor</span></span>%&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>5）运行服务器，在浏览器中输入如下地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8000/query/</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>毕业设计</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Haystack</tag>
        <tag>Whoosh</tag>
      </tags>
  </entry>
  <entry>
    <title>29疑难问题记录</title>
    <url>/2020/02/29/29%E7%96%91%E9%9A%BE%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<blockquote>
<p>咦，明明在我电脑上就没问题……</p>
</blockquote>
<a id="more"></a>
<p>今天继续修改代码，写完代码之后启动项目发现了一个问题：</p>
<p>Reverse for ‘detail’ with arguments ‘(‘’,)’ not found. 1 pattern(s) tried: [‘…</p>
<p>总之就是url跳转时候正则匹配有问题，查了很长时间的百度，也尝试了很多种办法，但是都没有解决，url跳转感觉也没什么问题。</p>
<p>后来没办法只能创建了一个git分支，然后把主分支版本回退，回退到昨天的版本之后可以正常启动项目了，说明昨天的代码没有问题。</p>
<p>然后我又切到分支版本重新启动，这次没什么问题了，分支版本也能正常启动，就很奇怪，不知道到底是哪里不对，总感觉代码哪里有隐患。</p>
<p>记录一下，等哪天问题再出来了再来填坑。</p>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>问题总结</category>
      </categories>
  </entry>
  <entry>
    <title>28页面静态化以及用户历史浏览记录的添加</title>
    <url>/2020/02/28/28%E9%A1%B5%E9%9D%A2%E9%9D%99%E6%80%81%E5%8C%96%E4%BB%A5%E5%8F%8A%E7%94%A8%E6%88%B7%E5%8E%86%E5%8F%B2%E6%B5%8F%E8%A7%88%E8%AE%B0%E5%BD%95%E7%9A%84%E6%B7%BB%E5%8A%A0/</url>
    <content><![CDATA[<blockquote>
<p>摘要：使用页面静态化防止高并发用户访问时频繁刷新页面导致服务器卡顿，使用redis存储用户浏览记录也是同样的道理，防止用户频繁的数据库写入。</p>
</blockquote>
<a id="more"></a>
<h4 id="页面静态化"><a href="#页面静态化" class="headerlink" title="页面静态化"></a>页面静态化</h4><p>什么时候首页的静态页面需要重新生成？</p>
<p>当管理员后台修改首页信息对应的表格中的数据的时候，需要重新生成首页静态页面。</p>
<h4 id="页面数据的缓存"><a href="#页面数据的缓存" class="headerlink" title="页面数据的缓存:"></a>页面数据的缓存:</h4><p>把页面使用的数据放在缓存中，当再次使用这些数据的时候，先从缓存中读取，如果获取不到，再去查询数据库，减少数据库查询的次数。</p>
<h4 id="历史浏览记录的添加"><a href="#历史浏览记录的添加" class="headerlink" title="历史浏览记录的添加"></a>历史浏览记录的添加</h4><ul>
<li><p>什么时候需要添加历史浏览记录？</p>
<ul>
<li>访问商品的详情页面的时候（在商品详情对应的视图中），需要添加历史浏览记录。</li>
</ul>
</li>
<li><p>什么时候需要获取历史浏览记录？</p>
<ul>
<li>访问用户个人信息页面的时候获取用户历史浏览记录。</li>
</ul>
</li>
<li><p>历史浏览记录需要存储在哪里？</p>
<ul>
<li><p>redis数据库 -&gt; 内存型数据库</p>
<p>使用redis数据库存储历史浏览记录。</p>
</li>
</ul>
</li>
<li><p>redis中存储历史浏览记录的格式？</p>
<ul>
<li><p>string</p>
</li>
<li><p>hash</p>
</li>
<li><p>list</p>
</li>
<li><p>set</p>
</li>
<li><p>zset</p>
<p>存储用户的历史浏览记录时，所有用户的历史浏览记录用同一条数据保存</p>
<p>hash：</p>
<p>​        history：user_用户id: ‘1, 2, 3’</p>
<p>每个用户的历史浏览记录用一条数据结构保存：</p>
<p>list:</p>
<p>​    history_用户id：[3, 2, 1]</p>
<p>添加历史浏览记录时，用户最新的浏览的商品id从列表的左侧插入。</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>问题总结</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>27Linux上安装Anaconda3以及环境迁移</title>
    <url>/2020/02/27/27Linux%E4%B8%8A%E5%AE%89%E8%A3%85Anaconda3%E4%BB%A5%E5%8F%8A%E7%8E%AF%E5%A2%83%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<blockquote>
<p>摘要：安装过程很简单，但是环境迁移很烦，尝试了很多次才成功，记录一下闭坑过程。</p>
</blockquote>
<a id="more"></a>
<h3 id="Anaconda3的安装"><a href="#Anaconda3的安装" class="headerlink" title="Anaconda3的安装"></a>Anaconda3的安装</h3><h4 id="安装包下载"><a href="#安装包下载" class="headerlink" title="安装包下载"></a>安装包下载</h4><ol>
<li>历史版本：<a href="https://repo.continuum.io/archive/" target="_blank" rel="noopener">https://repo.continuum.io/archive/</a></li>
<li>清华镜像源：<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</a></li>
</ol>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bash Anaconda3-5.0.0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>
<p>之后提示接下来是许可协议，按Enter继续</p>
<p>许可协议有很多页，按Q跳到最后，输入yes接受协议</p>
<p>Anaconda默认按照位置是用户的home目录下的anaconda目录，修改为/usr/local目录下(我习惯把安装的软件都放到/usr/local/下面)，Enter开始进行安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[/root/anaconda3] &gt;&gt;&gt; /usr/<span class="built_in">local</span>/anaconda3</span><br></pre></td></tr></table></figure>
<p>等待安装几分钟后，会询问是否将Anaconda目录添加到.bashrc文件的PATH中，输入yes，安装完成后刷新.bashrc文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> /root/.bashrc</span><br></pre></td></tr></table></figure>
<h3 id="环境迁移"><a href="#环境迁移" class="headerlink" title="环境迁移"></a>环境迁移</h3><h4 id="Windows导出环境"><a href="#Windows导出环境" class="headerlink" title="Windows导出环境"></a>Windows导出环境</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda env <span class="built_in">export</span> &gt; environment.yaml</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">conda list -e &gt; requirments.txt</span><br></pre></td></tr></table></figure>
<p>环境会被保存在environment.yaml文件中，我们把文件上传到Linux服务器上面，通过以下命令进行环境复现</p>
<h4 id="Linux环境复现"><a href="#Linux环境复现" class="headerlink" title="Linux环境复现"></a>Linux环境复现</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda env create -f environment.yaml</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">conda install --yes --file requirements.txt</span><br></pre></td></tr></table></figure>
<p>因为是通过conda命令来创建虚拟环境，所以环境中使用到的库也是通过conda命令来安装，但是conda库没有我们需要的库的时候，我们会从pip库里面安装，这就导致conda命令无法安装pip的库，环境迁移不成功，所以我们在进行环境迁移的时候可以直接使用pip导出库，在Linux上进行install。</p>
<h4 id="一种实际上更好用的方法"><a href="#一种实际上更好用的方法" class="headerlink" title="一种实际上更好用的方法"></a>一种实际上更好用的方法</h4><p>pip导出库到requirements.txt</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>
<p>Linux上创建虚拟环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n envname python=3.6</span><br></pre></td></tr></table></figure>
<p>进入虚拟环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> activate envname</span><br></pre></td></tr></table></figure>
<p>使用pip安装需要的包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>
<p>这样就会顺利很多。</p>
<p><strong>Linux上Anaconda进出环境命令比Windows多了一个source</strong></p>
<p>进入环境：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> activate env_name</span><br></pre></td></tr></table></figure>
<p>退出环境：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> deactivate</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Anaconda3</tag>
      </tags>
  </entry>
  <entry>
    <title>26CentOS7上安装MySQL</title>
    <url>/2020/02/26/26CentOS7%E4%B8%8A%E5%AE%89%E8%A3%85MySQL/</url>
    <content><![CDATA[<blockquote>
<p>摘要：安装了一遍居然出错了，只能卸载再安一遍记录一下。</p>
<p>最近发现做东西总要出错，明明很简单的配置过程总要出点问题，偶尔顺利一次都要怀疑到底对不对。</p>
</blockquote>
<a id="more"></a>
<h4 id="为防止安装失败，先说卸载"><a href="#为防止安装失败，先说卸载" class="headerlink" title="为防止安装失败，先说卸载"></a>为防止安装失败，先说卸载</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看yum是否安装过mysql</span></span><br><span class="line">$ yum list installed mysql*</span><br></pre></td></tr></table></figure>
<p>如果显示了列表，说明系统中有MySQL。</p>
<p>根据列表上的名字进行yum卸载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum remove mysql-community-client mysql-community-common mysql-community-libs mysql-community-libs-compat mysql-community-server mysql57-community-release</span><br><span class="line"></span><br><span class="line">$ rm -rf /var/lib/mysql  </span><br><span class="line">$ rm /etc/my.cnf</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>rpm查看安装</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rpm -qa | grep -i mysql</span><br></pre></td></tr></table></figure>
<p>根据列表上的名字进行rpm卸载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rpm -ev mysql57-community-release-el7-9.noarch</span><br><span class="line">$ rpm -ev mysql-community-server-5.7.17-1.el7.x86_64</span><br><span class="line">$ rpm -ev mysql-community-libs-5.7.17-1.el7.x86_64</span><br><span class="line">$ rpm -ev mysql-community-libs-compat-5.7.17-1.el7.x86_64</span><br><span class="line">$ rpm -ev mysql-community-common-5.7.17-1.el7.x86_64</span><br><span class="line">$ rpm -ev mysql-community-client-5.7.17-1.el7.x86_64</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /var/lib/  </span><br><span class="line">$ rm -rf mysql/</span><br></pre></td></tr></table></figure>
<p>注意：这里有可能会抛依赖错误 error:Failed dependencies:，则加上 –nodeps不检查依赖关系删除，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rpm -e --nodeps mysql-community-server-5.7.17-1.el7.x86_64</span><br></pre></td></tr></table></figure>
<p>清除余项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ whereis mysql</span><br><span class="line">mysql: /usr/bin/mysql /usr/lib64/mysql /usr/<span class="built_in">local</span>/mysql /usr/share/mysql /usr/share/man/man1/mysql.1.gz</span><br><span class="line"><span class="comment"># 删除上面的文件夹</span></span><br><span class="line">$ rm -rf /usr/bin/mysql</span><br><span class="line">…</span><br><span class="line">…</span><br></pre></td></tr></table></figure>
<p>删除配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rm –rf /usr/my.cnf</span><br><span class="line">$ rm -rf /root/.mysql_sercret</span><br></pre></td></tr></table></figure>
<p>剩余配置检查</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ chkconfig --list | grep -i mysql</span><br><span class="line">$ chkconfig --del mysqld</span><br></pre></td></tr></table></figure>
<p>根据上面的列表，删除 , 如：mysqld</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol>
<li>安装软件源</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget http://repo.mysql.com/mysql57-community-release-el7-9.noarch.rpm</span><br><span class="line">$ rpm -ivh mysql57-community-release-el7-9.noarch.rpm</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>接下来使用yum安装</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新yum软件包</span></span><br><span class="line">$ yum check-update  </span><br><span class="line"><span class="comment"># 更新系统 </span></span><br><span class="line">$ yum update</span><br><span class="line"> <span class="comment">#安装mysql</span></span><br><span class="line">$ yum install mysql mysql-server</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>安装完成后启动服务</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ service start mysqld</span><br><span class="line">$ systemctl start mysqld.service</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>查看MySQL的运行状态</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ service mysqld status</span><br><span class="line">$ systemctl status mysqld.service</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>获取MySQL的默认密码</li>
</ol>
<p>MySQL5.7安装完成后为root用户随机生成了一个密码，在error log中，关于error log的位置，如果安装的是RPM包，则默认是/var/log/mysqld.log。<br>只有启动过一次mysql才可以查看临时密码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ grep <span class="string">'temporary password'</span> /var/<span class="built_in">log</span>/mysqld.log</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/26/26CentOS7上安装MySQL/1.png" alt="image-20200226214404829"></p>
<p>我这里的密码是rMThio2k&gt;aWp</p>
<ol start="6">
<li>使用默认密码登录并修改密码</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mysql -u root -p</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;root&apos;;</span><br></pre></td></tr></table></figure>
<p>如果密码太简单，会出现一个错误<code>ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</code>,对于这个错误，可以修改两个参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; set global validate_password_policy=0; </span><br><span class="line">mysql&gt; set global validate_password_length=1;</span><br></pre></td></tr></table></figure>
<p>再次执行修改密码就可以了</p>
<ol start="7">
<li>授权可以外网访问MySQL</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;mypassword&apos; WITH GRANT OPTION;</span><br><span class="line">mysql&gt; FLUSH  PRIVILEGES;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>兼职酱前端设计图</title>
    <url>/2020/02/26/%E5%85%BC%E8%81%8C%E9%85%B1%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E5%9B%BE/</url>
    <content><![CDATA[<blockquote>
<p>摘要：以前做的一个项目的前端设计图，图中APP界面均为实际效果图。</p>
</blockquote>
<a id="more"></a>
<p><img src="/2020/02/26/兼职酱前端设计图/1.jpg" alt></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端设计</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis随笔</title>
    <url>/2020/02/25/Redis%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<blockquote>
<p>摘要：把Redis移到服务器端进行配置实现购物车功能。</p>
</blockquote>
<a id="more"></a>
<h4 id="使用外网访问Linux上的Redis"><a href="#使用外网访问Linux上的Redis" class="headerlink" title="使用外网访问Linux上的Redis"></a>使用外网访问Linux上的Redis</h4><p>只需修改/etc/redis.conf文件。将bind注释掉即可。</p>
<p>linux上操作redis相关命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># service命令启动reids脚本</span></span><br><span class="line">service redis start</span><br><span class="line"><span class="comment"># service命令停止redis脚本</span></span><br><span class="line">service redis stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># systemctl命令兼容了service</span></span><br><span class="line">systemctl redis start</span><br><span class="line">systemctl redis stop</span><br><span class="line">systemctl redis restart</span><br></pre></td></tr></table></figure>
<h4 id="使用Redis实现购物车功能"><a href="#使用Redis实现购物车功能" class="headerlink" title="使用Redis实现购物车功能"></a>使用Redis实现购物车功能</h4><ol>
<li><p>什么时候添加购物车记录？</p>
<p>当用户点击加入购物车时需要添加购物车记录</p>
</li>
<li><p>什么时候需要获取购物车记录？</p>
<p>使用到购物车中数据和访问购物车页面的时候需要获取购物车记录</p>
</li>
<li><p>使用什么存储购物车记录?</p>
<p>Redis存储购物车记录</p>
</li>
<li><p>分析存储购物车记录的格式？</p>
<p>一个用户的购物车记录用户一条数据保存</p>
<p>hash:</p>
<p>‘cart_用户id’：[‘sku_id’：商品数目，’sku_id’：商品数目]</p>
<p>例子:</p>
<p>‘cart_1’：[‘1’：3，’2’：5]</p>
</li>
</ol>
<ol start="5">
<li><p>获取用户购物车中商品总数目：</p>
<p>使用hlen</p>
</li>
</ol>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>25FastDFS+Nginx学习记录</title>
    <url>/2020/02/25/25FastDFS+Nginx%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<blockquote>
<p>摘要：简单介绍一下FastDFS和Nginx。</p>
</blockquote>
<a id="more"></a>
<h3 id="FastDFS"><a href="#FastDFS" class="headerlink" title="FastDFS"></a>FastDFS</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>FastDFS 是一个开源的高性能分布式文件系统（DFS）。 它的主要功能包括：文件存储，文件同步和文件访问，以及高容量和负载平衡。主要解决了海量数据存储问题，特别适合以中小文件（建议范围：4KB &lt; file_size &lt;500MB）为载体的在线服务。</p>
<p>FastDFS 系统有三个角色：跟踪服务器(Tracker Server)、存储服务器(Storage Server)和客户端(Client)。</p>
<p>　　<strong>Tracker Server</strong>：跟踪服务器，主要做调度工作，起到均衡的作用；负责管理所有的 storage server和 group，每个 storage 在启动后会连接 Tracker，告知自己所属 group 等信息，并保持周期性心跳。</p>
<p>　　<strong>Storage Server</strong>：存储服务器，主要提供容量和备份服务；以 group 为单位，每个 group 内可以有多台 storage server，数据互为备份。</p>
<p>　　<strong>Client</strong>：客户端，上传下载数据的服务器，也就是我们自己的项目所部署在的服务器。</p>
<p><img src="/2020/02/25/25FastDFS+Nginx学习记录/1.png" alt="img"></p>
<h4 id="FastDFS的存储策略"><a href="#FastDFS的存储策略" class="headerlink" title="FastDFS的存储策略"></a>FastDFS的存储策略</h4><p>为了支持大容量，存储节点（服务器）采用了分卷（或分组）的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了冗余备份和负载均衡的作用。</p>
<p>在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。</p>
<h4 id="FastDFS的上传过程"><a href="#FastDFS的上传过程" class="headerlink" title="FastDFS的上传过程"></a>FastDFS的上传过程</h4><p>FastDFS向使用者提供基本文件访问接口，比如upload、download、append、delete等，以客户端库的方式提供给用户使用。</p>
<p>Storage Server会定期的向Tracker Server发送自己的存储信息。当Tracker Server Cluster中的Tracker Server不止一个时，各个Tracker之间的关系是对等的，所以客户端上传时可以选择任意一个Tracker。</p>
<p>当Tracker收到客户端上传文件的请求时，会为该文件分配一个可以存储文件的group，当选定了group后就要决定给客户端分配group中的哪一个storage server。当分配好storage server后，客户端向storage发送写文件请求，storage将会为文件分配一个数据存储目录。然后为文件分配一个fileid，最后根据以上的信息生成文件名存储文件。</p>
<p><img src="/2020/02/25/25FastDFS+Nginx学习记录/2.png" alt></p>
<h4 id="FastDFS的文件同步"><a href="#FastDFS的文件同步" class="headerlink" title="FastDFS的文件同步"></a>FastDFS的文件同步</h4><p>写文件时，客户端将文件写至group内一个storage server即认为写文件成功，storage server写完文件后，会由后台线程将文件同步至同group内其他的storage server。</p>
<p>每个storage写文件后，同时会写一份binlog，binlog里不包含文件数据，只包含文件名等元信息，这份binlog用于后台同步，storage会记录向group内其他storage同步的进度，以便重启后能接上次的进度继续同步；进度以时间戳的方式进行记录，所以最好能保证集群内所有server的时钟保持同步。</p>
<p>storage的同步进度会作为元数据的一部分汇报到tracker上，tracke在选择读storage的时候会以同步进度作为参考。</p>
<h4 id="FastDFS的文件下载"><a href="#FastDFS的文件下载" class="headerlink" title="FastDFS的文件下载"></a>FastDFS的文件下载</h4><p>客户端uploadfile成功后，会拿到一个storage生成的文件名，接下来客户端根据这个文件名即可访问到该文件。</p>
<p><img src="/2020/02/25/25FastDFS+Nginx学习记录/3.png" alt></p>
<p>跟upload file一样，在downloadfile时客户端可以选择任意tracker server。tracker发送download请求给某个tracker，必须带上文件名信息，tracke从文件名中解析出文件的group、大小、创建时间等信息，然后为该请求选择一个storage用来服务读请求。</p>
<h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p><strong>Nginx：</strong>Nginx（“engine x”），Nginx是俄罗斯人Igor Sysoev编写的一款高性能的 HTTP 和反向代理服务器。也是一个IMAP/POP3/SMTP代理服务器，也就是说，Nginx本身就可以托管网站，进行HTTP服务处理，也可以作为反向代理服务器使用。</p>
<p>Nginx就是反向代理服务器。</p>
<p>代理服务器是介于客户端和Web服务器之间的另一台服务器，有了它之后，浏览器不是直接到Web服务器去取回网页，而是通过向代理服务器发送请求，信号会先送到代理服务器，由代理服务器来取回浏览器所需要的信息并传送给你的浏览器。</p>
<p><img src="/2020/02/25/25FastDFS+Nginx学习记录/4.png" alt></p>
<p>一个完整的代理请求过程为：客户端首先与代理服务器创建连接，然后根据代理服务器所使用的代理协议，请求对目标服务器创建连接、或则获得目标服务器的指定资源。</p>
<p>正向代理是一个位于客户端和原始服务器之间的服务器，为了从原始服务器取的内容，客户端向代理发送一个请求并指定目标（原始服务器），然后代理向原始服务器转交请求并将获得的内容返回给客户端，客户端必须要进行一些特别的设置才能使用正向代理。</p>
<p>反向代理服务器：在服务器端接收客户端的请求，然后把请求分发给具体的服务器进行处理，然后再将服务器的响应结果反馈给客户端。Nginx就是其中的一种反向代理服务器软件。</p>
<p><strong>简单的说：</strong></p>
<p>正向代理：客户端知道服务器端，通过代理端连接服务器端。代理端代理的是服务器端。<br>反向代理：所谓反向，是对正向而言的。服务器端知道客户端，客户端不知道服务器端，通过代理端连接服务器端。代理端代理的是客户端。代理对象刚好相反，所以叫反向代理。</p>
<h4 id="Nginx的特点"><a href="#Nginx的特点" class="headerlink" title="Nginx的特点"></a>Nginx的特点</h4><p>（1）跨平台：Nginx 可以在大多数 Unix like OS编译运行，而且也有Windows的移植版本。<br>（2）配置异常简单，非常容易上手。配置风格跟程序开发一样，神一般的配置<br>（3）非阻塞、高并发连接：数据复制时，磁盘I/O的第一阶段是非阻塞的。官方测试能够支撑5万并发连接，在实际生产环境中跑到2～3万并发连接数.(这得益于Nginx使用了最新的epoll模型)<br>（4）事件驱动：通信机制采用epoll模型，支持更大的并发连接。<br>（5）master/worker结构：一个master进程，生成一个或多个worker进程<br>（6）内存消耗小：处理大并发的请求内存消耗非常小。在3万并发连接下，开启的10个Nginx 进程才消耗150M内存（15M*10=150M）<br>（7）成本低廉：Nginx为开源软件，可以免费使用。而购买F5 BIG-IP、NetScaler等硬件负载均衡交换机则需要十多万至几十万人民币<br>（8）内置的健康检查功能：如果 Nginx Proxy 后端的某台 Web 服务器宕机了，不会影响前端访问。<br>（9）节省带宽：支持 GZIP 压缩，可以添加浏览器本地缓存的 Header 头。<br>（10）稳定性高：用于反向代理，宕机的概率微乎其微</p>
<h4 id="使用FastDFS-Nginx搭建文件分布系统"><a href="#使用FastDFS-Nginx搭建文件分布系统" class="headerlink" title="使用FastDFS + Nginx搭建文件分布系统"></a>使用FastDFS + Nginx搭建文件分布系统</h4><p>海量存储，存储容量扩展方便。</p>
<p>文件内容重复。</p>
<p>结合nginx提高网站提供图片的效率。</p>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
        <tag>FastDFS</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>24Python与FDFS交互时遇到的问题</title>
    <url>/2020/02/24/24Python%E4%B8%8EFDFS%E4%BA%A4%E4%BA%92%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>今天使用python在本地和服务器的FastDFS进行交互，遇到了几个问题，记录一下。</p>
</blockquote>
<a id="more"></a>
<h4 id="python与FDFS交互时报错"><a href="#python与FDFS交互时报错" class="headerlink" title="python与FDFS交互时报错"></a>python与FDFS交互时报错</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> fdfs_client.client <span class="keyword">import</span> Fdfs_client</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client = Fdfs_client(<span class="string">'/etc/fdfs/client.conf'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ret = client.upload_by_filename(<span class="string">'test'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ret</span><br><span class="line">&#123;<span class="string">'Group name'</span>:<span class="string">'group1'</span>,<span class="string">'Status'</span>:<span class="string">'Upload successed.'</span>, <span class="string">'Remote file_id'</span>:<span class="string">'group1/M00/00/00/</span></span><br><span class="line"><span class="string">	wKjzh0_xaR63RExnAAAaDqbNk5E1398.py'</span>,<span class="string">'Uploaded size'</span>:<span class="string">'6.0KB'</span>,<span class="string">'Local file name'</span>:<span class="string">'test'</span></span><br><span class="line">	, <span class="string">'Storage IP'</span>:<span class="string">'192.168.243.133'</span>&#125;</span><br></pre></td></tr></table></figure>
<p>在测试FDFS与python交互时，输入以上代码，这是官方文档的代码，当我输入<br>ret = client.upload_by_filename(‘test’)后，就报错了。</p>
<p>错误如下：<br>Traceback (most recent call last):<br>File “”, line 1, in<br>File “/root/.virtualenvs/Cole_py3/lib/python3.6/site-packages/fdfs_client/client.py”, line 88, in upload_by_filename<br>raise DataError(errmsg + ‘(uploading)’)<br>fdfs_client.exceptions.DataError: [-] Error: test1 is not a file.(uploading)</p>
<p>主要还是太天真了，以为按照官方测试代码输入就没错，后来查看了client.py的代码，才发现，ret = client.upload_by_filename(’ ‘) 括号里面填写的是要在你本机存在的文件名或者文件路径<br>ret = client.upload_by_filename(’ /home/cole/python/test/test1.py ‘)<br>ret = client.upload_by_filename(’ test1.py ‘)<br>这两种写法都可以，前提是test1.py是要存在你本机</p>
<h4 id="type-object-argument-after-must-be-a-mapping-not-str"><a href="#type-object-argument-after-must-be-a-mapping-not-str" class="headerlink" title="type object argument after ** must be a mapping, not str"></a>type object argument after ** must be a mapping, not str</h4><p>django自定义fdfs文件存储时报了这个错误。</p>
<p>创建client实例对象的时候不能直接传入配置文件的地址字符串,否则报错.<br>错误代码:TypeError: type object argument after ** must be a mapping, not str</p>
<p>解决办法：通过模块内<strong>get_tracker_conf</strong>函数, 获取配置文件后传入。</p>
<p>原代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fdfs_client.client <span class="keyword">import</span> Fdfs_client</span><br><span class="line">	client = （./utils/fdfs/client.con<span class="string">f')</span></span><br><span class="line"><span class="string">	ret = client.upload_by_buffer(content.read())</span></span><br></pre></td></tr></table></figure>
<p>修改后代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fdfs_client.client <span class="keyword">import</span> Fdfs_client, get_tracker_conf</span><br><span class="line">　　tracker_path = get_tracker_conf(<span class="string">'./utils/fdfs/client.conf'</span>)</span><br><span class="line">　　client = Fdfs_client(tracker_path)</span><br><span class="line">　　ret = client.upload_by_buffer(content.read())</span><br></pre></td></tr></table></figure>
<h4 id="python3使用fdfs上传文件时报str-returned-non-string-type-bytes-错误"><a href="#python3使用fdfs上传文件时报str-returned-non-string-type-bytes-错误" class="headerlink" title="python3使用fdfs上传文件时报str returned non-string (type bytes)错误"></a>python3使用fdfs上传文件时报<strong>str</strong> returned non-string (type bytes)错误</h4><p>上传成功后返回一个字典, 其中’Remote file_id’键对应的值由旧版模块string类型更改为byte类型。所以, 返回的文件id是byte类型，</p>
<p>原代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = result.get(<span class="string">'Remote file_id'</span>)</span><br><span class="line"><span class="keyword">return</span> filename</span><br></pre></td></tr></table></figure>
<p>修改后代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = result.get(<span class="string">'Remote file_id'</span>)</span><br><span class="line"><span class="keyword">return</span> filename.decode()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>问题总结</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
        <tag>FastDFS</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建FastDFS及Nginx过程中遇到的问题</title>
    <url>/2020/02/23/%E6%90%AD%E5%BB%BAFastDFS%E5%8F%8ANginx%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>摘要：安装个Nginx，配置文件那里整整用了一天时间，还是无法映射到8888端口，只能使用80端口实现了，无奈。</p>
</blockquote>
<a id="more"></a>
<h4 id="本地上传文件到FastDFS命令上传报错：ERROR-file-connection-pool-c-line-130-connect-to-x-x-x-x-22122-fail"><a href="#本地上传文件到FastDFS命令上传报错：ERROR-file-connection-pool-c-line-130-connect-to-x-x-x-x-22122-fail" class="headerlink" title="本地上传文件到FastDFS命令上传报错：ERROR - file: connection_pool.c, line: 130, connect to x.x.x.x:22122 fail"></a>本地上传文件到FastDFS命令上传报错：ERROR - file: connection_pool.c, line: 130, connect to x.x.x.x:22122 fail</h4><p><strong>问题分析</strong>：错误信息提示错误的原因为连接超时，连接超时有两种可能的原因，一种是云服务器拒绝我们的访问，另一种是我们服务器电脑开启了开机启动防火墙。<br><strong>注：不管你进行什么操作，只要是报了类似连接失败错误代号，大部分都是由于两种原因造成</strong></p>
<p><strong>解决方法一</strong>：<br>故先检查云服务是否对我们的22122端口（FastDFS的默认端口）进行了拦截，有的话创建安全组对该端口进行放行应用到实例上再次上传就能解决上传成功(这里我设置为所有端口都开放)。</p>
<p><img src="/2020/02/23/搭建FastDFS及Nginx过程中遇到的问题/1.png" alt="image-20200223114229884"></p>
<p><strong>解决方法二：</strong><br>由于出现该问题的原因是因为自己的防火墙没有开启，故开启防火墙即可解决问题，Linux上的指令如下：<br>1、关闭防火墙：</p>
<p><code>sudo systemctl stop firewalld.service</code><br>2、关闭开机启动：</p>
<p><code>sudo systemctl disable firewalld.service</code></p>
<p>再次上传：</p>
<p><img src="/2020/02/23/搭建FastDFS及Nginx过程中遇到的问题/2.png" alt="image-20200223114409066"></p>
<p>成功</p>
<h4 id="nginx-conf的配置"><a href="#nginx-conf的配置" class="headerlink" title="nginx.conf的配置"></a>nginx.conf的配置</h4><p>按照文档进行配置，但是无论如何都打不开8888的端口，只能改到默认的80端口，具体配置如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  x.x.x.x;</span><br><span class="line"></span><br><span class="line">        location ~/group[0-9]/ &#123;</span><br><span class="line">            ngx_fastdfs_module;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>问题总结</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
        <tag>FastDFS</tag>
        <tag>Linux</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>23搭建FastDFS+Nginx分布式文件系统</title>
    <url>/2020/02/23/23%E6%90%AD%E5%BB%BAFastDFS-Nginx%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<blockquote>
<p>摘要：安装一个分布式文件系统花了一天时间，不过总算是搞出来了。</p>
</blockquote>
<a id="more"></a>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>我用的是Linux版本是centos7<br>准备搭建所需要的gz包：<br>    nginx-1.8.1.tar.gz<br>    fastdfs-master.zip<br>    fastdfs-nginx-module-master.zip<br>    libfastcommon-master.zip</p>
<h3 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y lrzsz</span><br></pre></td></tr></table></figure>
<p>安装完成之后可以使用<code>rz</code>命令从本地向云服务器上传文件</p>
<h3 id="安装FastDFS"><a href="#安装FastDFS" class="headerlink" title="安装FastDFS"></a>安装FastDFS</h3><h4 id="安装fastdfs依赖包"><a href="#安装fastdfs依赖包" class="headerlink" title="安装fastdfs依赖包"></a>安装fastdfs依赖包</h4><ol>
<li><p>将libfastcommon解压到/usr/local/文件夹下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ unzip libfastcommon-master.zip -d /usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>进入到libfastcommon-master目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/libfastcommon-master</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行./make.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./make.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行./make.sh install</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./make.sh install</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="安装fastdfs"><a href="#安装fastdfs" class="headerlink" title="安装fastdfs"></a>安装fastdfs</h4><ol>
<li><p>解压缩fastdfs-master.zip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ unzip fastdfs-master.zip -d /usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>进入到fastdfs-master目录中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/fasdfs-master</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行./make.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./make.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行./make.sh install</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./make.sh install</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="配置跟中服务器tracker"><a href="#配置跟中服务器tracker" class="headerlink" title="配置跟中服务器tracker"></a>配置跟中服务器tracker</h4><ol>
<li><p>将tracker.conf文件移动到/etc/fdfs/中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cp /etc/fdfs/tracker.conf.sample /etc/fdfs/tracker.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>在/usr/local/python3/目录中创建目录/fastdfs/tracker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir -p /usr/<span class="built_in">local</span>/python3/fastdfs/tracker</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑/etc/fdfs/tracker.conf配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/fdfs/tracker.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">base_path=/usr/<span class="built_in">local</span>/python3/fastdfs/tracker</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="配置储存服务器storage"><a href="#配置储存服务器storage" class="headerlink" title="配置储存服务器storage"></a>配置储存服务器storage</h4><ol>
<li><p>将storage.conf文件移动到/etc/fdfs/中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cp /etc/fdfs/storage.conf.sample /etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>在/usr/local/python3/fastdfs/目录中创建目录storage</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir -p /usr/<span class="built_in">local</span>/python3/fastdfs/storage</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑/etc/fdfs/storage.conf配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">base_path=/usr/<span class="built_in">local</span>/python3/fastdfs/storage</span><br><span class="line">store_path0=/usr/<span class="built_in">local</span>/python3/fastdfs/storage</span><br><span class="line"><span class="comment"># 此处x.x.x.x为自己的云服务器的ip地址</span></span><br><span class="line">tracker_server=x.x.x.x:22122</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动tracker和storage</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ service fdfs_trackerd start</span><br><span class="line">$ service fdfs_storaged start</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h4><ol>
<li><p>将client.conf文件移动到/etc/fdfs/文件夹下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cp /etc/fdfs/client.conf.sample /etc/fdfs/client.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑/etc/fdfs/client.conf配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/fdfs/client.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">base_path=/usr/<span class="built_in">local</span>/python3/fastdfs/tracker</span><br><span class="line"><span class="comment"># 此处x.x.x.x为自己的云服务器的ip地址</span></span><br><span class="line">tracker_server=x.x.x.x:22122</span><br></pre></td></tr></table></figure>
</li>
<li><p>上传文件到/usr/local/文件夹下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line">$ rz</span><br></pre></td></tr></table></figure>
</li>
<li><p>上传文件测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ fdfs_upload_file /etc/fdfs/client.conf /usr/<span class="built_in">local</span>/1.jpg</span><br></pre></td></tr></table></figure>
</li>
<li><p>正确返回内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">group1/M00/00/00/rBBVCV5SUomAZGXzAAJsTkkrCMI580.jpg</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="安装nginx及fastdfs-nginx-module"><a href="#安装nginx及fastdfs-nginx-module" class="headerlink" title="安装nginx及fastdfs-nginx-module"></a>安装nginx及fastdfs-nginx-module</h3><h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4><ol>
<li><p>将nginx-1.8.1.tar.gz解压至/usr/local</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -zxvf nginx-1.8.1.tar.gz -C /usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>进入nginx-1.8.1目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx-1.8.1</span><br></pre></td></tr></table></figure>
</li>
<li><p>参数配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./configure --prefix=/usr/<span class="built_in">local</span>/nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/sbin</span><br><span class="line">$ nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果启动成功可以在浏览器访问自己的服务器</p>
<p><img src="/2020/02/23/23搭建FastDFS-Nginx分布式文件系统/1.png" alt="image-20200223180515518"></p>
</li>
</ol>
<h4 id="添加fastdfs-nginx-module"><a href="#添加fastdfs-nginx-module" class="headerlink" title="添加fastdfs-nginx-module"></a>添加fastdfs-nginx-module</h4><ol>
<li><p>将fastdfs-nginx-module-master.zip解压到/usr/local/文件夹下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ unzip fastdfs-nginx-module-master.zip -d /usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在nginx中添加该模块 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx-1.8.1</span><br><span class="line">$ ./configure --add-module=/usr/<span class="built_in">local</span>/fastdfs-nginx-module/src</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改fastdfs-nginx-module配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/fastdfs-nginx-module/src</span><br><span class="line">$ vim config</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CORE_INCS=<span class="string">"<span class="variable">$CORE_INCS</span> /usr/include/fastdfs /usr/include/fastcommon"</span></span><br><span class="line">CORE_LIBS=<span class="string">"<span class="variable">$CORE_LIBS</span> -L/usr/lib -lfastcommon -lfdfsclient"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将src目录下的mod_fastdfs.conf文件复制到/etc/fdfs/目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cp /usr/<span class="built_in">local</span>/fastdfs-nginx-module-master/src/mod_fastdfs.conf /etc/fdfs</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改/etc/fdfs/mod_fastdfs.conf的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/fdfs/mod_fastdfs.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">connect_timeout=10</span><br><span class="line"><span class="comment"># 此处x.x.x.x为自己的云服务器的ip地址</span></span><br><span class="line">tracker_server=x.x.x.x:22122</span><br><span class="line">url_have_group_name=<span class="literal">true</span></span><br><span class="line">store_path0=/usr/<span class="built_in">local</span>/python3/fastdfs/storage</span><br></pre></td></tr></table></figure>
</li>
<li><p>将fastdfs-master/conf/目录下的两个文件复制到/etc/fdfs/中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/fastdfs-master/conf</span><br><span class="line">$ cp http.conf /etc/fdfs/http.conf</span><br><span class="line">$ cp mime.types /etc/fdfs/mime.types</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入/usr/local/nginx/conf目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改nginx.conf配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim nginx.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  x.x.x.x;</span><br><span class="line"></span><br><span class="line">        location ~/group[0-9]/ &#123;</span><br><span class="line">            ngx_fastdfs_module;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新启动nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/sbin</span><br><span class="line">$ nginx -s reload</span><br></pre></td></tr></table></figure>
</li>
<li><p>将之前上传图片时的返回内容复制到浏览器地址栏可以查看到文件</p>
<p><img src="/2020/02/23/23搭建FastDFS-Nginx分布式文件系统/2.png" alt="image-20200223182448549"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
        <tag>FastDFS</tag>
        <tag>Linux</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>22Linux中部署项目环境</title>
    <url>/2020/02/22/22Linux%E4%B8%AD%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<blockquote>
<p>经常用Linux系统进行开发，但是没有专门记录过。今天买了阿里云的服务器准备把项目部署到云端，把部署环境的过程记录一下。</p>
</blockquote>
<a id="more"></a>
<p>安装环境</p>
<blockquote>
<p>系统版本：CentOS 7.6（自带Python2.7）<br>安装版本：Python3.6<br>安装插件：virtualenv、virtualenvwrapper</p>
</blockquote>
<h4 id="一、安装Python3"><a href="#一、安装Python3" class="headerlink" title="一、安装Python3"></a>一、安装Python3</h4><p>由于CentOS7原本就安装了Python2，而且这个Python2不能被删除，因为有很多系统命令，比如yum都要用到。所以我们要额外安装Python3。</p>
<p>我们先来查看python安装位置，一般是位于<code>/usr/bin/python</code>目录下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ which python</span><br><span class="line">&gt;&gt; /usr/bin/python</span><br></pre></td></tr></table></figure>
<p>下面介绍安装Python3的方法：</p>
<p><strong>1. 安装依赖包</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yum -y groupinstall &quot;Development tools&quot;</span><br><span class="line">$ yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span><br></pre></td></tr></table></figure>
<p><strong>2.下载Python3安装包</strong><br>我这里下载的是Python3.6.2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ wget https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tar.xz</span><br></pre></td></tr></table></figure>
<p><strong>3. 新建python3存放目录</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir /usr/<span class="built_in">local</span>/python3</span><br></pre></td></tr></table></figure>
<p><strong>4. 安装Python3</strong><br>解压压缩包，进入解压目录，指定安装目录，安装Python3。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -xvJf  Python-3.6.2.tar.xz</span><br><span class="line">$ <span class="built_in">cd</span> Python-3.6.2</span><br><span class="line">$ ./configure --prefix=/usr/<span class="built_in">local</span>/python3</span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure>
<p>安装Python3时，会自动安装pip。假如没有，需要自己手动安装。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yum -y install python-pip</span><br></pre></td></tr></table></figure>
<p><strong>5. 创建软链接</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ln -s /usr/<span class="built_in">local</span>/python3/bin/python3 /usr/bin/python3</span><br><span class="line">$ ln -s /usr/<span class="built_in">local</span>/python3/bin/pip3 /usr/bin/pip3</span><br></pre></td></tr></table></figure>
<p><strong>6. 安装完成，输入<code>python3</code>测试</strong></p>
<p><img src="/2020/02/22/22Linux中部署项目环境/1.png" alt="image-20200222184903576"></p>
<p>安装成功</p>
<h4 id="二、创建虚拟环境"><a href="#二、创建虚拟环境" class="headerlink" title="二、创建虚拟环境"></a>二、创建虚拟环境</h4><p><code>virtualenv</code>是一个可以在同一计算机中隔离多个python版本的工具。有时，两个不同的项目可能需要不同版本的python，如 python2.7 / python3.6 ，但是如果都装到一起，经常会导致问题。<code>virtualenv</code>能够用于创建独立的Python虚拟环境，多个Python相互独立，互不影响。<br><code>virtualenvwrapper</code>这个软件包可以让我们管理虚拟环境变得更加简单。不用再跑到某个目录下通过<code>virtualenv</code>来创建虚拟环境，并且激活的时候也要跑到具体的目录下去激活。</p>
<p>使用<code>pip</code>安装包前，先更新<code>pip</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pip3 install --upgrade pip</span><br></pre></td></tr></table></figure>
<p><strong>1. 安装virtualenv、virtualenvwrapper</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pip3 install virtualenv</span><br><span class="line">$ pip3 install virtualenvwrapper</span><br></pre></td></tr></table></figure>
<p><strong>2. 进入<code>.bashrc</code>文件中，定义<code>virtualenvwrapper</code>路径</strong></p>
<p>使用vim编辑<code>.bashrc</code>文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ vim ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>在文末填入以下代码并保存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定virtualenvwrapper执行的python版本</span></span><br><span class="line"><span class="built_in">export</span> VIRTUALENVWRAPPER_PYTHON=/usr/<span class="built_in">local</span>/python3/bin/python3</span><br><span class="line"><span class="comment"># 指定虚拟环境存放目录</span></span><br><span class="line"><span class="built_in">export</span> WORKON_HOME=~/Envs    </span><br><span class="line"><span class="comment"># 指定virtualenv的目录</span></span><br><span class="line"><span class="built_in">export</span> VIRTUALENVWRAPPER_VIRTUALENV=/usr/loacl/python3/bin/virtualenv</span><br><span class="line"><span class="comment"># virtualenvwrapper.sh所在目录</span></span><br><span class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/python3/bin/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure>
<p><strong>3. 运行<code>.bashrc</code>文件</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<p><strong>4. 创建虚拟环境</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkvirtualenv py3-env</span><br></pre></td></tr></table></figure>
<p>也可指定虚拟环境的python版本</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ mkvirtualenv --python=<span class="regexp">/usr/</span>local/python3/bin/python3 my_prj</span><br></pre></td></tr></table></figure>
<h4 id="导入项目所需的库文件"><a href="#导入项目所需的库文件" class="headerlink" title="导入项目所需的库文件"></a>导入项目所需的库文件</h4><p><strong>1. 进入虚拟环境中，然后进入到项目所在目录，安装好相应的包</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pip install -r requirements.txt</span><br></pre></td></tr></table></figure>
<p>附：自动生成项目安装包的依赖文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>
<p>虚拟环境搭建完成！</p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>21Django2.0部分问题总结</title>
    <url>/2020/02/21/21Django2-0%E9%83%A8%E5%88%86%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>摘要：记录一下今天遇到的问题，导包时用相对路径，pycharm不会报错，但项目启动不起来，用绝对路径可以启动起来，但pycharm会报错。</p>
</blockquote>
<a id="more"></a>
<h4 id="python引入模块报错ValueError-attempted-relative-import-beyond-top-level-package"><a href="#python引入模块报错ValueError-attempted-relative-import-beyond-top-level-package" class="headerlink" title="python引入模块报错ValueError: attempted relative import beyond top-level package"></a>python引入模块报错ValueError: attempted relative import beyond top-level package</h4><p>​        原因：导包时使用了相对路径，比如 <code>from . import XXX</code>或者<code>from .. import XXX</code></p>
<p>​        在涉及到相对导入时，package所对应的文件夹必须正确的被python解释器视作package，而不是普通文件夹。否则由于不被视作package，无法利用package之间的嵌套关系实现python中包的相对导入。</p>
<p>​        文件夹被python解释器视作package需要满足两个条件：</p>
<p>1、文件夹中必须有<strong>init</strong>.py文件，该文件可以为空，但必须存在该文件。</p>
<p>2、不能作为顶层模块来执行该文件夹中的py文件（即不能作为主函数的入口）。</p>
<p>​        补充：在”from YY import XX”这样的代码中，无论是XX还是YY，只要被python解释器视作package，就会首先调用该package的<strong>init</strong>.py文件。如果都是package，则调用顺序是YY，XX。</p>
<p>​        解决办法：使用绝对路径即可，或者在文件中添加下面两行代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys,os</span><br><span class="line">sys.path.append(os.path.dirname(__file__) + os.sep + <span class="string">'../'</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>问题总结</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
      </tags>
  </entry>
  <entry>
    <title>20使用celery异步发送邮件过程中遇到的问题</title>
    <url>/2020/02/20/20%E4%BD%BF%E7%94%A8celery%E5%BC%82%E6%AD%A5%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>摘要：今天使用celery进行异步发送激活邮件，主要是为了防止发送邮件过程中系统反应过慢，影响用户体验。</p>
</blockquote>
<a id="more"></a>
<ol>
<li><p>启动worker过程中目标计算机积极拒绝，无法连接。</p>
<ul>
<li>下载并安装Redis-x64-3.0.503.msi，地址：<a href="https://github.com/MicrosoftArchive/redis/releases" target="_blank" rel="noopener">https://github.com/MicrosoftArchive/redis/releases</a></li>
<li>双击redis-cli.exe，启动服务即可。</li>
</ul>
</li>
<li><p>windows下安装Redis第一次启动报错：Creating Server TCP listening socket 127.0.0.1:6379: bind: No error</p>
<ul>
<li><p>双击redis-cli.exe</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt;shutdown</span><br><span class="line">not connected&gt;exit</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>​    然后重新运行redis-server.exe redis.windows.conf，启动成功！</p>
<p>​    启动成功后不要关闭启动页面</p>
</li>
<li><p>发送邮件是worker报错：ValueError: not enough values to unpack (expected 3, got 0)</p>
<ul>
<li><p>原网页:<a href="https://github.com/celery/celery/issues/4081" target="_blank" rel="noopener">Unable to run tasks under Windows</a></p>
<p>看别人描述大概就是说win10上运行celery4.x就会出现这个问题，解决办法如下,原理未知：</p>
<p>先安装一个eventlet</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install eventlet</span><br></pre></td></tr></table></figure>
<p>然后启动worker的时候加一个参数<code>-P eventlet</code>，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">celery -A &lt;mymodule&gt; worker -l info -P eventlet</span><br></pre></td></tr></table></figure>
<p>然后就可以正常的调用了。</p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>问题总结</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
        <tag>Django2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>19使用邮箱进行账号激活</title>
    <url>/2020/02/19/19%E4%BD%BF%E7%94%A8%E9%82%AE%E7%AE%B1%E8%BF%9B%E8%A1%8C%E8%B4%A6%E5%8F%B7%E6%BF%80%E6%B4%BB/</url>
    <content><![CDATA[<blockquote>
<p>摘要：今天对登录注册模块进行重新设计，增加了邮箱激活功能。</p>
</blockquote>
<a id="more"></a>
<h4 id="邮箱开启STMP服务"><a href="#邮箱开启STMP服务" class="headerlink" title="邮箱开启STMP服务"></a>邮箱开启STMP服务</h4><p>可以免费开启STMP服务的邮箱有163,126，QQ，我选择的是QQ邮箱</p>
<p><img src="/2020/02/19/19使用邮箱进行账号激活/1.png" alt="image-20200219134229787"></p>
<p>选择设置下面的账户，下滑找到STMP服务一项，选择开启</p>
<p><img src="/2020/02/19/19使用邮箱进行账号激活/2.png" alt="image-20200219134522351"></p>
<p><img src="/2020/02/19/19使用邮箱进行账号激活/3.png" alt="image-20200219134738744"></p>
<p>使用密保手机发送一条信息</p>
<p><img src="/2020/02/19/19使用邮箱进行账号激活/4.png" alt="image-20200219134903997"></p>
<p>然后就可以拿到开启STMP服务的授权码，我们将授权码复制下来保存</p>
<h4 id="配置项目settings-py文件"><a href="#配置项目settings-py文件" class="headerlink" title="配置项目settings.py文件"></a>配置项目settings.py文件</h4><p>在项目的settings.py文件中加上以下配置</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"># 发送邮件配置</span></span><br><span class="line"><span class="xml"># SMTP服务地址</span></span><br><span class="line"><span class="xml">EMAIL_HOST = "smtp.qq.com"</span></span><br><span class="line"><span class="xml">EMAIL_PORT = 25</span></span><br><span class="line"><span class="xml"># 发送邮件的邮箱</span></span><br><span class="line"><span class="xml">EMAIL_HOST_USER = "你的邮箱"</span></span><br><span class="line"><span class="xml"># 客户端授权码密码</span></span><br><span class="line"><span class="xml">EMAIL_HOST_PASSWORD = "刚刚复制的授权码"</span></span><br><span class="line"><span class="xml">EMAIL_USE_TLS= False</span></span><br><span class="line"><span class="xml"># 收件人看到的发件人</span></span><br><span class="line"><span class="xml">EMAIL_FROM = "你的邮箱"</span></span><br></pre></td></tr></table></figure>
<h4 id="在响应的应用的views-py文件中新建视图send"><a href="#在响应的应用的views-py文件中新建视图send" class="headerlink" title="在响应的应用的views.py文件中新建视图send"></a>在响应的应用的views.py文件中新建视图send</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用Django内置的邮件库进行邮件发送</span></span><br><span class="line"><span class="keyword">from</span> django.core.mail <span class="keyword">import</span> send_mail</span><br><span class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> TimedJSONWebSignatureSerializer <span class="keyword">as</span> Serializer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用itsdangerous对用户ID进行加密,生成激活token</span></span><br><span class="line"><span class="comment"># ID加密是为了防止用户恶意攻击</span></span><br><span class="line">serializer = Serializer(settings.SECRET_KEY, <span class="number">3600</span>)</span><br><span class="line">info = &#123;<span class="string">'confirm'</span>:user.id&#125;</span><br><span class="line">token = serializer.dumps(info)</span><br><span class="line">token = token.decode()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发邮件</span></span><br><span class="line">subject = <span class="string">"邮件标题"</span></span><br><span class="line">message = <span class="string">'邮件正文'</span></span><br><span class="line">html_message = <span class="string">'请点击下面的链接激活您的账号&lt;br/&gt;&lt;a href=" 激活链接 "&gt;激活链接 &lt;/a&gt;'</span> %      </span><br><span class="line">send = settings.EMAIL_FROM</span><br><span class="line">receiver = [email]</span><br><span class="line">send_mail(subject, message, send, receiver,html_message=html_message)</span><br></pre></td></tr></table></figure>
<h4 id="配置响应应用的urls-py"><a href="#配置响应应用的urls-py" class="headerlink" title="配置响应应用的urls.py"></a>配置响应应用的urls.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用re_path进行正则路径匹配，path无法进行正则匹配</span></span><br><span class="line">re_path(<span class="string">r"^active/(?P&lt;token&gt;.*)$"</span>, ActiveView.as_view(), name=<span class="string">"active"</span>),</span><br></pre></td></tr></table></figure>
<h4 id="设置响应的点击发送后的链接对应的视图来处理事务"><a href="#设置响应的点击发送后的链接对应的视图来处理事务" class="headerlink" title="设置响应的点击发送后的链接对应的视图来处理事务"></a>设置响应的点击发送后的链接对应的视图来处理事务</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用itsdangerous库对用户ID进行解密</span></span><br><span class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> TimedJSONWebSignatureSerializer <span class="keyword">as</span> Serializer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ActiveView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="string">"""用户激活"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, token)</span>:</span></span><br><span class="line">        <span class="comment"># 用户激活</span></span><br><span class="line">        <span class="comment"># 进行解密， 获取激活信息</span></span><br><span class="line">        serializer = Serializer(settings.SECRET_KEY, <span class="number">3600</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            info = serializer.loads(token)</span><br><span class="line">            user_id = info[<span class="string">"confirm"</span>]</span><br><span class="line">            <span class="comment"># 根据id获取用户信息</span></span><br><span class="line">            user = User.objects.get(id=user_id)</span><br><span class="line">            user.is_active = <span class="number">1</span></span><br><span class="line">            user.save()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 跳转到登录页面</span></span><br><span class="line">            <span class="keyword">return</span> redirect(reverse(<span class="string">"user:login"</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> SignatureExpired <span class="keyword">as</span> e:</span><br><span class="line">            <span class="comment"># 激活链接已经过期</span></span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">"激活链接已过期"</span>)</span><br></pre></td></tr></table></figure>
<p>本文中代码均是在Django2.0环境下写的，更换环境可能需要修改，而且部分内容与应用中其他内容呼应，比如登录注册等等，所以本文只用作记录，其他系统并不适用。</p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
        <tag>STMP</tag>
      </tags>
  </entry>
  <entry>
    <title>18Django升级到2.0过程中遇到的问题</title>
    <url>/2020/02/18/18Django%E5%8D%87%E7%BA%A7%E5%88%B02-0%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>今天突发奇想把Django升级到2.0，过程艰难，自找苦吃。</p>
</blockquote>
<a id="more"></a>
<h4 id="Django2-0-中外键ForeignKey需要添加属性on-delete"><a href="#Django2-0-中外键ForeignKey需要添加属性on-delete" class="headerlink" title="Django2.0 中外键ForeignKey需要添加属性on_delete"></a>Django2.0 中外键ForeignKey需要添加属性on_delete</h4><p>on_delete参数的各个值的含义:</p>
<p>​    on_delete=None,        # 删除关联表中的数据时,当前表与其关联的field的行为<br>​    on_delete=models.CASCADE,   # 删除关联数据,与之关联也删除<br>​    on_delete=models.DO_NOTHING,  # 删除关联数据,什么也不做<br>​    on_delete=models.PROTECT,   # 删除关联数据,引发错误ProtectedError<br>​    # models.ForeignKey(‘关联表’, on_delete=models.SET_NULL, blank=True, null=True)<br>​    on_delete=models.SET_NULL,   # 删除关联数据,与之关联的值设置为null（前提FK字段需要设置为可空,一对一同理）<br>​    # models.ForeignKey(‘关联表’, on_delete=models.SET_DEFAULT, default=’默认值’)<br>​    on_delete=models.SET_DEFAULT, # 删除关联数据,与之关联的值设置为默认值（前提FK字段需要设置默认值,一对一同理）<br>​    on_delete=models.SET,     # 删除关联数据,<br>​         a. 与之关联的值设置为指定值,设置：models.SET(值)<br>​         b. 与之关联的值设置为可执行对象的返回值,设置：models.SET(可执行对象)</p>
<h4 id="Django中blank-True和null-True的区别"><a href="#Django中blank-True和null-True的区别" class="headerlink" title="Django中blank=True和null=True的区别"></a>Django中blank=True和null=True的区别</h4><p>null 是针对数据库而言，如果 null=True, 表示数据库的该字段可以为空。那么在新建一个model对象的时候是不会报错的！！</p>
<p>blank 是针对表单的，如果 blank=True，表示你的表单填写该字段的时候可以不填。比如 admin 界面下增加 model 一条记录的时候，直观的看到就是该字段不是粗体。</p>
<h4 id="Django2-0中urlpattern匹配写法"><a href="#Django2-0中urlpattern匹配写法" class="headerlink" title="Django2.0中urlpattern匹配写法"></a>Django2.0中urlpattern匹配写法</h4><p>例如：仅匹配<a href="http://127.0.0.1:8000/时想要跳转到某个页面，这时urlpattern中的url规则应该写成：" target="_blank" rel="noopener">http://127.0.0.1:8000/时想要跳转到某个页面，这时urlpattern中的url规则应该写成：</a></p>
<p><strong>情况1：使用url</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　from django.contrib import admin</span><br><span class="line">　　from django.urls import path</span><br><span class="line">　　from django.conf.urls import url</span><br><span class="line"></span><br><span class="line">　　urlpatterns = [</span><br><span class="line">    　　path(&apos;admin/&apos;, admin.site.urls),</span><br><span class="line">    　　url(r&apos;&apos;,include(&apos;CRM.urls&apos;)),</span><br></pre></td></tr></table></figure>
<pre><code>　　# 以前习惯用url(r&apos;^$&apos;,view.somedef)
　　# 如果这么写会报错：
　　# Your URL pattern &apos;^$&apos; uses include with a route ending with a &apos;$&apos;
</code></pre><p>　　]</p>
<p>情况2：使用path</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　from django.contrib import admin</span><br><span class="line">　　from django.urls import path</span><br><span class="line">　　</span><br><span class="line">　　urlpatterns = [</span><br><span class="line">　　　　path(&apos;admin/&apos;, admin.site.urls),</span><br><span class="line">　　　　　path(&apos;&apos;,include(&apos;CRM.urls&apos;)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>情况3：使用re_path</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from django.conf.urls import re_path</span><br><span class="line"></span><br><span class="line">　　urlpatterns = [</span><br><span class="line">　　　　path(&apos;admin/&apos;, admin.site.urls),</span><br><span class="line">　　　　re_path(r&apos;&apos;,include(&apos;CRM.urls&apos;)),</span><br><span class="line"></span><br><span class="line">　　]</span><br></pre></td></tr></table></figure>
<h4 id="form表单的action写法"><a href="#form表单的action写法" class="headerlink" title="form表单的action写法"></a>form表单的action写法</h4><p><strong>问题：</strong>RuntimeError: You called this URL via POST, but the URL doesn’t end in a slash and you have APPEN…</p>
<p>提示form的action地址最后不是/结尾的，而且APPEND_SLASH的值是Ture</p>
<p><strong>解决办法：</strong>将form的action地址改为/结尾的就可以了，或者将APPEND_SLASH的值改为False</p>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>问题总结</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
        <tag>Django2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>一种解决github项目下载失败的方法</title>
    <url>/2020/02/17/%E4%B8%80%E7%A7%8D%E8%A7%A3%E5%86%B3github%E9%A1%B9%E7%9B%AE%E4%B8%8B%E8%BD%BD%E5%A4%B1%E8%B4%A5%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>摘要：借助码云实现第三方快速下载</p>
</blockquote>
<a id="more"></a>
<p>今天下载一个 <del>比较大型</del> 30m大小的项目的时候由于网络问题接连失败，然后在网上找了一种可行的方法，记录下来。</p>
<h4 id="1-首先需要一个码云账户，如果你没有，这个是官网地址https-gitee-com"><a href="#1-首先需要一个码云账户，如果你没有，这个是官网地址https-gitee-com" class="headerlink" title="1. 首先需要一个码云账户，如果你没有，这个是官网地址https://gitee.com/"></a>1. 首先需要一个码云账户，如果你没有，这个是官网地址<a href="https://gitee.com/" target="_blank" rel="noopener">https://gitee.com/</a></h4><p><img src="/2020/02/17/一种解决github项目下载失败的方法/1.png" alt></p>
<h4 id="2-注册一个账号"><a href="#2-注册一个账号" class="headerlink" title="2. 注册一个账号"></a>2. 注册一个账号</h4><p><img src="/2020/02/17/一种解决github项目下载失败的方法/2.png" alt="image-20200217214348392"></p>
<h4 id="3-新建一个仓库"><a href="#3-新建一个仓库" class="headerlink" title="3.新建一个仓库"></a>3.新建一个仓库</h4><p><img src="/2020/02/17/一种解决github项目下载失败的方法/3.png" alt="image-20200217214722401"></p>
<h4 id="4-选择导入已有仓库"><a href="#4-选择导入已有仓库" class="headerlink" title="4. 选择导入已有仓库"></a>4. 选择导入已有仓库</h4><p><img src="/2020/02/17/一种解决github项目下载失败的方法/4.png" alt="image-20200217214928948"></p>
<h4 id="5-复制github项目地址"><a href="#5-复制github项目地址" class="headerlink" title="5.复制github项目地址"></a>5.复制github项目地址</h4><p><img src="/2020/02/17/一种解决github项目下载失败的方法/5.png" alt="image-20200217215524197"></p>
<h4 id="6-粘贴刚刚刚创建的仓库，然后点击创建"><a href="#6-粘贴刚刚刚创建的仓库，然后点击创建" class="headerlink" title="6.粘贴刚刚刚创建的仓库，然后点击创建"></a>6.粘贴刚刚刚创建的仓库，然后点击创建</h4><p><img src="/2020/02/17/一种解决github项目下载失败的方法/6.png" alt="image-20200217215817678"></p>
<h4 id="7-等待创建完成之后的，将仓库下载到本地"><a href="#7-等待创建完成之后的，将仓库下载到本地" class="headerlink" title="7.等待创建完成之后的，将仓库下载到本地"></a>7.等待创建完成之后的，将仓库下载到本地</h4><p><img src="/2020/02/17/一种解决github项目下载失败的方法/7.png" alt="image-20200217220141506"></p>
<p>输入验证码之后就可以用正常网速下载项目到本地了。</p>
]]></content>
      <categories>
        <category>桌边闲话</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>17ionic4中数据交互</title>
    <url>/2020/02/17/17ionic4%E4%B8%AD%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92/</url>
    <content><![CDATA[<blockquote>
<p>ionic中数据交互请求服务器端数据和angular中几乎一样，get和post都使用HttpClientModule模块。</p>
</blockquote>
<a id="more"></a>
<h4 id="ionic4-get请求数据"><a href="#ionic4-get请求数据" class="headerlink" title="ionic4 get请求数据"></a>ionic4 get请求数据</h4><p><strong>1、在app.module.ts中引入HttpClientModule 并注入</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;HttpClientModule&#125; <span class="keyword">from</span> <span class="string">'@angular/common/http'</span>;</span><br><span class="line"></span><br><span class="line">imports: [</span><br><span class="line"> BrowserModule,</span><br><span class="line"> HttpClientModule </span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><strong>2、在用到的地方引入HttpClient并在构造函数声明</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;HttpClient&#125; <span class="keyword">from</span> <span class="string">"@angular/common/http"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>(public http:HttpClient) &#123; &#125;</span><br></pre></td></tr></table></figure>
<p><strong>3、ionic4 get请求数据</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> api = <span class="string">"http://a.itying.com/api/productlist"</span>;</span><br><span class="line"><span class="keyword">this</span>.http.get(api).subscribe(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(response); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="ionic4-post提交数据"><a href="#ionic4-post提交数据" class="headerlink" title="ionic4 post提交数据"></a>ionic4 post提交数据</h4><p><strong>1、在app.module.ts中引入HttpClientModule 并注入</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;HttpClientModule&#125; <span class="keyword">from</span> <span class="string">'@angular/common/http'</span>;</span><br><span class="line"></span><br><span class="line">imports: [</span><br><span class="line">  BrowserModule,</span><br><span class="line">  HttpClientModule </span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><strong>2、在用到的地方引入HttpClient、HttpHeaders并在构造函数声明HttpClient</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;HttpClient,HttpHeaders&#125; <span class="keyword">from</span> <span class="string">"@angular/common/http"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>(public http:HttpClient) &#123; &#125;</span><br></pre></td></tr></table></figure>
<p><strong>3、post提交数据</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> httpOptions = &#123;</span><br><span class="line">   headers: <span class="keyword">new</span> HttpHeaders(&#123; <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span> &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> api = <span class="string">"http://127.0.0.1:3000/doLogin"</span>;</span><br><span class="line"><span class="keyword">this</span>.http.post(api,&#123;<span class="attr">username</span>:<span class="string">'张三'</span>,<span class="attr">age</span>:<span class="string">'20'</span>&#125;,httpOptions).subscribe(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(response);      </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="ionic4-Jsonp请求数据"><a href="#ionic4-Jsonp请求数据" class="headerlink" title="ionic4 Jsonp请求数据"></a>ionic4 Jsonp请求数据</h4><p><strong>1、在app.module.ts中引入HttpClientModule、HttpClientJsonpModule 并注入</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;HttpClientModule,HttpClientJsonpModule&#125; <span class="keyword">from</span> <span class="string">'@angular/common/http'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">imports: [</span><br><span class="line">   BrowserModule,</span><br><span class="line">   HttpClientModule,</span><br><span class="line">   HttpClientJsonpModule</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><strong>2、在用到的地方引入HttpClient并在构造函数声明</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;HttpClient&#125; <span class="keyword">from</span> <span class="string">"@angular/common/http"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>(public http:HttpClient) &#123; &#125;</span><br></pre></td></tr></table></figure>
<p><strong>3、jsonp请求数据</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> api = <span class="string">"http://a.itying.com/api/productlist"</span>;</span><br><span class="line"><span class="keyword">this</span>.http.jsonp(api,<span class="string">'callback'</span>).subscribe(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(response); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>毕业设计</category>
        <category>移动端应用搭建</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
        <tag>Ionic</tag>
      </tags>
  </entry>
  <entry>
    <title>16TypeScript和JavaScript的比较</title>
    <url>/2020/02/16/16TypeScript%E5%92%8CJavaScript%E7%9A%84%E6%AF%94%E8%BE%83/</url>
    <content><![CDATA[<blockquote>
<p>TypeScript和JavaScript很像，但是又有很大不同。</p>
</blockquote>
<a id="more"></a>
<h4 id="JavaScript-和-TypeScript-的概要介绍"><a href="#JavaScript-和-TypeScript-的概要介绍" class="headerlink" title="JavaScript 和 TypeScript 的概要介绍"></a>JavaScript 和 TypeScript 的概要介绍</h4><p><strong>JavaScript:</strong><br>JavaScript 是一种轻量级的解释性脚本语言，可嵌入到 HTML 页面中，在浏览器端执行，能够实现浏览器端丰富的交互功能，为用户带来流畅多样的用户体验。</p>
<p>JavaScript 是基于对象和事件驱动的，无需特定的语言环境，只需在支持的浏览器上就能运行。</p>
<p>JavaScript 语言具有以下特点：</p>
<ul>
<li>JavaScript 是一种脚本编写语言，无需编译，只要嵌入 HTML 代码中，就能由浏览器逐行加载解释执行。</li>
<li>JavaScript 是一种基于对象的语言，可以创建对象同时使用现有对象。但是 Javascript 并不支持其它面向对象语言所具有的继承和重载功能。</li>
<li>JavaScript 的语法简单，使用的变量为弱类型。</li>
<li>JavaScript 语言较为安全，仅在浏览器端执行，不会访问本地硬盘数据。</li>
<li>JavaScript 语言具有动态性。JavaScript 是事件驱动的，只根据用户的操作做出相应的反应处理。</li>
<li>JavaScript 只依赖于浏览器，与操作系统的因素无关。因此 JavaScript 是一种跨平台的语言。</li>
<li>JavaScript 兼容性较好，能够与其他技术（如 XML，REST API 等）一起使用。</li>
</ul>
<p><strong>TypeScript：</strong></p>
<p>TypeScript 是 Microsoft 开发和维护的一种面向对象的编程语言。它是 JavaScript 的超集，包含了 JavaScript 的所有元素，可以载入 JavaScript 代码运行，并扩展了 JavaScript 的语法。</p>
<p>TypeScript 具有以下特点：</p>
<ul>
<li>TypeScript 是 Microsoft 推出的开源语言，使用 Apache 授权协议</li>
<li>TypeScript 增加了静态类型、类、模块、接口和类型注解</li>
<li>TypeScript 可用于开发大型的应用</li>
<li>TypeScript 易学易于理解</li>
</ul>
<h4 id="JavaScript-和-TypeScript-的主要差异"><a href="#JavaScript-和-TypeScript-的主要差异" class="headerlink" title="JavaScript 和 TypeScript 的主要差异"></a>JavaScript 和 TypeScript 的主要差异</h4><p>TypeScript 可以使用 JavaScript 中的所有代码和编码概念，TypeScript 是为了使 JavaScript 的开发变得更加容易而创建的。例如，TypeScript 使用类型和接口等概念来描述正在使用的数据，这使开发人员能够快速检测错误并调试应用程序。</p>
<ul>
<li>TypeScript 从核心语言方面和类概念的模塑方面对 JavaScript 对象模型进行扩展。</li>
<li>JavaScript 代码可以在无需任何修改的情况下与 TypeScript 一同工作，同时可以使用编译器将 TypeScript 代码转换为 JavaScript。</li>
<li>TypeScript 通过类型注解提供编译时的静态类型检查。</li>
<li>TypeScript 中的数据要求带有明确的类型，JavaScript不要求。</li>
<li>TypeScript 为函数提供了缺省参数值。</li>
<li>TypeScript 引入了 JavaScript 中没有的“类”概念。</li>
<li>TypeScript 中引入了模块的概念，可以把声明、数据、函数和类封装在模块中。</li>
</ul>
<h4 id="TypeScript-的优势"><a href="#TypeScript-的优势" class="headerlink" title="TypeScript 的优势"></a>TypeScript 的优势</h4><p>下面列举 TypeScript 相比于 JavaScript 的显著优势：</p>
<ol>
<li>静态输入<br>静态类型化是一种功能，可以在开发人员编写脚本时检测错误。查找并修复错误是当今开发团队的迫切需求。有了这项功能，就会允许开发人员编写更健壮的代码并对其进行维护，以便使得代码质量更好、更清晰。</li>
<li>大型的开发项目<br>有时为了改进开发项目，需要对代码库进行小的增量更改。这些小小的变化可能会产生严重的、意想不到的后果，因此有必要撤销这些变化。使用TypeScript工具来进行重构更变的容易、快捷。</li>
<li>更好的协作<br>当发开大型项目时，会有许多开发人员，此时乱码和错误的机也会增加。类型安全是一种在编码期间检测错误的功能，而不是在编译项目时检测错误。这为开发团队创建了一个更高效的编码和调试过程。</li>
<li>更强的生产力<br>干净的 ECMAScript 6 代码，自动完成和动态输入等因素有助于提高开发人员的工作效率。这些功能也有助于编译器创建优化的代码。</li>
</ol>
<blockquote>
<p>版权声明：本文为CSDN博主「powertoolsteam」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/powertoolsteam/article/details/79000989" target="_blank" rel="noopener">https://blog.csdn.net/powertoolsteam/article/details/79000989</a></p>
</blockquote>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>移动端应用搭建</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>15ionic的组件</title>
    <url>/2020/02/15/15ionic%E7%9A%84%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<blockquote>
<p>摘要：今天学了一些ionic的相关组件，官网提供了相关的文档。我主要在需要的时候上官网进行查阅。</p>
</blockquote>
<a id="more"></a>
<h4 id="ionic只是一个容器"><a href="#ionic只是一个容器" class="headerlink" title="ionic只是一个容器"></a>ionic只是一个容器</h4><p>在使用ionic的过程中发现，Ionic只是一个容易，它里面放着一些我们常用的东西供我们使用，比如Angular，React，TypeScript等等，我们用的时候只需要用相关的东西去描述我们想要的内容，描述完成Ionic会自动使用相关的技术帮我们搭建好这些东西，至于搭建的过程我们不需要去管，只要交给Ionic就可以了，我们可以更加专注于前端。</p>
<h4 id="typescript的学习"><a href="#typescript的学习" class="headerlink" title="typescript的学习"></a>typescript的学习</h4><p>做的过程中发现ionic更多地用到TypeScript语言，TypeScript相比于JavaScript虽然说是它的超集，但是typescript实际上是一门面向对象的语言，它包含了 JavaScript 的所有元素，可以载入 JavaScript 代码运行，并扩展了 JavaScript 的语法。</p>
<p>正是因为TypeScript增加了静态类型，类，模块，接口和类型注解，所以TypeScript可以用于大型应用的开发，学习起来也更容易。所以我还想继续深入学习一下TypeScript，算是立一个flag吧，接下来几天边做移动端的开发边学习TypeScript。</p>
<p>加油加油加油！</p>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>移动端应用搭建</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
        <tag>Ionic</tag>
      </tags>
  </entry>
  <entry>
    <title>14ionic页面操作</title>
    <url>/2020/02/14/14ionic%E9%A1%B5%E9%9D%A2%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<blockquote>
<p>摘要：ionic创建页面以及页面跳转以及自定义公共模块。</p>
</blockquote>
<a id="more"></a>
<h4 id="1-ionic创建页面"><a href="#1-ionic创建页面" class="headerlink" title="1.ionic创建页面"></a>1.ionic创建页面</h4><p>命令：<code>ionic g page 页面名称</code></p>
<p>我在项目目录打开cmd命令行，输入<code>ionic g page news</code>，可以看到在app目录下新增了news文件夹。</p>
<p><img src="/2020/02/14/14ionic页面操作/1.png" alt="image-20200214182959503"></p>
<p><img src="/2020/02/14/14ionic页面操作/2.png" alt="image-20200214183713725"></p>
<p>news实际上是一个模块，打开news文件夹里面有6个子文件，这就是news模块。同时，ionic会自动在app-routing.module.ts文件中自动更新news的路由信息。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'news'</span>,</span><br><span class="line">  loadChildren: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./news/news.module'</span>).then( <span class="function"><span class="params">m</span> =&gt;</span> m.NewsPageModule)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-ionic页面跳转"><a href="#2-ionic页面跳转" class="headerlink" title="2.ionic页面跳转"></a>2.ionic页面跳转</h4><p>要实现由tab1页面跳转到news页面</p>
<ol>
<li>首先我们在tab1的html页面设置一个按钮，在\&lt;ion-content>中写入：</li>
</ol>
<p>\&lt;ion-button color=”primary” [routerLink]=”[ ‘/news’]”> 跳转新闻\</p>
<p>其中[routerLink]=[ ‘/news’]一句就是跳转到相应的页面语句</p>
<ol start="2">
<li>在news.page.ts文件中我们写一个循环：</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> list:<span class="built_in">any</span>=[];</span><br><span class="line"></span><br><span class="line"> <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line"> ngOnInit() &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">   <span class="keyword">this</span>.list.push(<span class="string">'这是第'</span>+ i +<span class="string">'条数据'</span>)</span><br><span class="line">   </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>然后在news.page.html中实现循环输出：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-item</span> *<span class="attr">ngFor</span>=<span class="string">"let item of list"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-label</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">ion-label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/14/14ionic页面操作/2.gif" alt></p>
<p>ionic4.x默认没有加返回按钮，我们可以在news.page.html页面的\&lt;ion-header>中加上</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-buttons</span> <span class="attr">slot</span>=<span class="string">"start"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-back-button</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-back-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-buttons</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样就可以实现返回功能。</p>
<p><img src="/2020/02/14/14ionic页面操作/3.gif" alt></p>
<h4 id="3-自定义公共模块"><a href="#3-自定义公共模块" class="headerlink" title="3.自定义公共模块"></a>3.自定义公共模块</h4><p>ionic4.x中多个模块没法共用一个组件，这时候就需要把组件封装成模块，让模块引入模块。</p>
<p>创建模块及组件命令：</p>
<p><code>ionic g module 模块名称</code></p>
<p><code>ionic g component 组件名称</code></p>
<ol>
<li>我们创建一个slide组件，我们输入：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ionic g module module/slide</span><br><span class="line">ionic g component module/slide</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/14/14ionic页面操作/3.png" alt="image-20200214193247584"></p>
<p>在app文件夹下面可以看到module/slide文件夹，slide.component.html文件中有默认语句：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  slide works!</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>想要在其他页面中引入这个组件，就需要把这个组件暴露出来</p>
<ol start="2">
<li><p>在slide.module.ts文件的declarstions中加入SlideCompnent并使用<code>exports:[SlideComponent]</code>把slide组件暴露出来</p>
<p><img src="/2020/02/14/14ionic页面操作/4.png" alt="image-20200214195744654"></p>
</li>
<li><p>在tab1的tab1.module.ts文件中<code>import { SlideModule } from &#39;../module/slide/slide.module&#39;</code>引入组件并在@NgModule中声明<code>SlideModule</code></p>
</li>
<li><p>接下来就可以在tab1.page.html文件中使用\&lt;app-slide>\&lt;/app-slide>引入该组件</p>
<p><img src="/2020/02/14/14ionic页面操作/5.png" alt="image-20200214200038514"></p>
<p>在tab1页面中已经引入了slide.module.html页面的内容，其他页面引入Slide组件也是同样的方式。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>移动端应用搭建</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
        <tag>Ionic</tag>
      </tags>
  </entry>
  <entry>
    <title>13ionic目录结构分析</title>
    <url>/2020/02/13/13ionic%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<blockquote>
<p>摘要：ionic目录比较复杂，但是实际操作起来比较简单，所有页面都是模块化的。</p>
</blockquote>
<a id="more"></a>
<p><img src="/2020/02/13/13ionic目录结构分析/1.png" alt="image-20200213184457342"></p>
<p>e2e：端对端测试文件(一般情况下不用管)</p>
<p>node_modules ：项目所需要的依赖包 resources ：android/ios 资源（更换图标和启</p>
<p>动动画）</p>
<p>src：开发工作目录，页面、样式、脚本和图片都放在这个目录下 （很重要） </p>
<p>angular.json angular 配置文件</p>
<p>config.xml: 打包成app 的配置文件</p>
<p>package.json: 配置项目的元数据和管理项目所需要的依赖</p>
<p>ionic.config.json、ionic.starter.json：ionic 配置文件</p>
<p>tsconfig.json: TypeScript 项目的根目录，指定用来编译这个项目的根文件和编译选项</p>
<p>tslint.json：格式化和校验typescript</p>
<p><strong>其他还会出现的文件：</strong></p>
<p>在运行<code>ionic build --prod</code>命令之后还会出现一个www文件夹，这是页面的静态文件夹</p>
<p>运行<code>cordova platform add android</code>打包命令后还会出现一个platforms文件夹，里面放油生成Android或iOS安装包所需要的资源</p>
<p>plugins：插件文件夹，里面放置各种cordova安装的插件</p>
<p><strong>src目录分析：</strong></p>
<p><img src="/2020/02/13/13ionic目录结构分析/2.png" alt="image-20200213185626342"></p>
<p><strong>app:</strong>项目所需要的模块，组件，服务等</p>
<p><strong>assets:</strong>项目的静态文件，主要是图片等等</p>
<p><strong>environment：</strong>环境相关文件，配置项目运行的环境</p>
<p><strong>theme：</strong>主题文件，可以修改项目的默认主题，比如配色</p>
<p><strong>global.scss：</strong>全局css样式文件</p>
<p><strong>index.html：</strong>入口文件</p>
<p><strong>main.ts：</strong>主入口文件</p>
<p><strong>polyfills.ts：</strong>填充库，在项目加载之前完成</p>
<p><strong>test：</strong>测试文件</p>
<p><strong>zone-flags.ts：</strong>配置文件</p>
<p>ionic中有很多配置相关的文件，并不需要每一个都去学习，我们只要知道一些常用的就可以尝试开发功能了。</p>
<p>好了，ionic的安装和介绍就学到这里，其实这几天还学了一些如何开发，做了几个简单的静态页面，就不写了，明天开始尝试做功能。</p>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>移动端应用搭建</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
        <tag>ionic</tag>
      </tags>
  </entry>
  <entry>
    <title>12ionic框架的安装</title>
    <url>/2020/02/12/12ionic%E6%A1%86%E6%9E%B6%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<blockquote>
<p>摘要：虽然之前接触过ionic框架，但是完全和小白一样，Angular也没有深入学习过。所以接下来的一段时候完全要重头开始学习，包括Angular，TypeScript等等。</p>
</blockquote>
<a id="more"></a>
<h4 id="1-node-js的安装"><a href="#1-node-js的安装" class="headerlink" title="1. node.js的安装"></a>1. node.js的安装</h4><p>简单的说 Node.js 就是运行在服务端的 JavaScript，如果有JavaScript基础的话学习起来会非常轻松。</p>
<p><img src="/2020/02/12/12ionic框架的安装/1.png" alt="image-20200212172705539"></p>
<p>在node.js官网上下载长期支持版本就可以，安装到本地。</p>
<h4 id="2-安装ionic"><a href="#2-安装ionic" class="headerlink" title="2. 安装ionic"></a>2. 安装ionic</h4><p>Win + R 打开命令行工具：</p>
<p><code>npm install -g cordova ionic</code></p>
<p>安装结束之后执行<code>ionic -v</code>出现版本号即为安装成功。</p>
<h4 id="3-创建第一个应用"><a href="#3-创建第一个应用" class="headerlink" title="3. 创建第一个应用"></a>3. 创建第一个应用</h4><p><code>ionic start myApp tabs</code>即为创建一个默认带tab栏的App。</p>
<p><img src="/2020/02/12/12ionic框架的安装/2.png" alt="image-20200212180304089"></p>
<p>这时候会让你选是基于Angular还是React，可以看到ionic框架支持Angular和React，其实Ionic4还支持VUE框架开发，但是我接下来计划用Angular进行开发，所以这里不深入研究了。选择Angular按下Enter，等待安装完成。</p>
<p>安装完成后<code>cd myApp</code>进入应用根目录，<code>ionic server</code>即可运行项目。</p>
<h4 id="4-其他问题"><a href="#4-其他问题" class="headerlink" title="4. 其他问题"></a>4. 其他问题</h4><p>由于node.js的服务器在国外，所以安装过程中速度会特别慢，这个时候我们可以切换到国内的镜像源：</p>
<p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>
<p>再执行<code>cnpm install -g cordova ionic</code>安装速度会快很多。</p>
<h4 id="5-视频教程链接"><a href="#5-视频教程链接" class="headerlink" title="5. 视频教程链接"></a>5. 视频教程链接</h4><p>IT营的大地老师是目前我觉得讲的最好的老师，过程详细全面，相关教程可以去IT营的官网查看。</p>
<p>IT营：<a href="https://www.itying.com/" target="_blank" rel="noopener">https://www.itying.com/</a></p>
<p>Ionic4.x入门实战教程：<a href="https://www.itying.com/goods-1067.html" target="_blank" rel="noopener">https://www.itying.com/goods-1067.html</a></p>
<p>Angular8视频教程：<a href="https://www.itying.com/goods-1047.html" target="_blank" rel="noopener">https://www.itying.com/goods-1047.html</a></p>
<p>TypeScript视频教程：<a href="https://www.itying.com/goods-905.html" target="_blank" rel="noopener">https://www.itying.com/goods-905.html</a></p>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>移动端应用搭建</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
        <tag>Ionic</tag>
      </tags>
  </entry>
  <entry>
    <title>11系统整合</title>
    <url>/2020/02/11/11%E7%B3%BB%E7%BB%9F%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[<blockquote>
<p>摘要：今天主要把前两天做的内容进行整合，整合成一个完整的系统。</p>
</blockquote>
<a id="more"></a>
<p>整体来说没有什么太大的问题，只是整合过程中的一些语法问题和Python的库导入问题，第二个是为了提高后台的管理，引入了xadmin，也是今天在看视频的时候接触到的，之前一直使用admin来管理，xadmin相较于admin更加强大，管理功能也更完善。</p>
<ol>
<li><p>xadmin的安装</p>
<ul>
<li>pip  install  xadmin</li>
</ul>
</li>
<li><p>注册xadmin</p>
<ul>
<li><p>在settings.py中注册xadmin</p>
</li>
<li><p>然后在urls.py中配置url指向xadmin</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import xadmin</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(r&apos;^xadmin/&apos;, xadmin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>将user app中的admin.py文件中注册的内容注释掉。</p>
</li>
</ol>
<p>PC端系统的开发暂时就到这里，下个阶段主要是移动端的开发，之前接触过ionic框架，使用起来感觉很不错，虽然是基于HTML5技术的移动APP开发框架，但是开发出来的应用很接近原生开发，所以明天开始学习ionic框架。</p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
      </tags>
  </entry>
  <entry>
    <title>10基于TensorFlow利用卷积神经网络训练图像样本数据</title>
    <url>/2020/02/10/10%E5%9F%BA%E4%BA%8ETensorFlow%E5%88%A9%E7%94%A8%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%AD%E7%BB%83%E5%9B%BE%E5%83%8F%E6%A0%B7%E6%9C%AC%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<blockquote>
<p>摘要：TensorFlow以及卷积神经网络属于比较深度的内容，我做毕业设计暂时只能使用现成的TF-Slim算法和TensorFlow官网提供的数据集进行训练。</p>
</blockquote>
<a id="more"></a>
<p>这里我选用的是TF-Slim算法模型，预训练模型采用<a href="http://download.tensorflow.org/models/inception_v3_2016_08_28.tar.gz" target="_blank" rel="noopener">Inception V3</a></p>
<p>具体过程：</p>
<h4 id="准备图片数据"><a href="#准备图片数据" class="headerlink" title="准备图片数据"></a>准备图片数据</h4><ul>
<li>准备好自定义的图片数据</li>
<li>放到 data_prepare/pic/train 和 data_prepare/pic/validation 中</li>
<li>自己建立分类文件夹，文件夹名为分类标签名</li>
</ul>
<h4 id="将图片数据转换成TF-Record格式文件"><a href="#将图片数据转换成TF-Record格式文件" class="headerlink" title="将图片数据转换成TF-Record格式文件"></a>将图片数据转换成TF-Record格式文件</h4><ul>
<li>在 data_prepare/ 下，执行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python data_convert.py -t pic/ \</span><br><span class="line">  --train-shards 2 \</span><br><span class="line">  --validation-shards 2 \</span><br><span class="line">  --num-threads 2 \</span><br><span class="line">  --dataset-name satellite</span><br></pre></td></tr></table></figure>
<ul>
<li>会生成4个tf-record文件和1个label文件</li>
</ul>
<h4 id="将转换生成的5个文件复制到-slim-satellite-data-下"><a href="#将转换生成的5个文件复制到-slim-satellite-data-下" class="headerlink" title="将转换生成的5个文件复制到 slim\satellite\data 下"></a>将转换生成的5个文件复制到 slim\satellite\data 下</h4><h4 id="修改-slim-datasets-satellite-py-文件"><a href="#修改-slim-datasets-satellite-py-文件" class="headerlink" title="修改 slim\datasets\satellite.py 文件"></a>修改 slim\datasets\satellite.py 文件</h4><ul>
<li><em>FILE_PATTERN = ‘satellite</em>%s_*.tfrecord’     （tf-record文件名格式）</li>
<li>SPLITS_TO_SIZES = {‘train’: 16, ‘validation’: 4}  （训练集和测试集文件总数）</li>
<li>_NUM_CLASSES = 2                  （分类类目总数）</li>
<li>‘image/format’: tf.FixedLenFeature((), tf.string, default_value=’jpg’)  （图片格式，这里是jpg）</li>
</ul>
<h4 id="下载预训练模型Inception-V3"><a href="#下载预训练模型Inception-V3" class="headerlink" title="下载预训练模型Inception V3"></a>下载预训练模型Inception V3</h4><ul>
<li><a href="http://download.tensorflow.org/models/inception_v3_2016_08_28.tar.gz" target="_blank" rel="noopener">http://download.tensorflow.org/models/inception_v3_2016_08_28.tar.gz</a></li>
<li>解压后，复制到 slim\satellite\pretrained 下</li>
</ul>
<h4 id="在-slim-文件夹下执行如下命令，进行训练："><a href="#在-slim-文件夹下执行如下命令，进行训练：" class="headerlink" title="在 slim/ 文件夹下执行如下命令，进行训练："></a>在 slim/ 文件夹下执行如下命令，进行训练：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python train_image_classifier.py \</span><br><span class="line">  --train_dir=satellite/train_dir \</span><br><span class="line">  --dataset_name=satellite \</span><br><span class="line">  --dataset_split_name=train \</span><br><span class="line">  --dataset_dir=satellite/data \</span><br><span class="line">  --model_name=inception_v3 \</span><br><span class="line">  --checkpoint_path=satellite/pretrained/inception_v3.ckpt \</span><br><span class="line">  --checkpoint_exclude_scopes=InceptionV3/Logits,InceptionV3/AuxLogits \</span><br><span class="line">  --trainable_scopes=InceptionV3/Logits,InceptionV3/AuxLogits \</span><br><span class="line">  --max_number_of_steps=100000 \</span><br><span class="line">  --batch_size=32 \</span><br><span class="line">  --learning_rate=0.001 \</span><br><span class="line">  --learning_rate_decay_type=fixed \</span><br><span class="line">  --save_interval_secs=300 \</span><br><span class="line">  --save_summaries_secs=2 \</span><br><span class="line">  --log_every_n_steps=10 \</span><br><span class="line">  --optimizer=rmsprop \</span><br><span class="line">  --weight_decay=0.00004</span><br></pre></td></tr></table></figure>
<h4 id="在-slim-文件夹下执行如下命令，进行模型能力评估："><a href="#在-slim-文件夹下执行如下命令，进行模型能力评估：" class="headerlink" title="在 slim/ 文件夹下执行如下命令，进行模型能力评估："></a>在 slim/ 文件夹下执行如下命令，进行模型能力评估：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python eval_image_classifier.py \</span><br><span class="line">  --checkpoint_path=satellite/train_dir \</span><br><span class="line">  --eval_dir=satellite/eval_dir \</span><br><span class="line">  --dataset_name=satellite \</span><br><span class="line">  --dataset_split_name=validation \</span><br><span class="line">  --dataset_dir=satellite/data \</span><br><span class="line">  --model_name=inception_v3</span><br></pre></td></tr></table></figure>
<h4 id="导出训练好的模型"><a href="#导出训练好的模型" class="headerlink" title="导出训练好的模型"></a>导出训练好的模型</h4><ul>
<li>在 slim/ 文件夹下面执行如下命令：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python export_inference_graph.py \</span><br><span class="line">  --alsologtostderr \</span><br><span class="line">  --model_name=inception_v3 \</span><br><span class="line">  --output_file=satellite/inception_v3_inf_graph.pb \</span><br><span class="line">  --dataset_name satellite</span><br></pre></td></tr></table></figure>
<ul>
<li>在 项目根目录 执行如下命令（需将5271改成train_dir中保存的实际的模型训练步数）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python freeze_graph.py \</span><br><span class="line">  --input_graph slim/satellite/inception_v3_inf_graph.pb \</span><br><span class="line">  --input_checkpoint slim/satellite/train_dir/model.ckpt-5271 \</span><br><span class="line">  --input_binary true \</span><br><span class="line">  --output_node_names InceptionV3/Predictions/Reshape_1 \</span><br><span class="line">  --output_graph slim/satellite/frozen_graph.pb</span><br></pre></td></tr></table></figure>
<h4 id="对单张图片进行预测"><a href="#对单张图片进行预测" class="headerlink" title="对单张图片进行预测"></a>对单张图片进行预测</h4><ul>
<li>在 项目根目录 执行如下命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python classify_image_inception_v3.py \</span><br><span class="line">  --model_path slim/satellite/frozen_graph.pb \</span><br><span class="line">  --label_path data_prepare/pic/label.txt \</span><br><span class="line">  --image_file test_image.jpg</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>图库爬取</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
        <tag>TensorFlow</tag>
      </tags>
  </entry>
  <entry>
    <title>09Python爬取图库</title>
    <url>/2020/02/09/09Python%E7%88%AC%E5%8F%96%E5%9B%BE%E5%BA%93/</url>
    <content><![CDATA[<blockquote>
<p>摘要：昨天爬了一半出现了代理问题，今天继续解决。。。</p>
<p>ps: 今天成功爬取到图片，但是网速太慢了，爬取很耗时。</p>
</blockquote>
<a id="more"></a>
<h4 id="打开unsplash分析网页"><a href="#打开unsplash分析网页" class="headerlink" title="打开unsplash分析网页"></a>打开<a href="https://unsplash.com/" target="_blank" rel="noopener">unsplash</a>分析网页</h4><p><img src="/2020/02/09/09Python爬取图库/1.png" alt="image-20200209182714684"></p>
<p>可以看到这个网页属于动态网页，鼠标向下滑动图片是一组一组出来的，接下来就可以分析网页了</p>
<h4 id="分析网页代码"><a href="#分析网页代码" class="headerlink" title="分析网页代码"></a>分析网页代码</h4><p>F12打开开发者工具，点选一张图片，查看它的代码</p>
<p><img src="/2020/02/09/09Python爬取图库/2.png" alt="image-20200209183627772"></p>
<p>可以看到，图片 img 在一个 <code>div</code> 的 tag 里面，而且<code>class = “IEpfq”</code>，再看其他的图片发现都是一个样子的，那就可以用代码寻找网页里面IEpfq属性的div，然后进行下载。可以开始写代码了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img_class = soup.find_all(<span class="string">'div'</span>, &#123;<span class="string">"class"</span>: <span class="string">"IEpfq"</span>&#125;)        <span class="comment">#找到div里面有class ="IEpfq"的内容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> img_list <span class="keyword">in</span> img_class:</span><br><span class="line">    imgs = img_list.find_all(<span class="string">'img'</span>)                         <span class="comment">#接着往下找到 img 标签</span></span><br><span class="line">    <span class="keyword">for</span> img <span class="keyword">in</span> imgs:</span><br><span class="line">        src = img[<span class="string">'src'</span>]                                    <span class="comment">#以"src"为 key，找到 value</span></span><br><span class="line">        r = requests.get(src, stream=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p><center>部分代码</center><br>这个是最简单的图片爬取，只适用于测试，而且很容易被网站的反爬虫拦截。</p>
<h4 id="自动翻页-amp-分类爬取"><a href="#自动翻页-amp-分类爬取" class="headerlink" title="自动翻页 &amp; 分类爬取"></a>自动翻页 &amp; 分类爬取</h4><p>下午我使用了另一种方法爬取网站，从Unsplash的主页上可以看到，网站把图片按类别分类好了已经，有壁纸，纹理图案，自然，建筑，动物等等，这样爬取下来的图片很容易自动分类保存。</p>
<p>打开可以看到分类里面同样使用动态加载的方式加载图片。</p>
<p><img src="/2020/02/09/09Python爬取图库/3.png" alt="image-20200209185757841"></p>
<p>多组图片URL：</p>
<p><a href="https://unsplash.com/napi/collections/3330445/photos?page=8&amp;per_page=10&amp;order_by=latest" target="_blank" rel="noopener">https://unsplash.com/napi/collections/3330445/photos?page=8&amp;per_page=10&amp;order_by=latest</a></p>
<p><a href="https://unsplash.com/napi/collections/3330445/photos?page=9&amp;per_page=10&amp;order_by=latest" target="_blank" rel="noopener">https://unsplash.com/napi/collections/3330445/photos?page=9&amp;per_page=10&amp;order_by=latest</a></p>
<p><a href="https://unsplash.com/napi/collections/3330445/photos?page=10&amp;per_page=10&amp;order_by=latest" target="_blank" rel="noopener">https://unsplash.com/napi/collections/3330445/photos?page=10&amp;per_page=10&amp;order_by=latest</a></p>
<p>可以看到动态加载是固定格式的，而且每一页包含10张图片，page=x ，这个x是递增的。</p>
<p>这样就可以通过改变page的值来模拟页面滑动，再通过下载URL进行下载。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key = <span class="string">'\"download\":\"https://unsplash.com/photo/(.*?)/download\" '</span>       <span class="comment"># 下载图片的URL</span></span><br><span class="line">img_id = re.findall(key,r.text,re.S)                                      <span class="comment"># 提取图片的固定ID</span></span><br><span class="line">images = requests.get(<span class="string">'https://unsplash.com/photos/'</span>+img_id+<span class="string">'/download'</span>)  <span class="comment"># 获取图片数据</span></span><br></pre></td></tr></table></figure>
<p><center>部分代码</center><br>这样就很方便的爬取各类图片了，接下来就是考验网速的时候了。。。</p>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>图库爬取</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>08Python爬虫</title>
    <url>/2020/02/08/08Python%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<blockquote>
<p>摘要：选取的图库是外国著名图片网站Unsplash，Unsplash的图质量一直很高，而且基于“CC0协议”，用户可以免费使用网站上的图片用于个人或商用。</p>
<p>Unsplash：<a href="https://unsplash.com/" target="_blank" rel="noopener">https://unsplash.com/</a></p>
</blockquote>
<a id="more"></a>
<p>努力整了一天的爬虫代码，分析页面数据，结果死在了用户代理上，无论怎么添加代理都报同样的错误。</p>
<p>卒。</p>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>图库爬取</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>07完善图案定制功能</title>
    <url>/2020/02/07/07%E5%AE%8C%E5%96%84%E5%9B%BE%E6%A1%88%E5%AE%9A%E5%88%B6%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<blockquote>
<p>摘要：前端功能部分主要是JavaScript来完成交互，其实还需要用到svg的相关知识。之后再补吧，先用JavaScript来完成交互。</p>
</blockquote>
<a id="more"></a>
<p><img src="/2020/02/07/07完善图案定制功能/1.png" alt="image-20200207175718192"></p>
<center>操作界面</center>

<p><img src="/2020/02/07/07完善图案定制功能/2.png" alt="image-20200207180004284"></p>
<center>预览效果</center>



<p>为了界面效果调试了一天，都是些细节性的问题，就不记录了。</p>
<p>中期检查的时候建民老师说要加上大数据相关的技术，所以明天准备爬取图片加到图库里面，然后实现自动为图片加标签的功能。</p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
      </tags>
  </entry>
  <entry>
    <title>06JavaScript基础学习2</title>
    <url>/2020/02/06/06JavaScript%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A02/</url>
    <content><![CDATA[<blockquote>
<p>摘要：JavaScript进阶，JavaScript函数……</p>
</blockquote>
<a id="more"></a>
<h4 id="两种函数定义方式"><a href="#两种函数定义方式" class="headerlink" title="两种函数定义方式"></a>两种函数定义方式</h4><p><strong>1.</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">参数</span>) </span>&#123;</span><br><span class="line">    ……</span><br><span class="line">    函数体</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> <strong>2.</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="function"><span class="keyword">function</span> (<span class="params">参数</span>) </span>&#123;</span><br><span class="line">    ……</span><br><span class="line">    函数体</span><br><span class="line">    ……</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>第二种方法没有函数名，只是把函数的结果赋值给变量。</p>
<p>注意第二种结束时要加上<code>;</code>表示结束。</p>
<h4 id="关于argument"><a href="#关于argument" class="headerlink" title="关于argument"></a>关于argument</h4><p>以前没有学习JavaScript的时候，读代码始终搞不清楚argument是怎么来的，这次借机会记录一下。</p>
<p>argument属于函数体自带的关键字，它永远指向当前函数的调用者传入的所有参数。注意是 “所有” 参数。所以可以使用argument来判断传入的参数个数，获取参数的值，遍历参数等等。</p>
<h4 id="注意JavaScript的行末自动添加-机制"><a href="#注意JavaScript的行末自动添加-机制" class="headerlink" title="注意JavaScript的行末自动添加;机制"></a>注意JavaScript的行末自动添加<code>;</code>机制</h4><p>这就造成有些语句无法分两行书写，如果为了美观想要分两行书写，只能使用<code>{……}</code>语句块。如<code>return x</code>分两行就会变成：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span>;</span><br><span class="line">        x;</span><br></pre></td></tr></table></figure>
<p>返回结果为 undefined</p>
<h4 id="函数体内变量提升"><a href="#函数体内变量提升" class="headerlink" title="函数体内变量提升"></a>函数体内变量提升</h4><p>JavaScript函数在解释过程中会先扫描一遍变量，并将变量名“提升”到函数顶部，但是不提升其赋值，所以调用之后声明的变量不会报错，但是无法使用变量的值。</p>
<h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><ol>
<li><p>JavaScript里面的全局变量被绑定到window的一个属性，所以调用全局变量时也可以用<code>window.变量名</code>的方式调用。</p>
</li>
<li><p>不同的JavaScript文件如果都使用相同的全局变量<code>window</code>，那么会造成冲突，所以我们写JavaScript文件的使用要是用自己的全局变量命名空间</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> APP = &#123;&#125;;</span><br><span class="line">APP.a = <span class="number">1</span>;</span><br><span class="line">APP.b = <span class="string">'b'</span>;</span><br></pre></td></tr></table></figure>
<p>把自己的代码放到唯一的名字空间<code>APP</code>中，可以减少冲突的发生。</p>
</li>
</ol>
<h4 id="var，let-和-const"><a href="#var，let-和-const" class="headerlink" title="var，let 和 const"></a>var，let 和 const</h4><ol>
<li>let/const定义的变量不会出现变量提升，而var定义的变量会提升。</li>
<li>let可以用于声明块变量，如只在for循环内部使用的变量；而var在for循环内声明的变量在函数内部也可以使用。</li>
<li>相同作用域中，let和const不能出现重复声明，而var可以。</li>
<li>const声明变量时必须设置初始值。</li>
<li>const声明一个只读的常量，这个常量不可改变。</li>
<li>JS中，复杂数据类型，存储在栈中的是堆内存的地址，存在栈中的这个地址是不变的，但是存在堆中的值是可以变得。</li>
</ol>
<h4 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h4><p>解构赋值，可以同时对一组变量进行赋值（从ES6开始）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> [x, y] = [<span class="string">'Hello'</span>, <span class="string">'World'</span>];</span><br></pre></td></tr></table></figure>
<p>从一个对象中取出若干属性，也可以使用解构赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">'小明'</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    gender: <span class="string">'male'</span>,</span><br><span class="line">    passport: <span class="string">'G-12345678'</span>,</span><br><span class="line">    school: <span class="string">'No.4 middle school'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> &#123;name, age, passport&#125; = person;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>使用场景</p>
<ul>
<li><p>交换赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x=<span class="number">1</span>, y=<span class="number">2</span>;</span><br><span class="line">[x, y] = [y, x]</span><br></pre></td></tr></table></figure>
</li>
<li><p>快速获取当前页面的域名和路径</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123;<span class="attr">hostname</span>:domain, <span class="attr">pathname</span>:path&#125; = location;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果一个函数接收一个对象作为参数，那么，可以使用解构直接把对象的属性绑定到变量中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildDate</span>(<span class="params">&#123;year, month, day, hour=<span class="number">0</span>, minute=<span class="number">0</span>, second=<span class="number">0</span>&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(year + <span class="string">'-'</span> + month + <span class="string">'-'</span> + day + <span class="string">' '</span> + hour + <span class="string">':'</span> + minute + <span class="string">':'</span> + second);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样可以方便很多，传入对象时候只需要<code>year</code>、<code>month</code>和<code>day</code>这三个属性就可以。</p>
</li>
</ul>
</li>
</ul>
<p>使用解构赋值可以大大减少代码量，但是，需要浏览器支持ES6解构赋值特性。</p>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
        <tag>JavaScript学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>05JavaScript基础学习</title>
    <url>/2020/02/05/05JavaScript%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<blockquote>
<p>摘要：JavaScript，1995年由Brendan Eich设计产生，仅用时10天，网景公司想借Java的名气火一把，取名JavaScript ……</p>
</blockquote>
<a id="more"></a>
<h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><ol>
<li>变量本质是一个盒子，盒子里面记载着对象的内存地址，变量的意义就是方便我们去操作对象。</li>
</ol>
<ul>
<li>变量命名规范：<ul>
<li>可以由字母(<code>a-zA-Z</code>)，数字(<code>0-9</code>)，下划线(<code>_</code>)以及美元符号(<code>$</code>)组成</li>
<li>不能由数字开头</li>
<li>命名尽量用英文并且具有一定的含义</li>
<li>如果有多个英文单词, 后面单词的首字母大写</li>
<li>不能使用关键字</li>
<li>首字母不要大写，大写是有特殊含义的</li>
</ul>
</li>
</ul>
<ol start="2">
<li>JavaScript的数据类型<ul>
<li>字符串(<code>String</code>)：比如”Hello World”；</li>
<li>数字(<code>Number</code>)：整数和浮点数；</li>
<li>布尔(<code>Boolean</code>)：true 和 false；</li>
<li><code>Null</code>: 表示空缺，即此处应该有一个值，但目前为空；</li>
<li><code>Undefined</code>: 表示未定义或不存在，即此处目前没有任何值；</li>
<li><code>Symbol</code>：Symbol 是 ES6 引入了一种新的原始数据类型，表示独一无二的值；</li>
<li>对象（<code>object</code>）：各种值组成的集合。</li>
<li>数组（<code>array</code>）：数组类型</li>
<li>函数（<code>function</code>）：函数数据类型</li>
</ul>
</li>
</ol>
<h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ol>
<li>JavaScript严格区分大小写。</li>
<li>JavaScript不区分整数和浮点数，统一用Number表示，以下表示都合法：</li>
</ol>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 123; // 整数123</span><br><span class="line">&gt; 0.456; // 浮点数0.456</span><br><span class="line">&gt; 1.2345e3; // 科学计数法表示1.2345x1000，等同于1234.5</span><br><span class="line">&gt; -99; // 负数</span><br><span class="line">&gt; NaN; // NaN表示Not a Number，当无法计算结果时用NaN表示</span><br><span class="line">&gt; Infinity; // Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<ol start="3">
<li><p>关于相等运算符<code>==</code>。JavaScript在设计时，有两种比较运算符：</p>
<ul>
<li><p>第一种是<code>==</code>比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果；</p>
</li>
<li><p>第二种是<code>===</code>比较，它不会自动转换数据类型，如果数据类型不一致，返回<code>false</code>，如果一致，再比较。</p>
</li>
</ul>
<p>所以在进行比较的时候不要使用<code>==</code>比较，始终坚持使用<code>===</code>比较。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
        <tag>JavaScript学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>04服务端功能完成总结</title>
    <url>/2020/02/04/04%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8A%9F%E8%83%BD%E5%AE%8C%E6%88%90%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>摘要：这几天学习Django框架主要用于完成后台管理功能，因为后台比较简单，就是普通网上商城管理员对用户，商品以及订单的管理，所以边学边做，基本把后台管理的功能完成了，接下来一段时间主要做前台用户的功能和图案定制的核心功能。</p>
</blockquote>
<a id="more"></a>
<p><img src="/2020/02/04/04服务端功能完成总结/1.png" alt></p>
<p>这两天通过Django的学习简单实现了后台的功能，虽然做出来的demo比较简单，但是对Django的掌握确实提高了不少，现在把这中间遇到的问题总结一下：</p>
<h4 id="1-使用Django实现上传图片"><a href="#1-使用Django实现上传图片" class="headerlink" title="1. 使用Django实现上传图片"></a>1. 使用Django实现上传图片</h4><ul>
<li><p>首先在项目中创建一个app。例如 python manage.py startapp app1，然后将其加入到settings.py文件中。</p>
<p>  INSTALLED_APPS = [</p>
<pre><code>&apos;django.contrib.admin&apos;,
&apos;django.contrib.auth&apos;,
&apos;django.contrib.contenttypes&apos;,
&apos;django.contrib.sessions&apos;,
&apos;django.contrib.messages&apos;,
&apos;django.contrib.staticfiles&apos;,
&apos;app1&apos;,
</code></pre><p>  ] </p>
</li>
</ul>
<ul>
<li>然后再数据库中建立保存图片的表。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IMG</span> <span class="params">( models.Model )</span> :</span></span><br><span class="line">  img = models.ImageField ( upload_to = <span class="string">'img'</span> )</span><br><span class="line">  name = models.CharField ( max_length = <span class="number">20</span> )</span><br></pre></td></tr></table></figure>
<p>代码中的upload_to指的是图片存储的文件夹名称，上传图片之后会自动创建。</p>
<ul>
<li>修改settings.py文件</li>
</ul>
<p>在settings.py文件后面加上两行代码：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line">#设置静态文件路径为主目录下的media文件夹</span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, 'media').replace('\\', '/')    </span><br><span class="line">#url映射</span><br><span class="line">MEDIA_URL = '/media/'</span><br></pre></td></tr></table></figure>
<ul>
<li>创建模板</li>
</ul>
<p>在templates文件下创建一个文件（最好是我们的app的名字，以此来把页面按app分开），比如叫app1，然后在app1文件下创建uploading.html页面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">        &#123;% csrf_token %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"img"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>以及用于图片展示的showing.html页面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    &#123;% for img in imgs %&#125;</span><br><span class="line">         <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; img.img.url &#125;&#125;"</span> /&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>创建视图函数</li>
</ul>
<p>view.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> app1.models <span class="keyword">import</span> IMG</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uploadImg</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    图片上传</span></span><br><span class="line"><span class="string">    :param request: </span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        new_img = IMG(</span><br><span class="line">            img=request.FILES.get(<span class="string">'img'</span>),</span><br><span class="line">            name = request.FILES.get(<span class="string">'img'</span>).name</span><br><span class="line">        )</span><br><span class="line">        new_img.save()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'app1/uploading.html'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showImg</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    图片显示</span></span><br><span class="line"><span class="string">    :param request: </span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    imgs = IMG.objects.all()</span><br><span class="line">    content = &#123;</span><br><span class="line">        <span class="string">'imgs'</span>:imgs,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> imgs:</span><br><span class="line">        <span class="keyword">print</span> (i.img.url)</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'app1/showing.html'</span>,content)</span><br></pre></td></tr></table></figure>
<ul>
<li>配置urls.py</li>
</ul>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">urlpatterns = [</span></span><br><span class="line"><span class="xml">    path('admin/', admin.site.urls),</span></span><br><span class="line"><span class="xml">    url(r'^upload', views.uploadImg),</span></span><br><span class="line"><span class="xml">    url(r'^show', views.showImg),</span></span><br><span class="line"><span class="xml">] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)</span></span><br></pre></td></tr></table></figure>
<h4 id="2-Django表单的一些注意点"><a href="#2-Django表单的一些注意点" class="headerlink" title="2.Django表单的一些注意点"></a>2.Django表单的一些注意点</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/search-post"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span>        </span><br><span class="line">    &#123;% csrf_token %&#125;        </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>form表单后面有一个csrf_token的标签。csrf 全称是 Cross Site Request Forgery。这是Django提供的防止伪装提交请求的功能。POST 方法提交的表格，必须有此标签。</p>
<h4 id="3-模板继承"><a href="#3-模板继承" class="headerlink" title="3.模板继承"></a>3.模板继承</h4><p>Django提供了特别好的HTML继承功能，在HTML中看到block和endblock标签，表示标签内部的内容可以供其他模板重载，只需要在其他模板中加入extends标签即可，如：</p>
<p>example.html</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;示例&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello World!&lt;/h1&gt;</span><br><span class="line">    &#123;% block mainbody %&#125;</span><br><span class="line">       &lt;p&gt;23333&lt;/p&gt;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>helloworld.html：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;%extends &quot;example.html&quot; %&#125;</span><br><span class="line"> </span><br><span class="line">&#123;% block mainbody %&#125;</span><br><span class="line">&lt;p&gt;此部分继承了 example.html 文件&lt;/p&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>
<p>打开helloworld.html文件即可看到example.html里面block标签内的内容被替换：</p>
<p><img src="/2020/02/04/04服务端功能完成总结/2.png" alt></p>
<p>这些是学习过程中特别注意到的一些点和遇到的几个问题，特别感谢<a href="https://www.runoob.com/" target="_blank" rel="noopener">菜鸟教程</a>，在上面学到了很多东西，明天开始做核心功能，主要是和用户交互部分和核心算法，接下来会主要学习一下JavaScript和Python。</p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
      </tags>
  </entry>
  <entry>
    <title>03Django框架学习</title>
    <url>/2020/02/03/03Django%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<blockquote>
<p>摘要：Django框架是一个比较大型的框架，相较于flask等等。也正是因为Django的体量比较大，做很多功能有现成的方案，实现起来比较简单和方便，所以我在毕设当中采用了Django框架。</p>
</blockquote>
<a id="more"></a>
<p>在学校的时候虽然用Django框架做出来一部分功能和界面，但是我对于Django的理解还很停留在表面，想做出许多功能但是不知道在Django中如何进行操作。所以趁着假期对Django框架和Python语言进行一下深入的学习，这次的课程实在<a href="https://www.bilibili.com/" target="_blank" rel="noopener">哔哩哔哩</a>上找的<a href="https://www.bilibili.com/video/av45473851" target="_blank" rel="noopener">Django2.1框架教学</a>，虽然教学是关于Django框架的，但是还是学到了很多加深对软件开发理解性的东西，比如网站的层次概念，Django框架的MVT概念等等。</p>
<p><img src="/2020/02/03/03Django框架学习/1.png" alt="前后端分离网站层次图" title="前后端分离网站层次图"></p>
<p><img src="/2020/02/03/03Django框架学习/2.png" alt title="MVT框架"></p>
<p>Django通过MVT框架对前后端进行管理，即：</p>
<ul>
<li><p>Model（模型）用于和数据库进行交互</p>
</li>
<li><p>View（视图）用于接收请求，进行处理，与M和T进行交互，返回应答</p>
</li>
<li><p>Template（模板）用于产生HTML页面</p>
</li>
</ul>
<p>这样用户使用起来就方便了很多，对数据的管理交给框架就可以了，我们开发时候可以专注于功能，框架的方便性就体现了出来。</p>
<p>写的有些少，但是学到了很多，还是要多动手练习。</p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
      </tags>
  </entry>
  <entry>
    <title>02重新设计数据库</title>
    <url>/2020/02/02/02%E9%87%8D%E6%96%B0%E8%AE%BE%E8%AE%A1%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<blockquote>
<p>摘要：今天根着网上的一个实战项目类比发现我之前做的一些东西还不够完善，底层数据库的设计也很简单，只能是把简单的业务功能实现了，远远没有达到实际中的项目需要，尤其是管理员界面，离实际使用还有很大距离。</p>
</blockquote>
<a id="more"></a>
<p>管理界面在学习阶段是我们自己经常用的，我们作为研发人员知道自己想要什么，怎么使用。但是实际交付工作，管理端往往是交付给完全没有软件设计经验的管理人员使用，他们也需要像普通用户一样简单易懂的管理界面。因此要把后台也是值得更加精细化，便于管理员使用。</p>
<p><img src="/2020/02/02/02重新设计数据库/1.png" alt></p>
<p>这是我的网站首页，现在这个网站的轮播图只能通过修改代码和后台图片实现。通过网上学习项目，我第一次接触到后台管理可通过上传图片，指定某张具体的图片进行管理首页，当然也包括后面的销量图，活动图等等，这就需要管理端的数据库更加精细化，设计更多的表对需要指定的内容进行一一对应。所以我今天对照视频把自己的数据库进行了重新设计。加入了之前没有的对前端页面显示的管理，又增加了对产品的一些细节化管理，比如详情图片管理，简介管理等等。</p>
<p>之前对于管理端的理解比较简单，今天对管理端又有了重新的认识，管理端也是普通用户的一端，所有用户接触到的一端都应该设计的简单，方便，易用，易于理解。</p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
      </tags>
  </entry>
  <entry>
    <title>01毕设学习进度记录</title>
    <url>/2020/02/01/01%E6%AF%95%E8%AE%BE%E5%AD%A6%E4%B9%A0%E8%BF%9B%E5%BA%A6%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<blockquote>
<p>摘要：寒假期间毕业设计进度记录。主要用于督促自己毕业设计的进度，也是对自己这个过程的一个记录，方便以后回顾。</p>
</blockquote>
<a id="more"></a>  
<p>寒假前几天学习了近一个星期Django框架，过年几天没有学习。</p>
<p>今天是年后第一天开始做毕设，Django框架学习起来比较简单，虽然Django框架很大，学习周期比较长，但是借助于Django模板的方便性，学习起来还是很快，尤其是连接数据库的简单让我很惊讶，从Java到Python再到Django，连接数据库越来越趋于简单，可能以后的编程会越来越趋于 “拼接” 这种方向。</p>
<p>接下来几天的计划都是对Django框架的学习，以及对毕设项目的完善，下面简单描述一下毕设项目。</p>
<hr>
<h3 id="毕设项目介绍"><a href="#毕设项目介绍" class="headerlink" title="毕设项目介绍"></a>毕设项目介绍</h3><p>项目名称：<strong>文化衫定制平台的设计与实现</strong></p>
<ol>
<li><p>设计要求</p>
<p>文化衫定制平台的设计与实现要求学生独立设计文化衫交流社区，基于在线交互模式实现文化衫个性化定制、发布、销售、交流和推荐等功能。</p>
<p>(1)系统要求开发工具采用 Pycharm + Android SDK + MySQL + Tomcat等。</p>
<p>(2)要求系统界面设计美观，交互友好，操作方便。</p>
</li>
<li><p>设计内容</p>
<p>文化衫定制平台的角色包括平台管理员、制造销售商、设计师和会员用户等，系统分别为管理员、制造销售商、设计师和会员提供如下功能：</p>
<p>(1)管理员、销售制造商、设计师和会员的信息管理功能。</p>
<p>(2)基于交互模式的文化衫图案在线设计功能，并提供侵权举报功能。</p>
<p>(3)提供文化衫定制、销售功能，并基于文化衫销售数据提供数据分析与定价推荐功能。</p>
<p>(4)提供制造销售商、设计师和会员用户的积分预等级管理功能。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
      </tags>
  </entry>
  <entry>
    <title>欢 迎</title>
    <url>/2019/04/14/hello-world/</url>
    <content><![CDATA[<center>print(“Hello World”)</center><br><center>欢迎，这是我的第一篇博客！</center>
]]></content>
  </entry>
</search>
