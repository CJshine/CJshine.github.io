<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>18Django升级到2.0过程中遇到的问题</title>
    <url>/2020/02/18/18Django%E5%8D%87%E7%BA%A7%E5%88%B02-0%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>今天突发奇想把Django升级到2.0，过程艰难，自找苦吃。</p>
</blockquote>
<a id="more"></a>
<h4 id="Django2-0-中外键ForeignKey需要添加属性on-delete"><a href="#Django2-0-中外键ForeignKey需要添加属性on-delete" class="headerlink" title="Django2.0 中外键ForeignKey需要添加属性on_delete"></a>Django2.0 中外键ForeignKey需要添加属性on_delete</h4><p>on_delete参数的各个值的含义:</p>
<p>​    on_delete=None,        # 删除关联表中的数据时,当前表与其关联的field的行为<br>​    on_delete=models.CASCADE,   # 删除关联数据,与之关联也删除<br>​    on_delete=models.DO_NOTHING,  # 删除关联数据,什么也不做<br>​    on_delete=models.PROTECT,   # 删除关联数据,引发错误ProtectedError<br>​    # models.ForeignKey(‘关联表’, on_delete=models.SET_NULL, blank=True, null=True)<br>​    on_delete=models.SET_NULL,   # 删除关联数据,与之关联的值设置为null（前提FK字段需要设置为可空,一对一同理）<br>​    # models.ForeignKey(‘关联表’, on_delete=models.SET_DEFAULT, default=’默认值’)<br>​    on_delete=models.SET_DEFAULT, # 删除关联数据,与之关联的值设置为默认值（前提FK字段需要设置默认值,一对一同理）<br>​    on_delete=models.SET,     # 删除关联数据,<br>​         a. 与之关联的值设置为指定值,设置：models.SET(值)<br>​         b. 与之关联的值设置为可执行对象的返回值,设置：models.SET(可执行对象)</p>
<h4 id="Django中blank-True和null-True的区别"><a href="#Django中blank-True和null-True的区别" class="headerlink" title="Django中blank=True和null=True的区别"></a>Django中blank=True和null=True的区别</h4><p>null 是针对数据库而言，如果 null=True, 表示数据库的该字段可以为空。那么在新建一个model对象的时候是不会报错的！！</p>
<p>blank 是针对表单的，如果 blank=True，表示你的表单填写该字段的时候可以不填。比如 admin 界面下增加 model 一条记录的时候，直观的看到就是该字段不是粗体。</p>
<h4 id="Django2-0中urlpattern匹配写法"><a href="#Django2-0中urlpattern匹配写法" class="headerlink" title="Django2.0中urlpattern匹配写法"></a>Django2.0中urlpattern匹配写法</h4><p>例如：仅匹配<a href="http://127.0.0.1:8000/时想要跳转到某个页面，这时urlpattern中的url规则应该写成：" target="_blank" rel="noopener">http://127.0.0.1:8000/时想要跳转到某个页面，这时urlpattern中的url规则应该写成：</a></p>
<p><strong>情况1：使用url</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　from django.contrib import admin</span><br><span class="line">　　from django.urls import path</span><br><span class="line">　　from django.conf.urls import url</span><br><span class="line"></span><br><span class="line">　　urlpatterns = [</span><br><span class="line">    　　path(&apos;admin/&apos;, admin.site.urls),</span><br><span class="line">    　　url(r&apos;&apos;,include(&apos;CRM.urls&apos;)),</span><br></pre></td></tr></table></figure>
<pre><code>　　# 以前习惯用url(r&apos;^$&apos;,view.somedef)
　　# 如果这么写会报错：
　　# Your URL pattern &apos;^$&apos; uses include with a route ending with a &apos;$&apos;
</code></pre><p>　　]</p>
<p>情况2：使用path</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　from django.contrib import admin</span><br><span class="line">　　from django.urls import path</span><br><span class="line">　　</span><br><span class="line">　　urlpatterns = [</span><br><span class="line">　　　　path(&apos;admin/&apos;, admin.site.urls),</span><br><span class="line">　　　　　path(&apos;&apos;,include(&apos;CRM.urls&apos;)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>情况3：使用re_path</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from django.conf.urls import re_path</span><br><span class="line"></span><br><span class="line">　　urlpatterns = [</span><br><span class="line">　　　　path(&apos;admin/&apos;, admin.site.urls),</span><br><span class="line">　　　　re_path(r&apos;&apos;,include(&apos;CRM.urls&apos;)),</span><br><span class="line"></span><br><span class="line">　　]</span><br></pre></td></tr></table></figure>
<h4 id="form表单的action写法"><a href="#form表单的action写法" class="headerlink" title="form表单的action写法"></a>form表单的action写法</h4><p><strong>问题：</strong>RuntimeError: You called this URL via POST, but the URL doesn’t end in a slash and you have APPEN…</p>
<p>提示form的action地址最后不是/结尾的，而且APPEND_SLASH的值是Ture</p>
<p><strong>解决办法：</strong>将form的action地址改为/结尾的就可以了，或者将APPEND_SLASH的值改为False</p>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>问题总结</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
        <tag>Django2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>一种解决github项目下载失败的方法</title>
    <url>/2020/02/17/%E4%B8%80%E7%A7%8D%E8%A7%A3%E5%86%B3github%E9%A1%B9%E7%9B%AE%E4%B8%8B%E8%BD%BD%E5%A4%B1%E8%B4%A5%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>摘要：借助码云实现第三方快速下载</p>
</blockquote>
<a id="more"></a>
<p>今天下载一个 <del>比较大型</del> 30m大小的项目的时候由于网络问题接连失败，然后在网上找了一种可行的方法，记录下来。</p>
<h4 id="1-首先需要一个码云账户，如果你没有，这个是官网地址https-gitee-com"><a href="#1-首先需要一个码云账户，如果你没有，这个是官网地址https-gitee-com" class="headerlink" title="1. 首先需要一个码云账户，如果你没有，这个是官网地址https://gitee.com/"></a>1. 首先需要一个码云账户，如果你没有，这个是官网地址<a href="https://gitee.com/" target="_blank" rel="noopener">https://gitee.com/</a></h4><p><img src="/2020/02/17/一种解决github项目下载失败的方法/1.png" alt></p>
<h4 id="2-注册一个账号"><a href="#2-注册一个账号" class="headerlink" title="2. 注册一个账号"></a>2. 注册一个账号</h4><p><img src="/2020/02/17/一种解决github项目下载失败的方法/2.png" alt="image-20200217214348392"></p>
<h4 id="3-新建一个仓库"><a href="#3-新建一个仓库" class="headerlink" title="3.新建一个仓库"></a>3.新建一个仓库</h4><p><img src="/2020/02/17/一种解决github项目下载失败的方法/3.png" alt="image-20200217214722401"></p>
<h4 id="4-选择导入已有仓库"><a href="#4-选择导入已有仓库" class="headerlink" title="4. 选择导入已有仓库"></a>4. 选择导入已有仓库</h4><p><img src="/2020/02/17/一种解决github项目下载失败的方法/4.png" alt="image-20200217214928948"></p>
<h4 id="5-复制github项目地址"><a href="#5-复制github项目地址" class="headerlink" title="5.复制github项目地址"></a>5.复制github项目地址</h4><p><img src="/2020/02/17/一种解决github项目下载失败的方法/5.png" alt="image-20200217215524197"></p>
<h4 id="6-粘贴刚刚刚创建的仓库，然后点击创建"><a href="#6-粘贴刚刚刚创建的仓库，然后点击创建" class="headerlink" title="6.粘贴刚刚刚创建的仓库，然后点击创建"></a>6.粘贴刚刚刚创建的仓库，然后点击创建</h4><p><img src="/2020/02/17/一种解决github项目下载失败的方法/6.png" alt="image-20200217215817678"></p>
<h4 id="7-等待创建完成之后的，将仓库下载到本地"><a href="#7-等待创建完成之后的，将仓库下载到本地" class="headerlink" title="7.等待创建完成之后的，将仓库下载到本地"></a>7.等待创建完成之后的，将仓库下载到本地</h4><p><img src="/2020/02/17/一种解决github项目下载失败的方法/7.png" alt="image-20200217220141506"></p>
<p>输入验证码之后就可以用正常网速下载项目到本地了。</p>
]]></content>
      <categories>
        <category>桌边闲话</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>17ionic4中数据交互</title>
    <url>/2020/02/17/17ionic4%E4%B8%AD%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92/</url>
    <content><![CDATA[<blockquote>
<p>ionic中数据交互请求服务器端数据和angular中几乎一样，get和post都使用HttpClientModule模块。</p>
</blockquote>
<a id="more"></a>
<h4 id="ionic4-get请求数据"><a href="#ionic4-get请求数据" class="headerlink" title="ionic4 get请求数据"></a>ionic4 get请求数据</h4><p><strong>1、在app.module.ts中引入HttpClientModule 并注入</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;HttpClientModule&#125; <span class="keyword">from</span> <span class="string">'@angular/common/http'</span>;</span><br><span class="line"></span><br><span class="line">imports: [</span><br><span class="line"> BrowserModule,</span><br><span class="line"> HttpClientModule </span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><strong>2、在用到的地方引入HttpClient并在构造函数声明</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;HttpClient&#125; <span class="keyword">from</span> <span class="string">"@angular/common/http"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>(public http:HttpClient) &#123; &#125;</span><br></pre></td></tr></table></figure>
<p><strong>3、ionic4 get请求数据</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> api = <span class="string">"http://a.itying.com/api/productlist"</span>;</span><br><span class="line"><span class="keyword">this</span>.http.get(api).subscribe(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(response); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="ionic4-post提交数据"><a href="#ionic4-post提交数据" class="headerlink" title="ionic4 post提交数据"></a>ionic4 post提交数据</h4><p><strong>1、在app.module.ts中引入HttpClientModule 并注入</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;HttpClientModule&#125; <span class="keyword">from</span> <span class="string">'@angular/common/http'</span>;</span><br><span class="line"></span><br><span class="line">imports: [</span><br><span class="line">  BrowserModule,</span><br><span class="line">  HttpClientModule </span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><strong>2、在用到的地方引入HttpClient、HttpHeaders并在构造函数声明HttpClient</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;HttpClient,HttpHeaders&#125; <span class="keyword">from</span> <span class="string">"@angular/common/http"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>(public http:HttpClient) &#123; &#125;</span><br></pre></td></tr></table></figure>
<p><strong>3、post提交数据</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> httpOptions = &#123;</span><br><span class="line">   headers: <span class="keyword">new</span> HttpHeaders(&#123; <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span> &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> api = <span class="string">"http://127.0.0.1:3000/doLogin"</span>;</span><br><span class="line"><span class="keyword">this</span>.http.post(api,&#123;<span class="attr">username</span>:<span class="string">'张三'</span>,<span class="attr">age</span>:<span class="string">'20'</span>&#125;,httpOptions).subscribe(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(response);      </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="ionic4-Jsonp请求数据"><a href="#ionic4-Jsonp请求数据" class="headerlink" title="ionic4 Jsonp请求数据"></a>ionic4 Jsonp请求数据</h4><p><strong>1、在app.module.ts中引入HttpClientModule、HttpClientJsonpModule 并注入</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;HttpClientModule,HttpClientJsonpModule&#125; <span class="keyword">from</span> <span class="string">'@angular/common/http'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">imports: [</span><br><span class="line">   BrowserModule,</span><br><span class="line">   HttpClientModule,</span><br><span class="line">   HttpClientJsonpModule</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><strong>2、在用到的地方引入HttpClient并在构造函数声明</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;HttpClient&#125; <span class="keyword">from</span> <span class="string">"@angular/common/http"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>(public http:HttpClient) &#123; &#125;</span><br></pre></td></tr></table></figure>
<p><strong>3、jsonp请求数据</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> api = <span class="string">"http://a.itying.com/api/productlist"</span>;</span><br><span class="line"><span class="keyword">this</span>.http.jsonp(api,<span class="string">'callback'</span>).subscribe(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(response); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>毕业设计</category>
        <category>移动端应用搭建</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
        <tag>Ionic</tag>
      </tags>
  </entry>
  <entry>
    <title>16TypeScript和JavaScript的比较</title>
    <url>/2020/02/16/16TypeScript%E5%92%8CJavaScript%E7%9A%84%E6%AF%94%E8%BE%83/</url>
    <content><![CDATA[<blockquote>
<p>TypeScript和JavaScript很像，但是又有很大不同。</p>
</blockquote>
<a id="more"></a>
<h4 id="JavaScript-和-TypeScript-的概要介绍"><a href="#JavaScript-和-TypeScript-的概要介绍" class="headerlink" title="JavaScript 和 TypeScript 的概要介绍"></a>JavaScript 和 TypeScript 的概要介绍</h4><p><strong>JavaScript:</strong><br>JavaScript 是一种轻量级的解释性脚本语言，可嵌入到 HTML 页面中，在浏览器端执行，能够实现浏览器端丰富的交互功能，为用户带来流畅多样的用户体验。</p>
<p>JavaScript 是基于对象和事件驱动的，无需特定的语言环境，只需在支持的浏览器上就能运行。</p>
<p>JavaScript 语言具有以下特点：</p>
<ul>
<li>JavaScript 是一种脚本编写语言，无需编译，只要嵌入 HTML 代码中，就能由浏览器逐行加载解释执行。</li>
<li>JavaScript 是一种基于对象的语言，可以创建对象同时使用现有对象。但是 Javascript 并不支持其它面向对象语言所具有的继承和重载功能。</li>
<li>JavaScript 的语法简单，使用的变量为弱类型。</li>
<li>JavaScript 语言较为安全，仅在浏览器端执行，不会访问本地硬盘数据。</li>
<li>JavaScript 语言具有动态性。JavaScript 是事件驱动的，只根据用户的操作做出相应的反应处理。</li>
<li>JavaScript 只依赖于浏览器，与操作系统的因素无关。因此 JavaScript 是一种跨平台的语言。</li>
<li>JavaScript 兼容性较好，能够与其他技术（如 XML，REST API 等）一起使用。</li>
</ul>
<p><strong>TypeScript：</strong></p>
<p>TypeScript 是 Microsoft 开发和维护的一种面向对象的编程语言。它是 JavaScript 的超集，包含了 JavaScript 的所有元素，可以载入 JavaScript 代码运行，并扩展了 JavaScript 的语法。</p>
<p>TypeScript 具有以下特点：</p>
<ul>
<li>TypeScript 是 Microsoft 推出的开源语言，使用 Apache 授权协议</li>
<li>TypeScript 增加了静态类型、类、模块、接口和类型注解</li>
<li>TypeScript 可用于开发大型的应用</li>
<li>TypeScript 易学易于理解</li>
</ul>
<h4 id="JavaScript-和-TypeScript-的主要差异"><a href="#JavaScript-和-TypeScript-的主要差异" class="headerlink" title="JavaScript 和 TypeScript 的主要差异"></a>JavaScript 和 TypeScript 的主要差异</h4><p>TypeScript 可以使用 JavaScript 中的所有代码和编码概念，TypeScript 是为了使 JavaScript 的开发变得更加容易而创建的。例如，TypeScript 使用类型和接口等概念来描述正在使用的数据，这使开发人员能够快速检测错误并调试应用程序。</p>
<ul>
<li>TypeScript 从核心语言方面和类概念的模塑方面对 JavaScript 对象模型进行扩展。</li>
<li>JavaScript 代码可以在无需任何修改的情况下与 TypeScript 一同工作，同时可以使用编译器将 TypeScript 代码转换为 JavaScript。</li>
<li>TypeScript 通过类型注解提供编译时的静态类型检查。</li>
<li>TypeScript 中的数据要求带有明确的类型，JavaScript不要求。</li>
<li>TypeScript 为函数提供了缺省参数值。</li>
<li>TypeScript 引入了 JavaScript 中没有的“类”概念。</li>
<li>TypeScript 中引入了模块的概念，可以把声明、数据、函数和类封装在模块中。</li>
</ul>
<h4 id="TypeScript-的优势"><a href="#TypeScript-的优势" class="headerlink" title="TypeScript 的优势"></a>TypeScript 的优势</h4><p>下面列举 TypeScript 相比于 JavaScript 的显著优势：</p>
<ol>
<li>静态输入<br>静态类型化是一种功能，可以在开发人员编写脚本时检测错误。查找并修复错误是当今开发团队的迫切需求。有了这项功能，就会允许开发人员编写更健壮的代码并对其进行维护，以便使得代码质量更好、更清晰。</li>
<li>大型的开发项目<br>有时为了改进开发项目，需要对代码库进行小的增量更改。这些小小的变化可能会产生严重的、意想不到的后果，因此有必要撤销这些变化。使用TypeScript工具来进行重构更变的容易、快捷。</li>
<li>更好的协作<br>当发开大型项目时，会有许多开发人员，此时乱码和错误的机也会增加。类型安全是一种在编码期间检测错误的功能，而不是在编译项目时检测错误。这为开发团队创建了一个更高效的编码和调试过程。</li>
<li>更强的生产力<br>干净的 ECMAScript 6 代码，自动完成和动态输入等因素有助于提高开发人员的工作效率。这些功能也有助于编译器创建优化的代码。</li>
</ol>
<blockquote>
<p>版权声明：本文为CSDN博主「powertoolsteam」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/powertoolsteam/article/details/79000989" target="_blank" rel="noopener">https://blog.csdn.net/powertoolsteam/article/details/79000989</a></p>
</blockquote>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>移动端应用搭建</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>15ionic的组件</title>
    <url>/2020/02/15/15ionic%E7%9A%84%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<blockquote>
<p>摘要：今天学了一些ionic的相关组件，官网提供了相关的文档。我主要在需要的时候上官网进行查阅。</p>
</blockquote>
<a id="more"></a>
<h4 id="ionic只是一个容器"><a href="#ionic只是一个容器" class="headerlink" title="ionic只是一个容器"></a>ionic只是一个容器</h4><p>在使用ionic的过程中发现，Ionic只是一个容易，它里面放着一些我们常用的东西供我们使用，比如Angular，React，TypeScript等等，我们用的时候只需要用相关的东西去描述我们想要的内容，描述完成Ionic会自动使用相关的技术帮我们搭建好这些东西，至于搭建的过程我们不需要去管，只要交给Ionic就可以了，我们可以更加专注于前端。</p>
<h4 id="typescript的学习"><a href="#typescript的学习" class="headerlink" title="typescript的学习"></a>typescript的学习</h4><p>做的过程中发现ionic更多地用到TypeScript语言，TypeScript相比于JavaScript虽然说是它的超集，但是typescript实际上是一门面向对象的语言，它包含了 JavaScript 的所有元素，可以载入 JavaScript 代码运行，并扩展了 JavaScript 的语法。</p>
<p>正是因为TypeScript增加了静态类型，类，模块，接口和类型注解，所以TypeScript可以用于大型应用的开发，学习起来也更容易。所以我还想继续深入学习一下TypeScript，算是立一个flag吧，接下来几天边做移动端的开发边学习TypeScript。</p>
<p>加油加油加油！</p>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>移动端应用搭建</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
        <tag>Ionic</tag>
      </tags>
  </entry>
  <entry>
    <title>14ionic页面操作</title>
    <url>/2020/02/14/14ionic%E9%A1%B5%E9%9D%A2%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<blockquote>
<p>摘要：ionic创建页面以及页面跳转以及自定义公共模块。</p>
</blockquote>
<a id="more"></a>
<h4 id="1-ionic创建页面"><a href="#1-ionic创建页面" class="headerlink" title="1.ionic创建页面"></a>1.ionic创建页面</h4><p>命令：<code>ionic g page 页面名称</code></p>
<p>我在项目目录打开cmd命令行，输入<code>ionic g page news</code>，可以看到在app目录下新增了news文件夹。</p>
<p><img src="/2020/02/14/14ionic页面操作/1.png" alt="image-20200214182959503"></p>
<p><img src="/2020/02/14/14ionic页面操作/2.png" alt="image-20200214183713725"></p>
<p>news实际上是一个模块，打开news文件夹里面有6个子文件，这就是news模块。同时，ionic会自动在app-routing.module.ts文件中自动更新news的路由信息。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'news'</span>,</span><br><span class="line">  loadChildren: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./news/news.module'</span>).then( <span class="function"><span class="params">m</span> =&gt;</span> m.NewsPageModule)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-ionic页面跳转"><a href="#2-ionic页面跳转" class="headerlink" title="2.ionic页面跳转"></a>2.ionic页面跳转</h4><p>要实现由tab1页面跳转到news页面</p>
<ol>
<li>首先我们在tab1的html页面设置一个按钮，在\&lt;ion-content>中写入：</li>
</ol>
<p>\&lt;ion-button color=”primary” [routerLink]=”[ ‘/news’]”> 跳转新闻\</p>
<p>其中[routerLink]=[ ‘/news’]一句就是跳转到相应的页面语句</p>
<ol start="2">
<li>在news.page.ts文件中我们写一个循环：</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> list:<span class="built_in">any</span>=[];</span><br><span class="line"></span><br><span class="line"> <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line"> ngOnInit() &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">   <span class="keyword">this</span>.list.push(<span class="string">'这是第'</span>+ i +<span class="string">'条数据'</span>)</span><br><span class="line">   </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>然后在news.page.html中实现循环输出：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-item</span> *<span class="attr">ngFor</span>=<span class="string">"let item of list"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-label</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">ion-label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/14/14ionic页面操作/2.gif" alt></p>
<p>ionic4.x默认没有加返回按钮，我们可以在news.page.html页面的\&lt;ion-header>中加上</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-buttons</span> <span class="attr">slot</span>=<span class="string">"start"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-back-button</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-back-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-buttons</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样就可以实现返回功能。</p>
<p><img src="/2020/02/14/14ionic页面操作/3.gif" alt></p>
<h4 id="3-自定义公共模块"><a href="#3-自定义公共模块" class="headerlink" title="3.自定义公共模块"></a>3.自定义公共模块</h4><p>ionic4.x中多个模块没法共用一个组件，这时候就需要把组件封装成模块，让模块引入模块。</p>
<p>创建模块及组件命令：</p>
<p><code>ionic g module 模块名称</code></p>
<p><code>ionic g component 组件名称</code></p>
<ol>
<li>我们创建一个slide组件，我们输入：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ionic g module module/slide</span><br><span class="line">ionic g component module/slide</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/14/14ionic页面操作/3.png" alt="image-20200214193247584"></p>
<p>在app文件夹下面可以看到module/slide文件夹，slide.component.html文件中有默认语句：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  slide works!</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>想要在其他页面中引入这个组件，就需要把这个组件暴露出来</p>
<ol start="2">
<li><p>在slide.module.ts文件的declarstions中加入SlideCompnent并使用<code>exports:[SlideComponent]</code>把slide组件暴露出来</p>
<p><img src="/2020/02/14/14ionic页面操作/4.png" alt="image-20200214195744654"></p>
</li>
<li><p>在tab1的tab1.module.ts文件中<code>import { SlideModule } from &#39;../module/slide/slide.module&#39;</code>引入组件并在@NgModule中声明<code>SlideModule</code></p>
</li>
<li><p>接下来就可以在tab1.page.html文件中使用\&lt;app-slide>\&lt;/app-slide>引入该组件</p>
<p><img src="/2020/02/14/14ionic页面操作/5.png" alt="image-20200214200038514"></p>
<p>在tab1页面中已经引入了slide.module.html页面的内容，其他页面引入Slide组件也是同样的方式。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>移动端应用搭建</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
        <tag>Ionic</tag>
      </tags>
  </entry>
  <entry>
    <title>13ionic目录结构分析</title>
    <url>/2020/02/13/13ionic%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<blockquote>
<p>摘要：ionic目录比较复杂，但是实际操作起来比较简单，所有页面都是模块化的。</p>
</blockquote>
<a id="more"></a>
<p><img src="/2020/02/13/13ionic目录结构分析/1.png" alt="image-20200213184457342"></p>
<p>e2e：端对端测试文件(一般情况下不用管)</p>
<p>node_modules ：项目所需要的依赖包 resources ：android/ios 资源（更换图标和启</p>
<p>动动画）</p>
<p>src：开发工作目录，页面、样式、脚本和图片都放在这个目录下 （很重要） </p>
<p>angular.json angular 配置文件</p>
<p>config.xml: 打包成app 的配置文件</p>
<p>package.json: 配置项目的元数据和管理项目所需要的依赖</p>
<p>ionic.config.json、ionic.starter.json：ionic 配置文件</p>
<p>tsconfig.json: TypeScript 项目的根目录，指定用来编译这个项目的根文件和编译选项</p>
<p>tslint.json：格式化和校验typescript</p>
<p><strong>其他还会出现的文件：</strong></p>
<p>在运行<code>ionic build --prod</code>命令之后还会出现一个www文件夹，这是页面的静态文件夹</p>
<p>运行<code>cordova platform add android</code>打包命令后还会出现一个platforms文件夹，里面放油生成Android或iOS安装包所需要的资源</p>
<p>plugins：插件文件夹，里面放置各种cordova安装的插件</p>
<p><strong>src目录分析：</strong></p>
<p><img src="/2020/02/13/13ionic目录结构分析/2.png" alt="image-20200213185626342"></p>
<p><strong>app:</strong>项目所需要的模块，组件，服务等</p>
<p><strong>assets:</strong>项目的静态文件，主要是图片等等</p>
<p><strong>environment：</strong>环境相关文件，配置项目运行的环境</p>
<p><strong>theme：</strong>主题文件，可以修改项目的默认主题，比如配色</p>
<p><strong>global.scss：</strong>全局css样式文件</p>
<p><strong>index.html：</strong>入口文件</p>
<p><strong>main.ts：</strong>主入口文件</p>
<p><strong>polyfills.ts：</strong>填充库，在项目加载之前完成</p>
<p><strong>test：</strong>测试文件</p>
<p><strong>zone-flags.ts：</strong>配置文件</p>
<p>ionic中有很多配置相关的文件，并不需要每一个都去学习，我们只要知道一些常用的就可以尝试开发功能了。</p>
<p>好了，ionic的安装和介绍就学到这里，其实这几天还学了一些如何开发，做了几个简单的静态页面，就不写了，明天开始尝试做功能。</p>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>移动端应用搭建</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
        <tag>ionic</tag>
      </tags>
  </entry>
  <entry>
    <title>12ionic框架的安装</title>
    <url>/2020/02/12/12ionic%E6%A1%86%E6%9E%B6%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<blockquote>
<p>摘要：虽然之前接触过ionic框架，但是完全和小白一样，Angular也没有深入学习过。所以接下来的一段时候完全要重头开始学习，包括Angular，TypeScript等等。</p>
</blockquote>
<a id="more"></a>
<h4 id="1-node-js的安装"><a href="#1-node-js的安装" class="headerlink" title="1. node.js的安装"></a>1. node.js的安装</h4><p>简单的说 Node.js 就是运行在服务端的 JavaScript，如果有JavaScript基础的话学习起来会非常轻松。</p>
<p><img src="/2020/02/12/12ionic框架的安装/1.png" alt="image-20200212172705539"></p>
<p>在node.js官网上下载长期支持版本就可以，安装到本地。</p>
<h4 id="2-安装ionic"><a href="#2-安装ionic" class="headerlink" title="2. 安装ionic"></a>2. 安装ionic</h4><p>Win + R 打开命令行工具：</p>
<p><code>npm install -g cordova ionic</code></p>
<p>安装结束之后执行<code>ionic -v</code>出现版本号即为安装成功。</p>
<h4 id="3-创建第一个应用"><a href="#3-创建第一个应用" class="headerlink" title="3. 创建第一个应用"></a>3. 创建第一个应用</h4><p><code>ionic start myApp tabs</code>即为创建一个默认带tab栏的App。</p>
<p><img src="/2020/02/12/12ionic框架的安装/2.png" alt="image-20200212180304089"></p>
<p>这时候会让你选是基于Angular还是React，可以看到ionic框架支持Angular和React，其实Ionic4还支持VUE框架开发，但是我接下来计划用Angular进行开发，所以这里不深入研究了。选择Angular按下Enter，等待安装完成。</p>
<p>安装完成后<code>cd myApp</code>进入应用根目录，<code>ionic server</code>即可运行项目。</p>
<h4 id="4-其他问题"><a href="#4-其他问题" class="headerlink" title="4. 其他问题"></a>4. 其他问题</h4><p>由于node.js的服务器在国外，所以安装过程中速度会特别慢，这个时候我们可以切换到国内的镜像源：</p>
<p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>
<p>再执行<code>cnpm install -g cordova ionic</code>安装速度会快很多。</p>
<h4 id="5-视频教程链接"><a href="#5-视频教程链接" class="headerlink" title="5. 视频教程链接"></a>5. 视频教程链接</h4><p>IT营的大地老师是目前我觉得讲的最好的老师，过程详细全面，相关教程可以去IT营的官网查看。</p>
<p>IT营：<a href="https://www.itying.com/" target="_blank" rel="noopener">https://www.itying.com/</a></p>
<p>Ionic4.x入门实战教程：<a href="https://www.itying.com/goods-1067.html" target="_blank" rel="noopener">https://www.itying.com/goods-1067.html</a></p>
<p>Angular8视频教程：<a href="https://www.itying.com/goods-1047.html" target="_blank" rel="noopener">https://www.itying.com/goods-1047.html</a></p>
<p>TypeScript视频教程：<a href="https://www.itying.com/goods-905.html" target="_blank" rel="noopener">https://www.itying.com/goods-905.html</a></p>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>移动端应用搭建</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
        <tag>Ionic</tag>
      </tags>
  </entry>
  <entry>
    <title>11系统整合</title>
    <url>/2020/02/11/11%E7%B3%BB%E7%BB%9F%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[<blockquote>
<p>摘要：今天主要把前两天做的内容进行整合，整合成一个完整的系统。</p>
</blockquote>
<a id="more"></a>
<p>整体来说没有什么太大的问题，只是整合过程中的一些语法问题和Python的库导入问题，第二个是为了提高后台的管理，引入了xadmin，也是今天在看视频的时候接触到的，之前一直使用admin来管理，xadmin相较于admin更加强大，管理功能也更完善。</p>
<ol>
<li><p>xadmin的安装</p>
<ul>
<li>pip  install  xadmin</li>
</ul>
</li>
<li><p>注册xadmin</p>
<ul>
<li><p>在settings.py中注册xadmin</p>
</li>
<li><p>然后在urls.py中配置url指向xadmin</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import xadmin</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(r&apos;^xadmin/&apos;, xadmin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>将user app中的admin.py文件中注册的内容注释掉。</p>
</li>
</ol>
<p>PC端系统的开发暂时就到这里，下个阶段主要是移动端的开发，之前接触过ionic框架，使用起来感觉很不错，虽然是基于HTML5技术的移动APP开发框架，但是开发出来的应用很接近原生开发，所以明天开始学习ionic框架。</p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
      </tags>
  </entry>
  <entry>
    <title>10基于TensorFlow利用卷积神经网络训练图像样本数据</title>
    <url>/2020/02/10/10%E5%9F%BA%E4%BA%8ETensorFlow%E5%88%A9%E7%94%A8%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%AD%E7%BB%83%E5%9B%BE%E5%83%8F%E6%A0%B7%E6%9C%AC%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<blockquote>
<p>摘要：TensorFlow以及卷积神经网络属于比较深度的内容，我做毕业设计暂时只能使用现成的TF-Slim算法和TensorFlow官网提供的数据集进行训练。</p>
</blockquote>
<a id="more"></a>
<p>这里我选用的是TF-Slim算法模型，预训练模型采用<a href="http://download.tensorflow.org/models/inception_v3_2016_08_28.tar.gz" target="_blank" rel="noopener">Inception V3</a></p>
<p>具体过程：</p>
<h4 id="准备图片数据"><a href="#准备图片数据" class="headerlink" title="准备图片数据"></a>准备图片数据</h4><ul>
<li>准备好自定义的图片数据</li>
<li>放到 data_prepare/pic/train 和 data_prepare/pic/validation 中</li>
<li>自己建立分类文件夹，文件夹名为分类标签名</li>
</ul>
<h4 id="将图片数据转换成TF-Record格式文件"><a href="#将图片数据转换成TF-Record格式文件" class="headerlink" title="将图片数据转换成TF-Record格式文件"></a>将图片数据转换成TF-Record格式文件</h4><ul>
<li>在 data_prepare/ 下，执行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python data_convert.py -t pic/ \</span><br><span class="line">  --train-shards 2 \</span><br><span class="line">  --validation-shards 2 \</span><br><span class="line">  --num-threads 2 \</span><br><span class="line">  --dataset-name satellite</span><br></pre></td></tr></table></figure>
<ul>
<li>会生成4个tf-record文件和1个label文件</li>
</ul>
<h4 id="将转换生成的5个文件复制到-slim-satellite-data-下"><a href="#将转换生成的5个文件复制到-slim-satellite-data-下" class="headerlink" title="将转换生成的5个文件复制到 slim\satellite\data 下"></a>将转换生成的5个文件复制到 slim\satellite\data 下</h4><h4 id="修改-slim-datasets-satellite-py-文件"><a href="#修改-slim-datasets-satellite-py-文件" class="headerlink" title="修改 slim\datasets\satellite.py 文件"></a>修改 slim\datasets\satellite.py 文件</h4><ul>
<li><em>FILE_PATTERN = ‘satellite</em>%s_*.tfrecord’     （tf-record文件名格式）</li>
<li>SPLITS_TO_SIZES = {‘train’: 16, ‘validation’: 4}  （训练集和测试集文件总数）</li>
<li>_NUM_CLASSES = 2                  （分类类目总数）</li>
<li>‘image/format’: tf.FixedLenFeature((), tf.string, default_value=’jpg’)  （图片格式，这里是jpg）</li>
</ul>
<h4 id="下载预训练模型Inception-V3"><a href="#下载预训练模型Inception-V3" class="headerlink" title="下载预训练模型Inception V3"></a>下载预训练模型Inception V3</h4><ul>
<li><a href="http://download.tensorflow.org/models/inception_v3_2016_08_28.tar.gz" target="_blank" rel="noopener">http://download.tensorflow.org/models/inception_v3_2016_08_28.tar.gz</a></li>
<li>解压后，复制到 slim\satellite\pretrained 下</li>
</ul>
<h4 id="在-slim-文件夹下执行如下命令，进行训练："><a href="#在-slim-文件夹下执行如下命令，进行训练：" class="headerlink" title="在 slim/ 文件夹下执行如下命令，进行训练："></a>在 slim/ 文件夹下执行如下命令，进行训练：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python train_image_classifier.py \</span><br><span class="line">  --train_dir=satellite/train_dir \</span><br><span class="line">  --dataset_name=satellite \</span><br><span class="line">  --dataset_split_name=train \</span><br><span class="line">  --dataset_dir=satellite/data \</span><br><span class="line">  --model_name=inception_v3 \</span><br><span class="line">  --checkpoint_path=satellite/pretrained/inception_v3.ckpt \</span><br><span class="line">  --checkpoint_exclude_scopes=InceptionV3/Logits,InceptionV3/AuxLogits \</span><br><span class="line">  --trainable_scopes=InceptionV3/Logits,InceptionV3/AuxLogits \</span><br><span class="line">  --max_number_of_steps=100000 \</span><br><span class="line">  --batch_size=32 \</span><br><span class="line">  --learning_rate=0.001 \</span><br><span class="line">  --learning_rate_decay_type=fixed \</span><br><span class="line">  --save_interval_secs=300 \</span><br><span class="line">  --save_summaries_secs=2 \</span><br><span class="line">  --log_every_n_steps=10 \</span><br><span class="line">  --optimizer=rmsprop \</span><br><span class="line">  --weight_decay=0.00004</span><br></pre></td></tr></table></figure>
<h4 id="在-slim-文件夹下执行如下命令，进行模型能力评估："><a href="#在-slim-文件夹下执行如下命令，进行模型能力评估：" class="headerlink" title="在 slim/ 文件夹下执行如下命令，进行模型能力评估："></a>在 slim/ 文件夹下执行如下命令，进行模型能力评估：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python eval_image_classifier.py \</span><br><span class="line">  --checkpoint_path=satellite/train_dir \</span><br><span class="line">  --eval_dir=satellite/eval_dir \</span><br><span class="line">  --dataset_name=satellite \</span><br><span class="line">  --dataset_split_name=validation \</span><br><span class="line">  --dataset_dir=satellite/data \</span><br><span class="line">  --model_name=inception_v3</span><br></pre></td></tr></table></figure>
<h4 id="导出训练好的模型"><a href="#导出训练好的模型" class="headerlink" title="导出训练好的模型"></a>导出训练好的模型</h4><ul>
<li>在 slim/ 文件夹下面执行如下命令：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python export_inference_graph.py \</span><br><span class="line">  --alsologtostderr \</span><br><span class="line">  --model_name=inception_v3 \</span><br><span class="line">  --output_file=satellite/inception_v3_inf_graph.pb \</span><br><span class="line">  --dataset_name satellite</span><br></pre></td></tr></table></figure>
<ul>
<li>在 项目根目录 执行如下命令（需将5271改成train_dir中保存的实际的模型训练步数）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python freeze_graph.py \</span><br><span class="line">  --input_graph slim/satellite/inception_v3_inf_graph.pb \</span><br><span class="line">  --input_checkpoint slim/satellite/train_dir/model.ckpt-5271 \</span><br><span class="line">  --input_binary true \</span><br><span class="line">  --output_node_names InceptionV3/Predictions/Reshape_1 \</span><br><span class="line">  --output_graph slim/satellite/frozen_graph.pb</span><br></pre></td></tr></table></figure>
<h4 id="对单张图片进行预测"><a href="#对单张图片进行预测" class="headerlink" title="对单张图片进行预测"></a>对单张图片进行预测</h4><ul>
<li>在 项目根目录 执行如下命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python classify_image_inception_v3.py \</span><br><span class="line">  --model_path slim/satellite/frozen_graph.pb \</span><br><span class="line">  --label_path data_prepare/pic/label.txt \</span><br><span class="line">  --image_file test_image.jpg</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>图库爬取</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
        <tag>TensorFlow</tag>
      </tags>
  </entry>
  <entry>
    <title>09Python爬取图库</title>
    <url>/2020/02/09/09Python%E7%88%AC%E5%8F%96%E5%9B%BE%E5%BA%93/</url>
    <content><![CDATA[<blockquote>
<p>摘要：昨天爬了一半出现了代理问题，今天继续解决。。。</p>
<p>ps: 今天成功爬取到图片，但是网速太慢了，爬取很耗时。</p>
</blockquote>
<a id="more"></a>
<h4 id="打开unsplash分析网页"><a href="#打开unsplash分析网页" class="headerlink" title="打开unsplash分析网页"></a>打开<a href="https://unsplash.com/" target="_blank" rel="noopener">unsplash</a>分析网页</h4><p><img src="/2020/02/09/09Python爬取图库/1.png" alt="image-20200209182714684"></p>
<p>可以看到这个网页属于动态网页，鼠标向下滑动图片是一组一组出来的，接下来就可以分析网页了</p>
<h4 id="分析网页代码"><a href="#分析网页代码" class="headerlink" title="分析网页代码"></a>分析网页代码</h4><p>F12打开开发者工具，点选一张图片，查看它的代码</p>
<p><img src="/2020/02/09/09Python爬取图库/2.png" alt="image-20200209183627772"></p>
<p>可以看到，图片 img 在一个 <code>div</code> 的 tag 里面，而且<code>class = “IEpfq”</code>，再看其他的图片发现都是一个样子的，那就可以用代码寻找网页里面IEpfq属性的div，然后进行下载。可以开始写代码了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img_class = soup.find_all(<span class="string">'div'</span>, &#123;<span class="string">"class"</span>: <span class="string">"IEpfq"</span>&#125;)        <span class="comment">#找到div里面有class ="IEpfq"的内容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> img_list <span class="keyword">in</span> img_class:</span><br><span class="line">    imgs = img_list.find_all(<span class="string">'img'</span>)                         <span class="comment">#接着往下找到 img 标签</span></span><br><span class="line">    <span class="keyword">for</span> img <span class="keyword">in</span> imgs:</span><br><span class="line">        src = img[<span class="string">'src'</span>]                                    <span class="comment">#以"src"为 key，找到 value</span></span><br><span class="line">        r = requests.get(src, stream=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p><center>部分代码</center><br>这个是最简单的图片爬取，只适用于测试，而且很容易被网站的反爬虫拦截。</p>
<h4 id="自动翻页-amp-分类爬取"><a href="#自动翻页-amp-分类爬取" class="headerlink" title="自动翻页 &amp; 分类爬取"></a>自动翻页 &amp; 分类爬取</h4><p>下午我使用了另一种方法爬取网站，从Unsplash的主页上可以看到，网站把图片按类别分类好了已经，有壁纸，纹理图案，自然，建筑，动物等等，这样爬取下来的图片很容易自动分类保存。</p>
<p>打开可以看到分类里面同样使用动态加载的方式加载图片。</p>
<p><img src="/2020/02/09/09Python爬取图库/3.png" alt="image-20200209185757841"></p>
<p>多组图片URL：</p>
<p><a href="https://unsplash.com/napi/collections/3330445/photos?page=8&amp;per_page=10&amp;order_by=latest" target="_blank" rel="noopener">https://unsplash.com/napi/collections/3330445/photos?page=8&amp;per_page=10&amp;order_by=latest</a></p>
<p><a href="https://unsplash.com/napi/collections/3330445/photos?page=9&amp;per_page=10&amp;order_by=latest" target="_blank" rel="noopener">https://unsplash.com/napi/collections/3330445/photos?page=9&amp;per_page=10&amp;order_by=latest</a></p>
<p><a href="https://unsplash.com/napi/collections/3330445/photos?page=10&amp;per_page=10&amp;order_by=latest" target="_blank" rel="noopener">https://unsplash.com/napi/collections/3330445/photos?page=10&amp;per_page=10&amp;order_by=latest</a></p>
<p>可以看到动态加载是固定格式的，而且每一页包含10张图片，page=x ，这个x是递增的。</p>
<p>这样就可以通过改变page的值来模拟页面滑动，再通过下载URL进行下载。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key = <span class="string">'\"download\":\"https://unsplash.com/photo/(.*?)/download\" '</span>       <span class="comment"># 下载图片的URL</span></span><br><span class="line">img_id = re.findall(key,r.text,re.S)                                      <span class="comment"># 提取图片的固定ID</span></span><br><span class="line">images = requests.get(<span class="string">'https://unsplash.com/photos/'</span>+img_id+<span class="string">'/download'</span>)  <span class="comment"># 获取图片数据</span></span><br></pre></td></tr></table></figure>
<p><center>部分代码</center><br>这样就很方便的爬取各类图片了，接下来就是考验网速的时候了。。。</p>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>图库爬取</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>08Python爬虫</title>
    <url>/2020/02/08/08Python%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<blockquote>
<p>摘要：选取的图库是外国著名图片网站Unsplash，Unsplash的图质量一直很高，而且基于“CC0协议”，用户可以免费使用网站上的图片用于个人或商用。</p>
<p>Unsplash：<a href="https://unsplash.com/" target="_blank" rel="noopener">https://unsplash.com/</a></p>
</blockquote>
<a id="more"></a>
<p>努力整了一天的爬虫代码，分析页面数据，结果死在了用户代理上，无论怎么添加代理都报同样的错误。</p>
<p>卒。</p>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>图库爬取</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>07完善图案定制功能</title>
    <url>/2020/02/07/07%E5%AE%8C%E5%96%84%E5%9B%BE%E6%A1%88%E5%AE%9A%E5%88%B6%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<blockquote>
<p>摘要：前端功能部分主要是JavaScript来完成交互，其实还需要用到svg的相关知识。之后再补吧，先用JavaScript来完成交互。</p>
</blockquote>
<a id="more"></a>
<p><img src="/2020/02/07/07完善图案定制功能/1.png" alt="image-20200207175718192"></p>
<center>操作界面</center>

<p><img src="/2020/02/07/07完善图案定制功能/2.png" alt="image-20200207180004284"></p>
<center>预览效果</center>



<p>为了界面效果调试了一天，都是些细节性的问题，就不记录了。</p>
<p>中期检查的时候建民老师说要加上大数据相关的技术，所以明天准备爬取图片加到图库里面，然后实现自动为图片加标签的功能。</p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
      </tags>
  </entry>
  <entry>
    <title>06JavaScript基础学习2</title>
    <url>/2020/02/06/06JavaScript%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A02/</url>
    <content><![CDATA[<blockquote>
<p>摘要：JavaScript进阶，JavaScript函数……</p>
</blockquote>
<a id="more"></a>
<h4 id="两种函数定义方式"><a href="#两种函数定义方式" class="headerlink" title="两种函数定义方式"></a>两种函数定义方式</h4><p><strong>1.</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">参数</span>) </span>&#123;</span><br><span class="line">    ……</span><br><span class="line">    函数体</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> <strong>2.</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="function"><span class="keyword">function</span> (<span class="params">参数</span>) </span>&#123;</span><br><span class="line">    ……</span><br><span class="line">    函数体</span><br><span class="line">    ……</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>第二种方法没有函数名，只是把函数的结果赋值给变量。</p>
<p>注意第二种结束时要加上<code>;</code>表示结束。</p>
<h4 id="关于argument"><a href="#关于argument" class="headerlink" title="关于argument"></a>关于argument</h4><p>以前没有学习JavaScript的时候，读代码始终搞不清楚argument是怎么来的，这次借机会记录一下。</p>
<p>argument属于函数体自带的关键字，它永远指向当前函数的调用者传入的所有参数。注意是 “所有” 参数。所以可以使用argument来判断传入的参数个数，获取参数的值，遍历参数等等。</p>
<h4 id="注意JavaScript的行末自动添加-机制"><a href="#注意JavaScript的行末自动添加-机制" class="headerlink" title="注意JavaScript的行末自动添加;机制"></a>注意JavaScript的行末自动添加<code>;</code>机制</h4><p>这就造成有些语句无法分两行书写，如果为了美观想要分两行书写，只能使用<code>{……}</code>语句块。如<code>return x</code>分两行就会变成：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span>;</span><br><span class="line">        x;</span><br></pre></td></tr></table></figure>
<p>返回结果为 undefined</p>
<h4 id="函数体内变量提升"><a href="#函数体内变量提升" class="headerlink" title="函数体内变量提升"></a>函数体内变量提升</h4><p>JavaScript函数在解释过程中会先扫描一遍变量，并将变量名“提升”到函数顶部，但是不提升其赋值，所以调用之后声明的变量不会报错，但是无法使用变量的值。</p>
<h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><ol>
<li><p>JavaScript里面的全局变量被绑定到window的一个属性，所以调用全局变量时也可以用<code>window.变量名</code>的方式调用。</p>
</li>
<li><p>不同的JavaScript文件如果都使用相同的全局变量<code>window</code>，那么会造成冲突，所以我们写JavaScript文件的使用要是用自己的全局变量命名空间</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> APP = &#123;&#125;;</span><br><span class="line">APP.a = <span class="number">1</span>;</span><br><span class="line">APP.b = <span class="string">'b'</span>;</span><br></pre></td></tr></table></figure>
<p>把自己的代码放到唯一的名字空间<code>APP</code>中，可以减少冲突的发生。</p>
</li>
</ol>
<h4 id="var，let-和-const"><a href="#var，let-和-const" class="headerlink" title="var，let 和 const"></a>var，let 和 const</h4><ol>
<li>let/const定义的变量不会出现变量提升，而var定义的变量会提升。</li>
<li>let可以用于声明块变量，如只在for循环内部使用的变量；而var在for循环内声明的变量在函数内部也可以使用。</li>
<li>相同作用域中，let和const不能出现重复声明，而var可以。</li>
<li>const声明变量时必须设置初始值。</li>
<li>const声明一个只读的常量，这个常量不可改变。</li>
<li>JS中，复杂数据类型，存储在栈中的是堆内存的地址，存在栈中的这个地址是不变的，但是存在堆中的值是可以变得。</li>
</ol>
<h4 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h4><p>解构赋值，可以同时对一组变量进行赋值（从ES6开始）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> [x, y] = [<span class="string">'Hello'</span>, <span class="string">'World'</span>];</span><br></pre></td></tr></table></figure>
<p>从一个对象中取出若干属性，也可以使用解构赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">'小明'</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    gender: <span class="string">'male'</span>,</span><br><span class="line">    passport: <span class="string">'G-12345678'</span>,</span><br><span class="line">    school: <span class="string">'No.4 middle school'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> &#123;name, age, passport&#125; = person;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>使用场景</p>
<ul>
<li><p>交换赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x=<span class="number">1</span>, y=<span class="number">2</span>;</span><br><span class="line">[x, y] = [y, x]</span><br></pre></td></tr></table></figure>
</li>
<li><p>快速获取当前页面的域名和路径</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123;<span class="attr">hostname</span>:domain, <span class="attr">pathname</span>:path&#125; = location;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果一个函数接收一个对象作为参数，那么，可以使用解构直接把对象的属性绑定到变量中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildDate</span>(<span class="params">&#123;year, month, day, hour=<span class="number">0</span>, minute=<span class="number">0</span>, second=<span class="number">0</span>&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(year + <span class="string">'-'</span> + month + <span class="string">'-'</span> + day + <span class="string">' '</span> + hour + <span class="string">':'</span> + minute + <span class="string">':'</span> + second);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样可以方便很多，传入对象时候只需要<code>year</code>、<code>month</code>和<code>day</code>这三个属性就可以。</p>
</li>
</ul>
</li>
</ul>
<p>使用解构赋值可以大大减少代码量，但是，需要浏览器支持ES6解构赋值特性。</p>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
        <tag>JavaScript学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>05JavaScript基础学习</title>
    <url>/2020/02/05/05JavaScript%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<blockquote>
<p>摘要：JavaScript，1995年由Brendan Eich设计产生，仅用时10天，网景公司想借Java的名气火一把，取名JavaScript ……</p>
</blockquote>
<a id="more"></a>
<h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><ol>
<li>变量本质是一个盒子，盒子里面记载着对象的内存地址，变量的意义就是方便我们去操作对象。</li>
</ol>
<ul>
<li>变量命名规范：<ul>
<li>可以由字母(<code>a-zA-Z</code>)，数字(<code>0-9</code>)，下划线(<code>_</code>)以及美元符号(<code>$</code>)组成</li>
<li>不能由数字开头</li>
<li>命名尽量用英文并且具有一定的含义</li>
<li>如果有多个英文单词, 后面单词的首字母大写</li>
<li>不能使用关键字</li>
<li>首字母不要大写，大写是有特殊含义的</li>
</ul>
</li>
</ul>
<ol start="2">
<li>JavaScript的数据类型<ul>
<li>字符串(<code>String</code>)：比如”Hello World”；</li>
<li>数字(<code>Number</code>)：整数和浮点数；</li>
<li>布尔(<code>Boolean</code>)：true 和 false；</li>
<li><code>Null</code>: 表示空缺，即此处应该有一个值，但目前为空；</li>
<li><code>Undefined</code>: 表示未定义或不存在，即此处目前没有任何值；</li>
<li><code>Symbol</code>：Symbol 是 ES6 引入了一种新的原始数据类型，表示独一无二的值；</li>
<li>对象（<code>object</code>）：各种值组成的集合。</li>
<li>数组（<code>array</code>）：数组类型</li>
<li>函数（<code>function</code>）：函数数据类型</li>
</ul>
</li>
</ol>
<h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ol>
<li>JavaScript严格区分大小写。</li>
<li>JavaScript不区分整数和浮点数，统一用Number表示，以下表示都合法：</li>
</ol>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 123; // 整数123</span><br><span class="line">&gt; 0.456; // 浮点数0.456</span><br><span class="line">&gt; 1.2345e3; // 科学计数法表示1.2345x1000，等同于1234.5</span><br><span class="line">&gt; -99; // 负数</span><br><span class="line">&gt; NaN; // NaN表示Not a Number，当无法计算结果时用NaN表示</span><br><span class="line">&gt; Infinity; // Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<ol start="3">
<li><p>关于相等运算符<code>==</code>。JavaScript在设计时，有两种比较运算符：</p>
<ul>
<li><p>第一种是<code>==</code>比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果；</p>
</li>
<li><p>第二种是<code>===</code>比较，它不会自动转换数据类型，如果数据类型不一致，返回<code>false</code>，如果一致，再比较。</p>
</li>
</ul>
<p>所以在进行比较的时候不要使用<code>==</code>比较，始终坚持使用<code>===</code>比较。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>毕业设计</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
        <tag>JavaScript学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>04服务端功能完成总结</title>
    <url>/2020/02/04/04%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8A%9F%E8%83%BD%E5%AE%8C%E6%88%90%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>摘要：这几天学习Django框架主要用于完成后台管理功能，因为后台比较简单，就是普通网上商城管理员对用户，商品以及订单的管理，所以边学边做，基本把后台管理的功能完成了，接下来一段时间主要做前台用户的功能和图案定制的核心功能。</p>
</blockquote>
<a id="more"></a>
<p><img src="/2020/02/04/04服务端功能完成总结/1.png" alt></p>
<p>这两天通过Django的学习简单实现了后台的功能，虽然做出来的demo比较简单，但是对Django的掌握确实提高了不少，现在把这中间遇到的问题总结一下：</p>
<h4 id="1-使用Django实现上传图片"><a href="#1-使用Django实现上传图片" class="headerlink" title="1. 使用Django实现上传图片"></a>1. 使用Django实现上传图片</h4><ul>
<li><p>首先在项目中创建一个app。例如 python manage.py startapp app1，然后将其加入到settings.py文件中。</p>
<p>  INSTALLED_APPS = [</p>
<pre><code>&apos;django.contrib.admin&apos;,
&apos;django.contrib.auth&apos;,
&apos;django.contrib.contenttypes&apos;,
&apos;django.contrib.sessions&apos;,
&apos;django.contrib.messages&apos;,
&apos;django.contrib.staticfiles&apos;,
&apos;app1&apos;,
</code></pre><p>  ] </p>
</li>
</ul>
<ul>
<li>然后再数据库中建立保存图片的表。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IMG</span> <span class="params">( models.Model )</span> :</span></span><br><span class="line">  img = models.ImageField ( upload_to = <span class="string">'img'</span> )</span><br><span class="line">  name = models.CharField ( max_length = <span class="number">20</span> )</span><br></pre></td></tr></table></figure>
<p>代码中的upload_to指的是图片存储的文件夹名称，上传图片之后会自动创建。</p>
<ul>
<li>修改settings.py文件</li>
</ul>
<p>在settings.py文件后面加上两行代码：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line">#设置静态文件路径为主目录下的media文件夹</span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, 'media').replace('\\', '/')    </span><br><span class="line">#url映射</span><br><span class="line">MEDIA_URL = '/media/'</span><br></pre></td></tr></table></figure>
<ul>
<li>创建模板</li>
</ul>
<p>在templates文件下创建一个文件（最好是我们的app的名字，以此来把页面按app分开），比如叫app1，然后在app1文件下创建uploading.html页面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">        &#123;% csrf_token %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"img"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>以及用于图片展示的showing.html页面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    &#123;% for img in imgs %&#125;</span><br><span class="line">         <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; img.img.url &#125;&#125;"</span> /&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>创建视图函数</li>
</ul>
<p>view.py：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> app1.models <span class="keyword">import</span> IMG</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uploadImg</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    图片上传</span></span><br><span class="line"><span class="string">    :param request: </span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        new_img = IMG(</span><br><span class="line">            img=request.FILES.get(<span class="string">'img'</span>),</span><br><span class="line">            name = request.FILES.get(<span class="string">'img'</span>).name</span><br><span class="line">        )</span><br><span class="line">        new_img.save()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'app1/uploading.html'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showImg</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    图片显示</span></span><br><span class="line"><span class="string">    :param request: </span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    imgs = IMG.objects.all()</span><br><span class="line">    content = &#123;</span><br><span class="line">        <span class="string">'imgs'</span>:imgs,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> imgs:</span><br><span class="line">        <span class="keyword">print</span> (i.img.url)</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'app1/showing.html'</span>,content)</span><br></pre></td></tr></table></figure>
<ul>
<li>配置urls.py</li>
</ul>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">urlpatterns = [</span></span><br><span class="line"><span class="xml">    path('admin/', admin.site.urls),</span></span><br><span class="line"><span class="xml">    url(r'^upload', views.uploadImg),</span></span><br><span class="line"><span class="xml">    url(r'^show', views.showImg),</span></span><br><span class="line"><span class="xml">] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)</span></span><br></pre></td></tr></table></figure>
<h4 id="2-Django表单的一些注意点"><a href="#2-Django表单的一些注意点" class="headerlink" title="2.Django表单的一些注意点"></a>2.Django表单的一些注意点</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/search-post"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span>        </span><br><span class="line">    &#123;% csrf_token %&#125;        </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>form表单后面有一个csrf_token的标签。csrf 全称是 Cross Site Request Forgery。这是Django提供的防止伪装提交请求的功能。POST 方法提交的表格，必须有此标签。</p>
<h4 id="3-模板继承"><a href="#3-模板继承" class="headerlink" title="3.模板继承"></a>3.模板继承</h4><p>Django提供了特别好的HTML继承功能，在HTML中看到block和endblock标签，表示标签内部的内容可以供其他模板重载，只需要在其他模板中加入extends标签即可，如：</p>
<p>example.html</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;示例&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello World!&lt;/h1&gt;</span><br><span class="line">    &#123;% block mainbody %&#125;</span><br><span class="line">       &lt;p&gt;23333&lt;/p&gt;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>helloworld.html：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;%extends &quot;example.html&quot; %&#125;</span><br><span class="line"> </span><br><span class="line">&#123;% block mainbody %&#125;</span><br><span class="line">&lt;p&gt;此部分继承了 example.html 文件&lt;/p&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>
<p>打开helloworld.html文件即可看到example.html里面block标签内的内容被替换：</p>
<p><img src="/2020/02/04/04服务端功能完成总结/2.png" alt></p>
<p>这些是学习过程中特别注意到的一些点和遇到的几个问题，特别感谢<a href="https://www.runoob.com/" target="_blank" rel="noopener">菜鸟教程</a>，在上面学到了很多东西，明天开始做核心功能，主要是和用户交互部分和核心算法，接下来会主要学习一下JavaScript和Python。</p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
      </tags>
  </entry>
  <entry>
    <title>03Django框架学习</title>
    <url>/2020/02/03/03Django%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<blockquote>
<p>摘要：Django框架是一个比较大型的框架，相较于flask等等。也正是因为Django的体量比较大，做很多功能有现成的方案，实现起来比较简单和方便，所以我在毕设当中采用了Django框架。</p>
</blockquote>
<a id="more"></a>
<p>在学校的时候虽然用Django框架做出来一部分功能和界面，但是我对于Django的理解还很停留在表面，想做出许多功能但是不知道在Django中如何进行操作。所以趁着假期对Django框架和Python语言进行一下深入的学习，这次的课程实在<a href="https://www.bilibili.com/" target="_blank" rel="noopener">哔哩哔哩</a>上找的<a href="https://www.bilibili.com/video/av45473851" target="_blank" rel="noopener">Django2.1框架教学</a>，虽然教学是关于Django框架的，但是还是学到了很多加深对软件开发理解性的东西，比如网站的层次概念，Django框架的MVT概念等等。</p>
<p><img src="/2020/02/03/03Django框架学习/1.png" alt="前后端分离网站层次图" title="前后端分离网站层次图"></p>
<p><img src="/2020/02/03/03Django框架学习/2.png" alt title="MVT框架"></p>
<p>Django通过MVT框架对前后端进行管理，即：</p>
<ul>
<li><p>Model（模型）用于和数据库进行交互</p>
</li>
<li><p>View（视图）用于接收请求，进行处理，与M和T进行交互，返回应答</p>
</li>
<li><p>Template（模板）用于产生HTML页面</p>
</li>
</ul>
<p>这样用户使用起来就方便了很多，对数据的管理交给框架就可以了，我们开发时候可以专注于功能，框架的方便性就体现了出来。</p>
<p>写的有些少，但是学到了很多，还是要多动手练习。</p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
      </tags>
  </entry>
  <entry>
    <title>02重新设计数据库</title>
    <url>/2020/02/02/02%E9%87%8D%E6%96%B0%E8%AE%BE%E8%AE%A1%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<blockquote>
<p>摘要：今天根着网上的一个实战项目类比发现我之前做的一些东西还不够完善，底层数据库的设计也很简单，只能是把简单的业务功能实现了，远远没有达到实际中的项目需要，尤其是管理员界面，离实际使用还有很大距离。</p>
</blockquote>
<a id="more"></a>
<p>管理界面在学习阶段是我们自己经常用的，我们作为研发人员知道自己想要什么，怎么使用。但是实际交付工作，管理端往往是交付给完全没有软件设计经验的管理人员使用，他们也需要像普通用户一样简单易懂的管理界面。因此要把后台也是值得更加精细化，便于管理员使用。</p>
<p><img src="/2020/02/02/02重新设计数据库/1.png" alt></p>
<p>这是我的网站首页，现在这个网站的轮播图只能通过修改代码和后台图片实现。通过网上学习项目，我第一次接触到后台管理可通过上传图片，指定某张具体的图片进行管理首页，当然也包括后面的销量图，活动图等等，这就需要管理端的数据库更加精细化，设计更多的表对需要指定的内容进行一一对应。所以我今天对照视频把自己的数据库进行了重新设计。加入了之前没有的对前端页面显示的管理，又增加了对产品的一些细节化管理，比如详情图片管理，简介管理等等。</p>
<p>之前对于管理端的理解比较简单，今天对管理端又有了重新的认识，管理端也是普通用户的一端，所有用户接触到的一端都应该设计的简单，方便，易用，易于理解。</p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
      </tags>
  </entry>
  <entry>
    <title>01毕设学习进度记录</title>
    <url>/2020/02/01/01%E6%AF%95%E8%AE%BE%E5%AD%A6%E4%B9%A0%E8%BF%9B%E5%BA%A6%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<blockquote>
<p>摘要：寒假期间毕业设计进度记录。主要用于督促自己毕业设计的进度，也是对自己这个过程的一个记录，方便以后回顾。</p>
</blockquote>
<a id="more"></a>  
<p>寒假前几天学习了近一个星期Django框架，过年几天没有学习。</p>
<p>今天是年后第一天开始做毕设，Django框架学习起来比较简单，虽然Django框架很大，学习周期比较长，但是借助于Django模板的方便性，学习起来还是很快，尤其是连接数据库的简单让我很惊讶，从Java到Python再到Django，连接数据库越来越趋于简单，可能以后的编程会越来越趋于 “拼接” 这种方向。</p>
<p>接下来几天的计划都是对Django框架的学习，以及对毕设项目的完善，下面简单描述一下毕设项目。</p>
<hr>
<h3 id="毕设项目介绍"><a href="#毕设项目介绍" class="headerlink" title="毕设项目介绍"></a>毕设项目介绍</h3><p>项目名称：<strong>文化衫定制平台的设计与实现</strong></p>
<ol>
<li><p>设计要求</p>
<p>文化衫定制平台的设计与实现要求学生独立设计文化衫交流社区，基于在线交互模式实现文化衫个性化定制、发布、销售、交流和推荐等功能。</p>
<p>(1)系统要求开发工具采用 Pycharm + Android SDK + MySQL + Tomcat等。</p>
<p>(2)要求系统界面设计美观，交互友好，操作方便。</p>
</li>
<li><p>设计内容</p>
<p>文化衫定制平台的角色包括平台管理员、制造销售商、设计师和会员用户等，系统分别为管理员、制造销售商、设计师和会员提供如下功能：</p>
<p>(1)管理员、销售制造商、设计师和会员的信息管理功能。</p>
<p>(2)基于交互模式的文化衫图案在线设计功能，并提供侵权举报功能。</p>
<p>(3)提供文化衫定制、销售功能，并基于文化衫销售数据提供数据分析与定价推荐功能。</p>
<p>(4)提供制造销售商、设计师和会员用户的积分预等级管理功能。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
      </tags>
  </entry>
  <entry>
    <title>欢 迎</title>
    <url>/2019/04/14/hello-world/</url>
    <content><![CDATA[<center>print(“Hello World”)</center><br><center>欢迎，这是我的第一篇博客！</center>
]]></content>
  </entry>
</search>
